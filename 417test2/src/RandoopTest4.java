
import junit.framework.*;

public class RandoopTest4 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test1");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    java.lang.String var7 = var6.toString();
    var6.setCapacity(1);
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    java.lang.String var16 = var10.toString();
    var6.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var10);
    boolean var19 = var10.isFull();
    java.lang.String var20 = var10.toString();
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isFull();
    boolean var25 = var21.isFull();
    java.lang.Object var26 = var21.dequeue();
    java.lang.String var27 = var21.toString();
    boolean var28 = var21.isFull();
    boolean var29 = var21.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isEmpty();
    java.lang.String var34 = var30.toString();
    boolean var35 = var30.isFull();
    boolean var36 = var30.isEmpty();
    java.lang.Object var37 = var30.dequeue();
    java.lang.String var38 = var30.toString();
    boolean var39 = var30.isFull();
    java.lang.String var40 = var30.toString();
    var21.enqueue((java.lang.Object)var30);
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    boolean var48 = var42.isFull();
    boolean var49 = var42.isFull();
    java.lang.String var50 = var42.toString();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isFull();
    boolean var55 = var51.isFull();
    java.lang.Object var56 = var51.dequeue();
    boolean var57 = var51.isFull();
    boolean var58 = var51.isFull();
    java.lang.String var59 = var51.toString();
    var51.enqueue((java.lang.Object)1.0d);
    var51.setCapacity(0);
    var42.enqueue((java.lang.Object)0);
    java.lang.String var65 = var42.toString();
    var42.setCapacity(10);
    boolean var68 = var42.isFull();
    var30.enqueue((java.lang.Object)var42);
    java.lang.Object var70 = var30.dequeue();
    var10.enqueue((java.lang.Object)var30);
    java.lang.Object var72 = var10.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var73 = var10.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[false]"+ "'", var34.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + false+ "'", var56.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[0]"+ "'", var65.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test2");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.String var38 = var16.toString();
    var16.setCapacity(100);
    boolean var41 = var16.isFull();
    QueueFaulty var42 = new QueueFaulty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    java.lang.String var51 = var43.toString();
    var43.setCapacity(0);
    var42.enqueue((java.lang.Object)var43);
    boolean var55 = var43.isEmpty();
    boolean var56 = var43.isFull();
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    boolean var60 = var57.isEmpty();
    boolean var61 = var57.isFull();
    var57.setCapacity(10);
    boolean var64 = var57.isEmpty();
    var57.setCapacity(100);
    var57.setCapacity(0);
    java.lang.Object var69 = var57.dequeue();
    var43.enqueue((java.lang.Object)var57);
    var16.enqueue((java.lang.Object)var43);
    boolean var72 = var43.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[10]"+ "'", var38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test3");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    boolean var16 = var12.isFull();
    boolean var17 = var12.isEmpty();
    java.lang.String var18 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    java.lang.Object var20 = var12.dequeue();
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isFull();
    boolean var25 = var21.isFull();
    java.lang.Object var26 = var21.dequeue();
    var21.enqueue((java.lang.Object)1.0f);
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isEmpty();
    java.lang.Object var33 = var29.dequeue();
    var29.setCapacity(10);
    boolean var36 = var29.isFull();
    var21.enqueue((java.lang.Object)var29);
    boolean var38 = var21.isEmpty();
    var12.enqueue((java.lang.Object)var21);
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isEmpty();
    java.lang.Object var44 = var40.dequeue();
    boolean var45 = var40.isFull();
    java.lang.String var46 = var40.toString();
    boolean var47 = var40.isEmpty();
    var40.enqueue((java.lang.Object)(byte)10);
    java.lang.Object var50 = var40.dequeue();
    boolean var51 = var40.isEmpty();
    QueueFaulty var52 = new QueueFaulty();
    var52.enqueue((java.lang.Object)false);
    boolean var55 = var52.isFull();
    boolean var56 = var52.isFull();
    java.lang.Object var57 = var52.dequeue();
    QueueFaulty var58 = new QueueFaulty();
    var58.enqueue((java.lang.Object)false);
    boolean var61 = var58.isFull();
    boolean var62 = var58.isFull();
    java.lang.Object var63 = var58.dequeue();
    boolean var64 = var58.isFull();
    boolean var65 = var58.isFull();
    java.lang.String var66 = var58.toString();
    var58.enqueue((java.lang.Object)1.0d);
    var52.enqueue((java.lang.Object)1.0d);
    var40.enqueue((java.lang.Object)1.0d);
    var21.enqueue((java.lang.Object)var40);
    boolean var72 = var21.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[false]"+ "'", var18.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + false+ "'", var44.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + (byte)10+ "'", var50.equals((byte)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + false+ "'", var63.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "[]"+ "'", var66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test4");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    java.lang.Object var11 = var0.dequeue();
    var0.setCapacity(100);
    boolean var14 = var0.isEmpty();
    java.lang.String var15 = var0.toString();
    var0.setCapacity(0);
    boolean var18 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1.0f+ "'", var11.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test5");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var5.setCapacity(1);
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    java.lang.String var15 = var9.toString();
    var5.enqueue((java.lang.Object)var9);
    boolean var17 = var5.isEmpty();
    boolean var18 = var5.isEmpty();
    java.lang.String var19 = var5.toString();
    boolean var20 = var5.isEmpty();
    boolean var21 = var5.isEmpty();
    boolean var22 = var5.isEmpty();
    boolean var23 = var5.isEmpty();
    java.lang.String var24 = var5.toString();
    var0.enqueue((java.lang.Object)var5);
    boolean var26 = var0.isEmpty();
    boolean var27 = var0.isEmpty();
    java.lang.Object var28 = var0.dequeue();
    java.lang.String var29 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[[]]"+ "'", var19.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[]]"+ "'", var24.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test6");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    var6.enqueue((java.lang.Object)1.0f);
    var6.setCapacity(10);
    var0.enqueue((java.lang.Object)var6);
    var0.setCapacity(10);
    boolean var19 = var0.isFull();
    var0.setCapacity((-1));
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isFull();
    boolean var26 = var22.isFull();
    java.lang.Object var27 = var22.dequeue();
    var22.enqueue((java.lang.Object)1.0f);
    java.lang.String var30 = var22.toString();
    java.lang.String var31 = var22.toString();
    var22.setCapacity(10);
    boolean var34 = var22.isEmpty();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isFull();
    boolean var39 = var35.isFull();
    java.lang.Object var40 = var35.dequeue();
    java.lang.String var41 = var35.toString();
    boolean var42 = var35.isFull();
    var22.enqueue((java.lang.Object)var42);
    boolean var44 = var22.isEmpty();
    boolean var45 = var22.isFull();
    var0.enqueue((java.lang.Object)var22);
    var22.setCapacity((-1));
    java.lang.Object var49 = var22.dequeue();
    boolean var50 = var22.isEmpty();
    java.lang.String var51 = var22.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[1.0]"+ "'", var30.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[1.0]"+ "'", var31.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[false]"+ "'", var51.equals("[false]"));

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test7");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isEmpty();
    java.lang.Object var12 = var8.dequeue();
    var8.setCapacity(10);
    boolean var15 = var8.isFull();
    var0.enqueue((java.lang.Object)var8);
    boolean var17 = var0.isFull();
    java.lang.Object var18 = var0.dequeue();
    var0.setCapacity(1);
    boolean var21 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + 1.0f+ "'", var18.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test8");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    boolean var10 = var0.isEmpty();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.setCapacity((-1));
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isEmpty();
    java.lang.Object var26 = var22.dequeue();
    var22.setCapacity(10);
    boolean var29 = var22.isFull();
    java.lang.String var30 = var22.toString();
    boolean var31 = var22.isEmpty();
    QueueFaulty var32 = new QueueFaulty();
    java.lang.String var33 = var32.toString();
    var32.setCapacity(1);
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    java.lang.String var42 = var36.toString();
    var32.enqueue((java.lang.Object)var36);
    var22.enqueue((java.lang.Object)var32);
    boolean var45 = var22.isEmpty();
    var11.enqueue((java.lang.Object)var22);
    java.lang.Object var47 = var22.dequeue();
    boolean var48 = var22.isFull();
    var0.enqueue((java.lang.Object)var48);
    QueueFaulty var50 = new QueueFaulty();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isFull();
    boolean var55 = var51.isFull();
    java.lang.Object var56 = var51.dequeue();
    boolean var57 = var51.isFull();
    boolean var58 = var51.isFull();
    java.lang.String var59 = var51.toString();
    var51.setCapacity(0);
    var50.enqueue((java.lang.Object)var51);
    var51.setCapacity(10);
    QueueFaulty var65 = new QueueFaulty();
    boolean var66 = var65.isEmpty();
    boolean var67 = var65.isEmpty();
    boolean var68 = var65.isEmpty();
    QueueFaulty var69 = new QueueFaulty();
    var69.enqueue((java.lang.Object)false);
    boolean var72 = var69.isFull();
    boolean var73 = var69.isFull();
    java.lang.Object var74 = var69.dequeue();
    var69.enqueue((java.lang.Object)1.0f);
    var65.enqueue((java.lang.Object)var69);
    var51.enqueue((java.lang.Object)var69);
    boolean var79 = var51.isEmpty();
    java.lang.String var80 = var51.toString();
    var51.setCapacity(0);
    var0.enqueue((java.lang.Object)var51);
    boolean var84 = var0.isFull();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + false+ "'", var56.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + false+ "'", var74.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[[1.0]]"+ "'", var80.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test9");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    QueueFaulty var2 = new QueueFaulty();
    java.lang.String var3 = var2.toString();
    var2.setCapacity(1);
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    java.lang.String var12 = var6.toString();
    var2.enqueue((java.lang.Object)var6);
    boolean var14 = var2.isEmpty();
    boolean var15 = var2.isEmpty();
    java.lang.String var16 = var2.toString();
    var2.setCapacity(100);
    boolean var19 = var2.isFull();
    var2.setCapacity(10);
    boolean var22 = var2.isFull();
    var0.enqueue((java.lang.Object)var22);
    var0.setCapacity(10);
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[[]]"+ "'", var16.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test10");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    java.lang.String var30 = var1.toString();
    var1.setCapacity(0);
    java.lang.String var33 = var1.toString();
    var1.setCapacity(0);
    QueueFaulty var36 = new QueueFaulty();
    boolean var37 = var36.isEmpty();
    java.lang.String var38 = var36.toString();
    var36.setCapacity((-1));
    boolean var41 = var36.isEmpty();
    QueueFaulty var42 = new QueueFaulty();
    boolean var43 = var42.isEmpty();
    java.lang.String var44 = var42.toString();
    var42.setCapacity(0);
    var36.enqueue((java.lang.Object)var42);
    var1.enqueue((java.lang.Object)var36);
    java.lang.String var49 = var1.toString();
    boolean var50 = var1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[1.0]]"+ "'", var30.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[[1.0]]"+ "'", var33.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[[1.0], [[]]]"+ "'", var49.equals("[[1.0], [[]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test11");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(0);
    boolean var24 = var7.isEmpty();
    var7.setCapacity(100);
    boolean var27 = var7.isFull();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isFull();
    boolean var32 = var28.isFull();
    java.lang.Object var33 = var28.dequeue();
    var28.enqueue((java.lang.Object)1.0f);
    java.lang.String var36 = var28.toString();
    java.lang.String var37 = var28.toString();
    var28.setCapacity(10);
    boolean var40 = var28.isEmpty();
    QueueFaulty var41 = new QueueFaulty();
    var41.enqueue((java.lang.Object)false);
    boolean var44 = var41.isFull();
    boolean var45 = var41.isFull();
    java.lang.Object var46 = var41.dequeue();
    java.lang.String var47 = var41.toString();
    boolean var48 = var41.isFull();
    var28.enqueue((java.lang.Object)var48);
    boolean var50 = var28.isEmpty();
    boolean var51 = var28.isFull();
    java.lang.Object var52 = var28.dequeue();
    boolean var53 = var28.isEmpty();
    java.lang.Object var54 = var28.dequeue();
    var7.enqueue((java.lang.Object)var28);
    boolean var56 = var28.isFull();
    boolean var57 = var28.isEmpty();
    boolean var58 = var28.isEmpty();
    var28.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[1.0]"+ "'", var36.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[1.0]"+ "'", var37.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + false+ "'", var46.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test12");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    boolean var24 = var0.isFull();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    boolean var32 = var25.isFull();
    boolean var33 = var25.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isEmpty();
    java.lang.String var38 = var34.toString();
    boolean var39 = var34.isFull();
    boolean var40 = var34.isEmpty();
    java.lang.Object var41 = var34.dequeue();
    java.lang.String var42 = var34.toString();
    boolean var43 = var34.isFull();
    java.lang.String var44 = var34.toString();
    var25.enqueue((java.lang.Object)var34);
    boolean var46 = var25.isEmpty();
    java.lang.Object var47 = var25.dequeue();
    var0.enqueue((java.lang.Object)var25);
    var25.setCapacity(100);
    var25.setCapacity(0);
    boolean var53 = var25.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test13");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    java.lang.Object var15 = var0.dequeue();
    QueueFaulty var16 = new QueueFaulty();
    java.lang.String var17 = var16.toString();
    var16.setCapacity(1);
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    java.lang.String var26 = var20.toString();
    var16.enqueue((java.lang.Object)var20);
    boolean var28 = var16.isEmpty();
    boolean var29 = var16.isEmpty();
    java.lang.String var30 = var16.toString();
    var16.setCapacity((-1));
    boolean var33 = var16.isFull();
    java.lang.Object var34 = var16.dequeue();
    boolean var35 = var16.isEmpty();
    var0.enqueue((java.lang.Object)var35);
    QueueFaulty var37 = new QueueFaulty();
    var37.enqueue((java.lang.Object)false);
    boolean var40 = var37.isEmpty();
    java.lang.Object var41 = var37.dequeue();
    var37.setCapacity(10);
    boolean var44 = var37.isFull();
    java.lang.String var45 = var37.toString();
    boolean var46 = var37.isEmpty();
    java.lang.String var47 = var37.toString();
    var0.enqueue((java.lang.Object)var37);
    var37.setCapacity(0);
    var37.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[]]"+ "'", var30.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test14");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    var0.setCapacity(0);
    java.lang.String var5 = var0.toString();
    var0.setCapacity(1);
    var0.setCapacity(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var10 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test15");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.enqueue((java.lang.Object)1.0d);
    var16.setCapacity(0);
    boolean var29 = var16.isEmpty();
    var16.setCapacity(0);
    var3.enqueue((java.lang.Object)var16);
    var3.setCapacity((-1));
    QueueFaulty var35 = new QueueFaulty();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    boolean var42 = var36.isFull();
    boolean var43 = var36.isFull();
    java.lang.String var44 = var36.toString();
    var36.setCapacity(0);
    var35.enqueue((java.lang.Object)var36);
    var36.setCapacity(10);
    QueueFaulty var50 = new QueueFaulty();
    boolean var51 = var50.isEmpty();
    boolean var52 = var50.isEmpty();
    boolean var53 = var50.isEmpty();
    QueueFaulty var54 = new QueueFaulty();
    var54.enqueue((java.lang.Object)false);
    boolean var57 = var54.isFull();
    boolean var58 = var54.isFull();
    java.lang.Object var59 = var54.dequeue();
    var54.enqueue((java.lang.Object)1.0f);
    var50.enqueue((java.lang.Object)var54);
    var36.enqueue((java.lang.Object)var54);
    boolean var64 = var36.isEmpty();
    boolean var65 = var36.isEmpty();
    boolean var66 = var36.isFull();
    java.lang.String var67 = var36.toString();
    var36.setCapacity((-1));
    var3.enqueue((java.lang.Object)var36);
    boolean var71 = var3.isFull();
    boolean var72 = var3.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var73 = var3.toString();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + false+ "'", var59.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[[1.0]]"+ "'", var67.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test16");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isFull();
    java.lang.String var11 = var7.toString();
    var7.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    boolean var15 = var0.isFull();
    var0.setCapacity(0);
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[false]"+ "'", var11.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test17");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var13 = new QueueFaulty();
    java.lang.String var14 = var13.toString();
    var13.setCapacity(1);
    var13.setCapacity((-1));
    boolean var19 = var13.isEmpty();
    var13.setCapacity(0);
    var0.enqueue((java.lang.Object)var13);
    boolean var23 = var13.isEmpty();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    QueueFaulty var29 = new QueueFaulty();
    java.lang.String var30 = var29.toString();
    var24.enqueue((java.lang.Object)var30);
    boolean var32 = var24.isFull();
    java.lang.String var33 = var24.toString();
    var13.enqueue((java.lang.Object)var24);
    var13.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[[]]"+ "'", var33.equals("[[]]"));

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test18");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    boolean var11 = var10.isEmpty();
    java.lang.String var12 = var10.toString();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    boolean var19 = var13.isFull();
    boolean var20 = var13.isFull();
    java.lang.String var21 = var13.toString();
    var13.enqueue((java.lang.Object)1.0d);
    boolean var24 = var13.isFull();
    var10.enqueue((java.lang.Object)var13);
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    boolean var32 = var26.isFull();
    boolean var33 = var26.isFull();
    boolean var34 = var26.isFull();
    java.lang.String var35 = var26.toString();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isEmpty();
    java.lang.Object var40 = var36.dequeue();
    QueueFaulty var41 = new QueueFaulty();
    java.lang.String var42 = var41.toString();
    var36.enqueue((java.lang.Object)var42);
    var36.setCapacity(10);
    var26.enqueue((java.lang.Object)10);
    var13.enqueue((java.lang.Object)var26);
    var0.enqueue((java.lang.Object)var26);
    var0.setCapacity((-1));
    boolean var51 = var0.isFull();
    boolean var52 = var0.isEmpty();
    java.lang.Object var53 = var0.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var54 = var0.dequeue();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test19");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.Object var38 = var16.dequeue();
    boolean var39 = var16.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var40 = var16.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 10+ "'", var38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test20");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    var0.enqueue((java.lang.Object)(short)10);
    var0.setCapacity(10);
    var0.setCapacity(100);
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test21");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var10);
    boolean var23 = var0.isEmpty();
    boolean var24 = var0.isEmpty();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    boolean var31 = var25.isFull();
    boolean var32 = var25.isFull();
    java.lang.String var33 = var25.toString();
    var25.setCapacity(0);
    boolean var36 = var25.isEmpty();
    var25.setCapacity(100);
    var25.setCapacity(100);
    QueueFaulty var41 = new QueueFaulty();
    var41.enqueue((java.lang.Object)false);
    boolean var44 = var41.isFull();
    boolean var45 = var41.isFull();
    java.lang.Object var46 = var41.dequeue();
    boolean var47 = var41.isFull();
    boolean var48 = var41.isFull();
    java.lang.String var49 = var41.toString();
    var41.setCapacity((-1));
    java.lang.String var52 = var41.toString();
    boolean var53 = var41.isEmpty();
    boolean var54 = var41.isFull();
    boolean var55 = var41.isEmpty();
    var25.enqueue((java.lang.Object)var55);
    var0.enqueue((java.lang.Object)var25);
    var25.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + false+ "'", var46.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test22");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.toString();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test23");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    boolean var5 = var0.isEmpty();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isEmpty();
    boolean var9 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[false]"+ "'", var6.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test24");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    var0.setCapacity((-1));
    boolean var17 = var0.isFull();
    boolean var18 = var0.isFull();
    java.lang.Object var19 = var0.dequeue();
    boolean var20 = var0.isFull();
    boolean var21 = var0.isFull();
    boolean var22 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var23 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test25");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    var0.setCapacity(1);
    boolean var15 = var0.isEmpty();
    java.lang.String var16 = var0.toString();
    boolean var17 = var0.isEmpty();
    boolean var18 = var0.isEmpty();
    java.lang.String var19 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test26");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    var0.setCapacity(100);
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    boolean var19 = var15.isFull();
    var15.setCapacity(10);
    boolean var22 = var15.isFull();
    var0.enqueue((java.lang.Object)var15);
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    boolean var28 = var24.isFull();
    java.lang.String var29 = var24.toString();
    java.lang.Object var30 = var24.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isEmpty();
    java.lang.Object var35 = var31.dequeue();
    var31.setCapacity(10);
    boolean var38 = var31.isFull();
    var31.setCapacity(1);
    boolean var41 = var31.isEmpty();
    var31.setCapacity(10);
    var24.enqueue((java.lang.Object)var31);
    boolean var45 = var31.isEmpty();
    var31.setCapacity(0);
    boolean var48 = var31.isFull();
    var15.enqueue((java.lang.Object)var31);
    boolean var50 = var31.isEmpty();
    boolean var51 = var31.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[false]"+ "'", var29.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test27");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    var0.setCapacity(10);
    java.lang.Object var10 = var0.dequeue();
    boolean var11 = var0.isEmpty();
    var0.setCapacity(100);
    boolean var14 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test28");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    boolean var12 = var6.isFull();
    boolean var13 = var6.isFull();
    java.lang.String var14 = var6.toString();
    var6.enqueue((java.lang.Object)1.0d);
    var0.enqueue((java.lang.Object)1.0d);
    boolean var18 = var0.isFull();
    boolean var19 = var0.isFull();
    var0.setCapacity(0);
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isFull();
    boolean var26 = var22.isFull();
    java.lang.Object var27 = var22.dequeue();
    boolean var28 = var22.isFull();
    boolean var29 = var22.isFull();
    boolean var30 = var22.isFull();
    var22.setCapacity(0);
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isEmpty();
    java.lang.Object var37 = var33.dequeue();
    var33.setCapacity(10);
    boolean var40 = var33.isFull();
    var33.setCapacity(1);
    boolean var43 = var33.isEmpty();
    var22.enqueue((java.lang.Object)var33);
    var22.setCapacity(10);
    var22.setCapacity(100);
    var0.enqueue((java.lang.Object)100);
    java.lang.Object var50 = var0.dequeue();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 1.0d+ "'", var50.equals(1.0d));

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test29");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(0);
    boolean var24 = var7.isEmpty();
    boolean var25 = var7.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var26 = var7.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test30");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.String var38 = var16.toString();
    java.lang.String var39 = var16.toString();
    boolean var40 = var16.isEmpty();
    boolean var41 = var16.isFull();
    java.lang.Object var42 = var16.dequeue();
    QueueFaulty var43 = new QueueFaulty();
    boolean var44 = var43.isEmpty();
    java.lang.String var45 = var43.toString();
    var43.setCapacity(0);
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isEmpty();
    java.lang.Object var52 = var48.dequeue();
    boolean var53 = var48.isFull();
    var43.enqueue((java.lang.Object)var53);
    java.lang.String var55 = var43.toString();
    var16.enqueue((java.lang.Object)var43);
    boolean var57 = var43.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[10]"+ "'", var38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[10]"+ "'", var39.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10+ "'", var42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[false]"+ "'", var55.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test31");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(0);
    java.lang.String var24 = var7.toString();
    boolean var25 = var7.isFull();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    boolean var30 = var26.isFull();
    java.lang.String var31 = var26.toString();
    java.lang.Object var32 = var26.dequeue();
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isEmpty();
    java.lang.Object var37 = var33.dequeue();
    var33.setCapacity(10);
    boolean var40 = var33.isFull();
    var33.setCapacity(1);
    boolean var43 = var33.isEmpty();
    var33.setCapacity(10);
    var26.enqueue((java.lang.Object)var33);
    boolean var47 = var33.isFull();
    boolean var48 = var33.isEmpty();
    boolean var49 = var33.isFull();
    QueueFaulty var50 = new QueueFaulty();
    var50.enqueue((java.lang.Object)false);
    boolean var53 = var50.isEmpty();
    java.lang.Object var54 = var50.dequeue();
    var50.setCapacity(10);
    boolean var57 = var50.isFull();
    java.lang.String var58 = var50.toString();
    boolean var59 = var50.isEmpty();
    var33.enqueue((java.lang.Object)var50);
    var50.setCapacity(1);
    boolean var63 = var50.isFull();
    var7.enqueue((java.lang.Object)var63);
    java.lang.Object var65 = var7.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[false]"+ "'", var31.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + false+ "'", var54.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "[]"+ "'", var58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + false+ "'", var65.equals(false));

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test32");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    java.lang.Object var12 = var0.dequeue();
    var0.enqueue((java.lang.Object)100);
    boolean var15 = var0.isFull();
    boolean var16 = var0.isEmpty();
    boolean var17 = var0.isFull();
    boolean var18 = var0.isFull();
    java.lang.Object var19 = var0.dequeue();
    boolean var20 = var0.isEmpty();
    boolean var21 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + 100+ "'", var19.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test33");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    var0.setCapacity(0);
    QueueFaulty var6 = new QueueFaulty();
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    boolean var9 = var6.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    var10.enqueue((java.lang.Object)1.0f);
    var6.enqueue((java.lang.Object)var10);
    boolean var19 = var10.isEmpty();
    var10.setCapacity(100);
    var0.enqueue((java.lang.Object)100);
    var0.setCapacity(1);
    boolean var25 = var0.isEmpty();
    java.lang.Object var26 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test34");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(1);
    boolean var10 = var0.isEmpty();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    QueueFaulty var15 = new QueueFaulty();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.setCapacity(0);
    var15.enqueue((java.lang.Object)var16);
    var16.setCapacity(10);
    QueueFaulty var30 = new QueueFaulty();
    boolean var31 = var30.isEmpty();
    boolean var32 = var30.isEmpty();
    boolean var33 = var30.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    java.lang.Object var39 = var34.dequeue();
    var34.enqueue((java.lang.Object)1.0f);
    var30.enqueue((java.lang.Object)var34);
    var16.enqueue((java.lang.Object)var34);
    boolean var44 = var16.isEmpty();
    java.lang.String var45 = var16.toString();
    boolean var46 = var16.isEmpty();
    var0.enqueue((java.lang.Object)var16);
    boolean var48 = var16.isEmpty();
    var16.setCapacity(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var51 = var16.dequeue();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[[1.0]]"+ "'", var45.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test35");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    var6.enqueue((java.lang.Object)1.0f);
    var6.setCapacity(10);
    var0.enqueue((java.lang.Object)var6);
    boolean var17 = var0.isFull();
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isEmpty();
    boolean var22 = var18.isFull();
    var18.setCapacity(10);
    boolean var25 = var18.isEmpty();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    java.lang.String var32 = var26.toString();
    var18.enqueue((java.lang.Object)var32);
    java.lang.Object var34 = var18.dequeue();
    var0.enqueue((java.lang.Object)var18);
    boolean var36 = var0.isEmpty();
    QueueFaulty var37 = new QueueFaulty();
    java.lang.String var38 = var37.toString();
    var37.setCapacity(1);
    QueueFaulty var41 = new QueueFaulty();
    var41.enqueue((java.lang.Object)false);
    boolean var44 = var41.isFull();
    boolean var45 = var41.isFull();
    java.lang.Object var46 = var41.dequeue();
    java.lang.String var47 = var41.toString();
    var37.enqueue((java.lang.Object)var41);
    boolean var49 = var37.isEmpty();
    boolean var50 = var37.isEmpty();
    java.lang.String var51 = var37.toString();
    var37.setCapacity((-1));
    java.lang.Object var54 = var37.dequeue();
    boolean var55 = var37.isFull();
    var0.enqueue((java.lang.Object)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + false+ "'", var46.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[[]]"+ "'", var51.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test36");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    java.lang.Object var16 = var0.dequeue();
    boolean var17 = var0.isEmpty();
    var0.setCapacity(100);
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    java.lang.String var23 = var20.toString();
    boolean var24 = var20.isEmpty();
    boolean var25 = var20.isEmpty();
    boolean var26 = var20.isFull();
    boolean var27 = var20.isFull();
    var20.setCapacity((-1));
    boolean var30 = var20.isEmpty();
    var0.enqueue((java.lang.Object)var30);
    java.lang.Object var32 = var0.dequeue();
    boolean var33 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[false]"+ "'", var23.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test37");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    boolean var20 = var11.isFull();
    boolean var21 = var11.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test38");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    boolean var12 = var6.isFull();
    boolean var13 = var6.isFull();
    java.lang.String var14 = var6.toString();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isFull();
    boolean var19 = var15.isFull();
    java.lang.Object var20 = var15.dequeue();
    boolean var21 = var15.isFull();
    boolean var22 = var15.isFull();
    java.lang.String var23 = var15.toString();
    var15.enqueue((java.lang.Object)1.0d);
    var15.setCapacity(0);
    var6.enqueue((java.lang.Object)0);
    java.lang.String var29 = var6.toString();
    var6.setCapacity(10);
    boolean var32 = var6.isEmpty();
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isEmpty();
    java.lang.Object var37 = var33.dequeue();
    boolean var38 = var33.isFull();
    boolean var39 = var33.isEmpty();
    var33.setCapacity(10);
    var6.enqueue((java.lang.Object)var33);
    java.lang.String var43 = var33.toString();
    var0.enqueue((java.lang.Object)var33);
    QueueFaulty var45 = new QueueFaulty();
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isFull();
    boolean var52 = var48.isFull();
    java.lang.Object var53 = var48.dequeue();
    java.lang.String var54 = var48.toString();
    boolean var55 = var48.isFull();
    boolean var56 = var48.isEmpty();
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    boolean var60 = var57.isEmpty();
    java.lang.String var61 = var57.toString();
    boolean var62 = var57.isFull();
    boolean var63 = var57.isEmpty();
    java.lang.Object var64 = var57.dequeue();
    java.lang.String var65 = var57.toString();
    boolean var66 = var57.isFull();
    java.lang.String var67 = var57.toString();
    var48.enqueue((java.lang.Object)var57);
    var45.enqueue((java.lang.Object)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var48);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[0]"+ "'", var29.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + false+ "'", var53.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[false]"+ "'", var61.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + false+ "'", var64.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[]"+ "'", var65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test39");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isEmpty();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.isFull();
    boolean var15 = var9.isEmpty();
    java.lang.Object var16 = var9.dequeue();
    java.lang.String var17 = var9.toString();
    boolean var18 = var9.isFull();
    java.lang.String var19 = var9.toString();
    var0.enqueue((java.lang.Object)var9);
    var9.setCapacity((-1));
    var9.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[false]"+ "'", var13.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test40");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    boolean var8 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test41");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    java.lang.Object var28 = var0.dequeue();
    boolean var29 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test42");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    var0.setCapacity(100);
    boolean var7 = var0.isFull();
    boolean var8 = var0.isEmpty();
    var0.setCapacity(1);
    java.lang.Object var11 = var0.dequeue();
    boolean var12 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test43");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var10 = var0.isFull();
    boolean var11 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.Object var18 = var14.dequeue();
    var14.setCapacity(10);
    boolean var21 = var14.isFull();
    var14.enqueue((java.lang.Object)"hi!");
    boolean var24 = var14.isFull();
    QueueFaulty var25 = new QueueFaulty();
    boolean var26 = var25.isEmpty();
    java.lang.String var27 = var25.toString();
    var14.enqueue((java.lang.Object)var25);
    var0.enqueue((java.lang.Object)var14);
    java.lang.String var30 = var0.toString();
    var0.setCapacity(1);
    boolean var33 = var0.isEmpty();
    boolean var34 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[hi!, []]]"+ "'", var30.equals("[[hi!, []]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test44");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(0);
    java.lang.String var24 = var7.toString();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    var25.enqueue((java.lang.Object)1.0f);
    java.lang.String var33 = var25.toString();
    java.lang.String var34 = var25.toString();
    boolean var35 = var25.isEmpty();
    java.lang.Object var36 = var25.dequeue();
    var25.setCapacity(100);
    boolean var39 = var25.isFull();
    var25.setCapacity(0);
    boolean var42 = var25.isEmpty();
    boolean var43 = var25.isFull();
    var25.setCapacity(10);
    var7.enqueue((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[1.0]"+ "'", var33.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[1.0]"+ "'", var34.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 1.0f+ "'", var36.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test45");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(100);
    boolean var9 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    var12.enqueue((java.lang.Object)1.0f);
    java.lang.Object var20 = var12.dequeue();
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isEmpty();
    java.lang.Object var25 = var21.dequeue();
    boolean var26 = var21.isFull();
    boolean var27 = var21.isEmpty();
    var12.enqueue((java.lang.Object)var21);
    var0.enqueue((java.lang.Object)var21);
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isEmpty();
    java.lang.Object var42 = var38.dequeue();
    var38.setCapacity(10);
    boolean var45 = var38.isFull();
    var30.enqueue((java.lang.Object)var38);
    boolean var47 = var30.isFull();
    boolean var48 = var30.isFull();
    boolean var49 = var30.isEmpty();
    java.lang.Object var50 = var30.dequeue();
    var0.enqueue(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + 1.0f+ "'", var20.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + false+ "'", var42.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 1.0f+ "'", var50.equals(1.0f));

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test46");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isEmpty();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    java.lang.String var19 = var13.toString();
    boolean var20 = var13.isFull();
    var0.enqueue((java.lang.Object)var20);
    boolean var22 = var0.isEmpty();
    boolean var23 = var0.isFull();
    java.lang.Object var24 = var0.dequeue();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    var25.enqueue((java.lang.Object)1.0f);
    java.lang.String var33 = var25.toString();
    java.lang.String var34 = var25.toString();
    boolean var35 = var25.isFull();
    java.lang.Object var36 = var25.dequeue();
    QueueFaulty var37 = new QueueFaulty();
    var37.enqueue((java.lang.Object)false);
    boolean var40 = var37.isFull();
    boolean var41 = var37.isFull();
    java.lang.Object var42 = var37.dequeue();
    boolean var43 = var37.isFull();
    boolean var44 = var37.isFull();
    java.lang.String var45 = var37.toString();
    var37.setCapacity(0);
    boolean var48 = var37.isEmpty();
    QueueFaulty var49 = new QueueFaulty();
    var49.enqueue((java.lang.Object)false);
    boolean var52 = var49.isEmpty();
    java.lang.Object var53 = var49.dequeue();
    QueueFaulty var54 = new QueueFaulty();
    java.lang.String var55 = var54.toString();
    var49.enqueue((java.lang.Object)var55);
    var49.setCapacity(10);
    boolean var59 = var49.isFull();
    boolean var60 = var49.isEmpty();
    QueueFaulty var61 = new QueueFaulty();
    var61.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var64 = var61.dequeue();
    java.lang.String var65 = var61.toString();
    var49.enqueue((java.lang.Object)var65);
    boolean var67 = var49.isFull();
    boolean var68 = var49.isFull();
    var37.enqueue((java.lang.Object)var49);
    var25.enqueue((java.lang.Object)var49);
    QueueFaulty var71 = new QueueFaulty();
    var71.enqueue((java.lang.Object)false);
    boolean var74 = var71.isEmpty();
    java.lang.String var75 = var71.toString();
    boolean var76 = var71.isFull();
    boolean var77 = var71.isEmpty();
    java.lang.Object var78 = var71.dequeue();
    java.lang.String var79 = var71.toString();
    boolean var80 = var71.isFull();
    java.lang.String var81 = var71.toString();
    QueueFaulty var82 = new QueueFaulty();
    var82.enqueue((java.lang.Object)false);
    boolean var85 = var82.isEmpty();
    java.lang.String var86 = var82.toString();
    boolean var87 = var82.isFull();
    boolean var88 = var82.isEmpty();
    java.lang.Object var89 = var82.dequeue();
    var71.enqueue((java.lang.Object)var82);
    QueueFaulty var91 = new QueueFaulty();
    boolean var92 = var91.isFull();
    var71.enqueue((java.lang.Object)var92);
    boolean var94 = var71.isFull();
    var49.enqueue((java.lang.Object)var94);
    var49.setCapacity((-1));
    var0.enqueue((java.lang.Object)var49);
    java.lang.Object var99 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[1.0]"+ "'", var33.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[1.0]"+ "'", var34.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 1.0f+ "'", var36.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + false+ "'", var42.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + false+ "'", var53.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + (short)(-1)+ "'", var64.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[]"+ "'", var65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "[false]"+ "'", var75.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + false+ "'", var78.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "[]"+ "'", var79.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[]"+ "'", var81.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "[false]"+ "'", var86.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + false+ "'", var89.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + false+ "'", var99.equals(false));

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test47");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    boolean var22 = var10.isEmpty();
    boolean var23 = var10.isEmpty();
    java.lang.String var24 = var10.toString();
    boolean var25 = var10.isEmpty();
    boolean var26 = var10.isEmpty();
    boolean var27 = var10.isEmpty();
    var0.enqueue((java.lang.Object)var10);
    var10.setCapacity(0);
    boolean var31 = var10.isFull();
    boolean var32 = var10.isEmpty();
    boolean var33 = var10.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[]]"+ "'", var24.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test48");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    var0.setCapacity(0);
    java.lang.Object var7 = var0.dequeue();
    boolean var8 = var0.isEmpty();
    boolean var9 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test49");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    java.lang.Object var14 = var0.dequeue();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.Object var19 = var15.dequeue();
    var15.setCapacity(10);
    boolean var22 = var15.isFull();
    java.lang.String var23 = var15.toString();
    boolean var24 = var15.isEmpty();
    QueueFaulty var25 = new QueueFaulty();
    java.lang.String var26 = var25.toString();
    var25.setCapacity(1);
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isFull();
    boolean var33 = var29.isFull();
    java.lang.Object var34 = var29.dequeue();
    java.lang.String var35 = var29.toString();
    var25.enqueue((java.lang.Object)var29);
    var15.enqueue((java.lang.Object)var25);
    var0.enqueue((java.lang.Object)var15);
    QueueFaulty var39 = new QueueFaulty();
    var39.setCapacity(100);
    boolean var42 = var39.isEmpty();
    var39.setCapacity(100);
    var0.enqueue((java.lang.Object)var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var46 = var39.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 1.0f+ "'", var14.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test50");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isEmpty();
    java.lang.Object var12 = var8.dequeue();
    var8.setCapacity(10);
    boolean var15 = var8.isFull();
    var0.enqueue((java.lang.Object)var8);
    boolean var17 = var0.isFull();
    boolean var18 = var0.isFull();
    boolean var19 = var0.isEmpty();
    java.lang.String var20 = var0.toString();
    boolean var21 = var0.isFull();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[1.0, []]"+ "'", var20.equals("[1.0, []]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test51");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    boolean var15 = var0.isEmpty();
    QueueFaulty var16 = new QueueFaulty();
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    boolean var19 = var16.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    var20.enqueue((java.lang.Object)1.0f);
    var16.enqueue((java.lang.Object)var20);
    boolean var29 = var20.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    java.lang.String var38 = var30.toString();
    java.lang.String var39 = var30.toString();
    var30.setCapacity(10);
    var20.enqueue((java.lang.Object)var30);
    var0.enqueue((java.lang.Object)var30);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isFull();
    var44.enqueue((java.lang.Object)0.0f);
    java.lang.Object var50 = var44.dequeue();
    boolean var51 = var44.isEmpty();
    boolean var52 = var44.isFull();
    boolean var53 = var44.isFull();
    var30.enqueue((java.lang.Object)var53);
    java.lang.Object var55 = var30.dequeue();
    boolean var56 = var30.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[1.0]"+ "'", var38.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[1.0]"+ "'", var39.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + false+ "'", var50.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + false+ "'", var55.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test52");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    var0.enqueue((java.lang.Object)(short)1);
    QueueFaulty var11 = new QueueFaulty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    boolean var18 = var12.isFull();
    boolean var19 = var12.isFull();
    java.lang.String var20 = var12.toString();
    var12.setCapacity(0);
    var11.enqueue((java.lang.Object)var12);
    var12.setCapacity(10);
    QueueFaulty var26 = new QueueFaulty();
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    boolean var29 = var26.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    var26.enqueue((java.lang.Object)var30);
    var12.enqueue((java.lang.Object)var30);
    java.lang.Object var40 = var12.dequeue();
    var0.enqueue((java.lang.Object)var12);
    var0.setCapacity(10);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isFull();
    boolean var48 = var44.isFull();
    java.lang.Object var49 = var44.dequeue();
    var44.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var44);
    boolean var53 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + false+ "'", var49.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test53");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isFull();
    java.lang.String var11 = var7.toString();
    var7.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    var0.enqueue((java.lang.Object)0.0d);
    QueueFaulty var17 = new QueueFaulty();
    java.lang.String var18 = var17.toString();
    var17.setCapacity(1);
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isFull();
    boolean var25 = var21.isFull();
    java.lang.Object var26 = var21.dequeue();
    java.lang.String var27 = var21.toString();
    var17.enqueue((java.lang.Object)var21);
    boolean var29 = var17.isFull();
    var17.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isEmpty();
    java.lang.Object var37 = var33.dequeue();
    var33.setCapacity(10);
    boolean var40 = var33.isFull();
    var33.setCapacity(1);
    boolean var43 = var33.isEmpty();
    var33.setCapacity(10);
    var33.setCapacity((-1));
    boolean var48 = var33.isFull();
    var0.enqueue((java.lang.Object)var48);
    boolean var50 = var0.isFull();
    boolean var51 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[false]"+ "'", var11.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test54");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isFull();
    boolean var13 = var0.isFull();
    java.lang.String var14 = var0.toString();
    java.lang.String var15 = var0.toString();
    java.lang.String var16 = var0.toString();
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isFull();
    boolean var21 = var17.isFull();
    java.lang.Object var22 = var17.dequeue();
    boolean var23 = var17.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isEmpty();
    java.lang.String var38 = var34.toString();
    boolean var39 = var34.isFull();
    boolean var40 = var34.isEmpty();
    java.lang.Object var41 = var34.dequeue();
    java.lang.String var42 = var34.toString();
    boolean var43 = var34.isFull();
    var24.enqueue((java.lang.Object)var43);
    boolean var45 = var24.isEmpty();
    java.lang.String var46 = var24.toString();
    var17.enqueue((java.lang.Object)var24);
    var0.enqueue((java.lang.Object)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var49 = var0.toString();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[[]]"+ "'", var15.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[[]]"+ "'", var16.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[false]"+ "'", var46.equals("[false]"));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test55");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    java.lang.Object var13 = var9.dequeue();
    java.lang.String var14 = var9.toString();
    boolean var15 = var9.isFull();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isEmpty();
    boolean var20 = var16.isFull();
    var16.setCapacity(10);
    boolean var23 = var16.isFull();
    var9.enqueue((java.lang.Object)var16);
    boolean var25 = var9.isFull();
    var0.enqueue((java.lang.Object)var25);
    QueueFaulty var27 = new QueueFaulty();
    java.lang.String var28 = var27.toString();
    var27.setCapacity(1);
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isFull();
    boolean var35 = var31.isFull();
    java.lang.Object var36 = var31.dequeue();
    java.lang.String var37 = var31.toString();
    var27.enqueue((java.lang.Object)var31);
    boolean var39 = var27.isFull();
    var27.setCapacity(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test56");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    java.lang.Object var13 = var9.dequeue();
    var9.setCapacity(10);
    boolean var16 = var9.isFull();
    var9.setCapacity(1);
    boolean var19 = var9.isEmpty();
    var9.setCapacity(10);
    var9.setCapacity((-1));
    QueueFaulty var24 = new QueueFaulty();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    boolean var31 = var25.isFull();
    boolean var32 = var25.isFull();
    java.lang.String var33 = var25.toString();
    var25.setCapacity(0);
    var24.enqueue((java.lang.Object)var25);
    var25.setCapacity(10);
    QueueFaulty var39 = new QueueFaulty();
    boolean var40 = var39.isEmpty();
    boolean var41 = var39.isEmpty();
    boolean var42 = var39.isEmpty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    var43.enqueue((java.lang.Object)1.0f);
    var39.enqueue((java.lang.Object)var43);
    var25.enqueue((java.lang.Object)var43);
    boolean var53 = var25.isEmpty();
    java.lang.String var54 = var25.toString();
    boolean var55 = var25.isEmpty();
    var9.enqueue((java.lang.Object)var25);
    boolean var57 = var25.isFull();
    var0.enqueue((java.lang.Object)var57);
    java.lang.Object var59 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[1.0]]"+ "'", var54.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + false+ "'", var59.equals(false));

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test57");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0f);
    boolean var32 = var1.isFull();
    QueueFaulty var33 = new QueueFaulty();
    boolean var34 = var33.isEmpty();
    java.lang.String var35 = var33.toString();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    boolean var42 = var36.isFull();
    boolean var43 = var36.isFull();
    java.lang.String var44 = var36.toString();
    var36.enqueue((java.lang.Object)1.0d);
    boolean var47 = var36.isFull();
    var33.enqueue((java.lang.Object)var36);
    QueueFaulty var49 = new QueueFaulty();
    var49.enqueue((java.lang.Object)false);
    boolean var52 = var49.isFull();
    boolean var53 = var49.isFull();
    java.lang.Object var54 = var49.dequeue();
    boolean var55 = var49.isFull();
    boolean var56 = var49.isFull();
    java.lang.String var57 = var49.toString();
    var49.enqueue((java.lang.Object)1.0d);
    var49.setCapacity(0);
    boolean var62 = var49.isEmpty();
    var49.setCapacity(0);
    var36.enqueue((java.lang.Object)var49);
    var1.enqueue((java.lang.Object)var49);
    boolean var67 = var49.isEmpty();
    boolean var68 = var49.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + false+ "'", var54.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[]"+ "'", var57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test58");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.enqueue((java.lang.Object)"[1.0]");
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.Object var14 = var10.dequeue();
    var10.setCapacity(10);
    boolean var17 = var10.isFull();
    var10.setCapacity(1);
    java.lang.String var20 = var10.toString();
    java.lang.String var21 = var10.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test59");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    boolean var22 = var7.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    java.lang.Object var27 = var23.dequeue();
    var23.setCapacity(10);
    boolean var30 = var23.isFull();
    java.lang.String var31 = var23.toString();
    boolean var32 = var23.isEmpty();
    java.lang.String var33 = var23.toString();
    boolean var34 = var23.isEmpty();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    java.lang.String var39 = var35.toString();
    boolean var40 = var35.isEmpty();
    boolean var41 = var35.isFull();
    var23.enqueue((java.lang.Object)var35);
    var7.enqueue((java.lang.Object)var35);
    boolean var44 = var7.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[false]"+ "'", var39.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test60");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isFull();
    var0.setCapacity(100);
    var0.setCapacity(10);
    boolean var12 = var0.isFull();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test61");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    var0.setCapacity(0);
    java.lang.String var14 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test62");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    java.lang.Object var13 = var0.dequeue();
    boolean var14 = var0.isEmpty();
    boolean var15 = var0.isFull();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isEmpty();
    java.lang.Object var20 = var16.dequeue();
    var16.setCapacity(10);
    boolean var23 = var16.isFull();
    var16.setCapacity(1);
    boolean var26 = var16.isEmpty();
    var16.setCapacity(10);
    var16.setCapacity((-1));
    QueueFaulty var31 = new QueueFaulty();
    QueueFaulty var32 = new QueueFaulty();
    var32.enqueue((java.lang.Object)false);
    boolean var35 = var32.isFull();
    boolean var36 = var32.isFull();
    java.lang.Object var37 = var32.dequeue();
    boolean var38 = var32.isFull();
    boolean var39 = var32.isFull();
    java.lang.String var40 = var32.toString();
    var32.setCapacity(0);
    var31.enqueue((java.lang.Object)var32);
    var32.setCapacity(10);
    QueueFaulty var46 = new QueueFaulty();
    boolean var47 = var46.isEmpty();
    boolean var48 = var46.isEmpty();
    boolean var49 = var46.isEmpty();
    QueueFaulty var50 = new QueueFaulty();
    var50.enqueue((java.lang.Object)false);
    boolean var53 = var50.isFull();
    boolean var54 = var50.isFull();
    java.lang.Object var55 = var50.dequeue();
    var50.enqueue((java.lang.Object)1.0f);
    var46.enqueue((java.lang.Object)var50);
    var32.enqueue((java.lang.Object)var50);
    boolean var60 = var32.isEmpty();
    java.lang.String var61 = var32.toString();
    boolean var62 = var32.isEmpty();
    var16.enqueue((java.lang.Object)var32);
    QueueFaulty var64 = new QueueFaulty();
    boolean var65 = var64.isEmpty();
    boolean var66 = var64.isEmpty();
    boolean var67 = var64.isFull();
    java.lang.String var68 = var64.toString();
    boolean var69 = var64.isEmpty();
    var64.setCapacity(100);
    var32.enqueue((java.lang.Object)var64);
    boolean var73 = var32.isFull();
    var0.enqueue((java.lang.Object)var32);
    boolean var75 = var0.isFull();
    java.lang.Object var76 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + false+ "'", var55.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[[1.0]]"+ "'", var61.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test63");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isEmpty();
    java.lang.Object var12 = var8.dequeue();
    var8.setCapacity(10);
    var8.setCapacity(100);
    var0.enqueue((java.lang.Object)var8);
    boolean var18 = var8.isFull();
    boolean var19 = var8.isFull();
    java.lang.String var20 = var8.toString();
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isFull();
    boolean var25 = var21.isFull();
    java.lang.Object var26 = var21.dequeue();
    java.lang.String var27 = var21.toString();
    boolean var28 = var21.isFull();
    boolean var29 = var21.isFull();
    java.lang.String var30 = var21.toString();
    boolean var31 = var21.isEmpty();
    boolean var32 = var21.isFull();
    java.lang.String var33 = var21.toString();
    boolean var34 = var21.isFull();
    boolean var35 = var21.isFull();
    var8.enqueue((java.lang.Object)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var37 = var21.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test64");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    boolean var5 = var0.isEmpty();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isEmpty();
    java.lang.Object var9 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[false]"+ "'", var6.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test65");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isFull();
    var0.setCapacity(100);
    boolean var10 = var0.isFull();
    QueueFaulty var11 = new QueueFaulty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    boolean var18 = var12.isFull();
    boolean var19 = var12.isFull();
    java.lang.String var20 = var12.toString();
    var12.setCapacity(0);
    var11.enqueue((java.lang.Object)var12);
    var12.setCapacity(10);
    QueueFaulty var26 = new QueueFaulty();
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    boolean var29 = var26.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    var26.enqueue((java.lang.Object)var30);
    var12.enqueue((java.lang.Object)var30);
    boolean var40 = var12.isEmpty();
    java.lang.String var41 = var12.toString();
    var12.setCapacity(1);
    var0.enqueue((java.lang.Object)var12);
    var0.setCapacity(1);
    boolean var47 = var0.isEmpty();
    boolean var48 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[[1.0]]"+ "'", var41.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test66");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isFull();
    boolean var13 = var0.isFull();
    java.lang.Object var14 = var0.dequeue();
    boolean var15 = var0.isFull();
    QueueFaulty var16 = new QueueFaulty();
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    boolean var19 = var16.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    var20.enqueue((java.lang.Object)1.0f);
    var16.enqueue((java.lang.Object)var20);
    boolean var29 = var20.isEmpty();
    var20.setCapacity(100);
    var20.setCapacity(0);
    java.lang.Object var34 = var20.dequeue();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    boolean var39 = var35.isFull();
    var35.setCapacity(10);
    boolean var42 = var35.isEmpty();
    var20.enqueue((java.lang.Object)var42);
    var0.enqueue((java.lang.Object)var20);
    java.lang.Object var45 = var0.dequeue();
    boolean var46 = var0.isFull();
    java.lang.String var47 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test67");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isEmpty();
    java.lang.Object var25 = var21.dequeue();
    java.lang.String var26 = var21.toString();
    boolean var27 = var21.isEmpty();
    boolean var28 = var21.isEmpty();
    java.lang.String var29 = var21.toString();
    boolean var30 = var21.isEmpty();
    var7.enqueue((java.lang.Object)var21);
    java.lang.Object var32 = var7.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test68");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    boolean var24 = var0.isFull();
    java.lang.Object var25 = var0.dequeue();
    boolean var26 = var0.isEmpty();
    boolean var27 = var0.isFull();
    java.lang.String var28 = var0.toString();
    boolean var29 = var0.isFull();
    java.lang.String var30 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 0+ "'", var25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test69");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    boolean var10 = var0.isEmpty();
    java.lang.String var11 = var0.toString();
    java.lang.String var12 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test70");


    QueueFaulty var0 = new QueueFaulty();
    var0.setCapacity(100);
    boolean var3 = var0.isEmpty();
    var0.setCapacity(100);
    QueueFaulty var6 = new QueueFaulty();
    java.lang.String var7 = var6.toString();
    var6.setCapacity(1);
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    java.lang.String var16 = var10.toString();
    var6.enqueue((java.lang.Object)var10);
    QueueFaulty var18 = new QueueFaulty();
    java.lang.String var19 = var18.toString();
    var18.setCapacity(1);
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isFull();
    boolean var26 = var22.isFull();
    java.lang.Object var27 = var22.dequeue();
    java.lang.String var28 = var22.toString();
    var18.enqueue((java.lang.Object)var22);
    boolean var30 = var18.isEmpty();
    boolean var31 = var18.isFull();
    var10.enqueue((java.lang.Object)var31);
    var10.setCapacity((-1));
    boolean var35 = var10.isEmpty();
    java.lang.String var36 = var10.toString();
    var0.enqueue((java.lang.Object)var10);
    boolean var38 = var10.isFull();
    boolean var39 = var10.isEmpty();
    boolean var40 = var10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[true]"+ "'", var36.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test71");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isEmpty();
    java.lang.Object var25 = var21.dequeue();
    java.lang.String var26 = var21.toString();
    boolean var27 = var21.isEmpty();
    boolean var28 = var21.isEmpty();
    java.lang.String var29 = var21.toString();
    boolean var30 = var21.isEmpty();
    var7.enqueue((java.lang.Object)var21);
    var7.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test72");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    boolean var16 = var3.isFull();
    boolean var17 = var3.isEmpty();
    var3.setCapacity(0);
    java.lang.Object var20 = var3.dequeue();
    boolean var21 = var3.isFull();
    boolean var22 = var3.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var23 = var3.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + 1.0d+ "'", var20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test73");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    boolean var15 = var0.isEmpty();
    boolean var16 = var0.isEmpty();
    boolean var17 = var0.isEmpty();
    boolean var18 = var0.isEmpty();
    java.lang.String var19 = var0.toString();
    boolean var20 = var0.isFull();
    boolean var21 = var0.isEmpty();
    boolean var22 = var0.isEmpty();
    java.lang.Object var23 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[[]]"+ "'", var19.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test74");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    java.lang.Object var20 = var0.dequeue();
    java.lang.String var21 = var0.toString();
    var0.setCapacity((-1));
    boolean var24 = var0.isEmpty();
    var0.setCapacity(1);
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    java.lang.String var33 = var27.toString();
    boolean var34 = var27.isFull();
    boolean var35 = var27.isEmpty();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isEmpty();
    java.lang.String var40 = var36.toString();
    boolean var41 = var36.isFull();
    boolean var42 = var36.isEmpty();
    java.lang.Object var43 = var36.dequeue();
    java.lang.String var44 = var36.toString();
    boolean var45 = var36.isFull();
    java.lang.String var46 = var36.toString();
    var27.enqueue((java.lang.Object)var36);
    var36.setCapacity((-1));
    QueueFaulty var50 = new QueueFaulty();
    java.lang.String var51 = var50.toString();
    var50.setCapacity(1);
    QueueFaulty var54 = new QueueFaulty();
    var54.enqueue((java.lang.Object)false);
    boolean var57 = var54.isFull();
    boolean var58 = var54.isFull();
    java.lang.Object var59 = var54.dequeue();
    java.lang.String var60 = var54.toString();
    var50.enqueue((java.lang.Object)var54);
    boolean var62 = var50.isEmpty();
    boolean var63 = var50.isEmpty();
    java.lang.String var64 = var50.toString();
    boolean var65 = var50.isEmpty();
    java.lang.Object var66 = var50.dequeue();
    boolean var67 = var50.isFull();
    var36.enqueue((java.lang.Object)var67);
    java.lang.Object var69 = var36.dequeue();
    var36.setCapacity((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var36);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[false]"+ "'", var40.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + false+ "'", var59.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[]"+ "'", var60.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[[]]"+ "'", var64.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + false+ "'", var69.equals(false));

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test75");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    var0.setCapacity((-1));
    boolean var5 = var0.isEmpty();
    QueueFaulty var6 = new QueueFaulty();
    boolean var7 = var6.isEmpty();
    java.lang.String var8 = var6.toString();
    var6.setCapacity(0);
    var0.enqueue((java.lang.Object)var6);
    java.lang.Object var12 = var0.dequeue();
    var0.setCapacity(10);
    boolean var15 = var0.isEmpty();
    boolean var16 = var0.isEmpty();
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test76");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    var0.setCapacity(0);
    boolean var11 = var0.isFull();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    boolean var18 = var12.isFull();
    QueueFaulty var19 = new QueueFaulty();
    java.lang.String var20 = var19.toString();
    var19.setCapacity(1);
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    java.lang.String var29 = var23.toString();
    var19.enqueue((java.lang.Object)var23);
    boolean var31 = var19.isEmpty();
    boolean var32 = var19.isFull();
    var12.enqueue((java.lang.Object)var32);
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    var34.setCapacity(100);
    boolean var41 = var34.isFull();
    var12.enqueue((java.lang.Object)var34);
    java.lang.Object var43 = var34.dequeue();
    var0.enqueue((java.lang.Object)var34);
    QueueFaulty var45 = new QueueFaulty();
    var45.enqueue((java.lang.Object)false);
    boolean var48 = var45.isEmpty();
    boolean var49 = var45.isFull();
    var45.setCapacity(10);
    boolean var52 = var45.isEmpty();
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isFull();
    boolean var57 = var53.isFull();
    java.lang.Object var58 = var53.dequeue();
    java.lang.String var59 = var53.toString();
    var45.enqueue((java.lang.Object)var59);
    var45.setCapacity((-1));
    boolean var63 = var45.isFull();
    var45.setCapacity(100);
    boolean var66 = var45.isFull();
    java.lang.Object var67 = var45.dequeue();
    java.lang.Object var68 = var45.dequeue();
    var34.enqueue((java.lang.Object)var45);
    boolean var70 = var45.isFull();
    boolean var71 = var45.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + false+ "'", var58.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test77");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    var0.setCapacity((-1));
    boolean var18 = var0.isFull();
    var0.setCapacity(100);
    boolean var21 = var0.isFull();
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isEmpty();
    java.lang.Object var26 = var22.dequeue();
    var22.setCapacity(10);
    boolean var29 = var22.isFull();
    java.lang.String var30 = var22.toString();
    boolean var31 = var22.isEmpty();
    java.lang.String var32 = var22.toString();
    boolean var33 = var22.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isEmpty();
    java.lang.String var38 = var34.toString();
    boolean var39 = var34.isEmpty();
    boolean var40 = var34.isFull();
    var22.enqueue((java.lang.Object)var34);
    boolean var42 = var34.isFull();
    boolean var43 = var34.isFull();
    var0.enqueue((java.lang.Object)var34);
    boolean var45 = var34.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test78");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    boolean var20 = var0.isFull();
    QueueFaulty var21 = new QueueFaulty();
    java.lang.String var22 = var21.toString();
    var21.setCapacity(1);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    var21.enqueue((java.lang.Object)var25);
    boolean var33 = var21.isEmpty();
    boolean var34 = var21.isEmpty();
    java.lang.String var35 = var21.toString();
    var21.setCapacity(100);
    boolean var38 = var21.isFull();
    var21.setCapacity(10);
    boolean var41 = var21.isFull();
    var0.enqueue((java.lang.Object)var21);
    var21.setCapacity(0);
    QueueFaulty var45 = new QueueFaulty();
    var45.enqueue((java.lang.Object)false);
    boolean var48 = var45.isFull();
    java.lang.String var49 = var45.toString();
    var45.setCapacity(1);
    java.lang.Object var52 = var45.dequeue();
    boolean var53 = var45.isFull();
    var45.setCapacity(100);
    QueueFaulty var56 = new QueueFaulty();
    var56.enqueue((java.lang.Object)false);
    boolean var59 = var56.isFull();
    boolean var60 = var56.isFull();
    java.lang.Object var61 = var56.dequeue();
    boolean var62 = var56.isFull();
    boolean var63 = var56.isFull();
    java.lang.String var64 = var56.toString();
    var56.setCapacity((-1));
    var56.setCapacity(0);
    QueueFaulty var69 = new QueueFaulty();
    var69.enqueue((java.lang.Object)false);
    boolean var72 = var69.isFull();
    var69.enqueue((java.lang.Object)0.0f);
    java.lang.Object var75 = var69.dequeue();
    boolean var76 = var69.isEmpty();
    var56.enqueue((java.lang.Object)var76);
    java.lang.String var78 = var56.toString();
    var56.setCapacity(100);
    boolean var81 = var56.isEmpty();
    boolean var82 = var56.isEmpty();
    boolean var83 = var56.isEmpty();
    var45.enqueue((java.lang.Object)var56);
    var21.enqueue((java.lang.Object)var56);
    java.lang.Object var86 = var21.dequeue();
    boolean var87 = var21.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[[]]"+ "'", var35.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[false]"+ "'", var49.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + false+ "'", var61.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + false+ "'", var75.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "[false]"+ "'", var78.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test79");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var5.setCapacity(1);
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    java.lang.String var15 = var9.toString();
    var5.enqueue((java.lang.Object)var9);
    boolean var17 = var5.isEmpty();
    boolean var18 = var5.isEmpty();
    java.lang.String var19 = var5.toString();
    boolean var20 = var5.isEmpty();
    boolean var21 = var5.isEmpty();
    boolean var22 = var5.isEmpty();
    boolean var23 = var5.isEmpty();
    java.lang.String var24 = var5.toString();
    var0.enqueue((java.lang.Object)var5);
    boolean var26 = var0.isEmpty();
    QueueFaulty var27 = new QueueFaulty();
    java.lang.String var28 = var27.toString();
    java.lang.String var29 = var27.toString();
    var27.setCapacity(0);
    QueueFaulty var32 = new QueueFaulty();
    boolean var33 = var32.isEmpty();
    boolean var34 = var32.isEmpty();
    boolean var35 = var32.isEmpty();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    var36.enqueue((java.lang.Object)1.0f);
    var32.enqueue((java.lang.Object)var36);
    var27.enqueue((java.lang.Object)var36);
    var27.setCapacity(10);
    var0.enqueue((java.lang.Object)var27);
    boolean var49 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[[]]"+ "'", var19.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[]]"+ "'", var24.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test80");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    boolean var15 = var0.isEmpty();
    QueueFaulty var16 = new QueueFaulty();
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    boolean var19 = var16.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    var20.enqueue((java.lang.Object)1.0f);
    var16.enqueue((java.lang.Object)var20);
    boolean var29 = var20.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    java.lang.String var38 = var30.toString();
    java.lang.String var39 = var30.toString();
    var30.setCapacity(10);
    var20.enqueue((java.lang.Object)var30);
    var0.enqueue((java.lang.Object)var30);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isEmpty();
    java.lang.Object var48 = var44.dequeue();
    java.lang.String var49 = var44.toString();
    QueueFaulty var50 = new QueueFaulty();
    java.lang.String var51 = var50.toString();
    var50.setCapacity(1);
    QueueFaulty var54 = new QueueFaulty();
    var54.enqueue((java.lang.Object)false);
    boolean var57 = var54.isFull();
    boolean var58 = var54.isFull();
    java.lang.Object var59 = var54.dequeue();
    java.lang.String var60 = var54.toString();
    var50.enqueue((java.lang.Object)var54);
    var44.enqueue((java.lang.Object)var54);
    QueueFaulty var63 = new QueueFaulty();
    var63.enqueue((java.lang.Object)false);
    boolean var66 = var63.isFull();
    boolean var67 = var63.isFull();
    java.lang.Object var68 = var63.dequeue();
    var63.enqueue((java.lang.Object)1.0f);
    var63.setCapacity(10);
    var44.enqueue((java.lang.Object)10);
    var30.enqueue((java.lang.Object)var44);
    var44.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[1.0]"+ "'", var38.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[1.0]"+ "'", var39.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + false+ "'", var59.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[]"+ "'", var60.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + false+ "'", var68.equals(false));

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test81");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    QueueFaulty var5 = new QueueFaulty();
    var5.enqueue((java.lang.Object)false);
    boolean var8 = var5.isEmpty();
    java.lang.Object var9 = var5.dequeue();
    var5.setCapacity(10);
    boolean var12 = var5.isFull();
    java.lang.String var13 = var5.toString();
    boolean var14 = var5.isEmpty();
    var0.enqueue((java.lang.Object)var14);
    var0.setCapacity(0);
    java.lang.Object var18 = var0.dequeue();
    boolean var19 = var0.isEmpty();
    java.lang.Object var20 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + true+ "'", var20.equals(true));

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test82");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var3 = var0.dequeue();
    boolean var4 = var0.isEmpty();
    QueueFaulty var5 = new QueueFaulty();
    var5.enqueue((java.lang.Object)false);
    boolean var8 = var5.isEmpty();
    java.lang.Object var9 = var5.dequeue();
    var5.setCapacity(10);
    boolean var12 = var5.isFull();
    java.lang.String var13 = var5.toString();
    boolean var14 = var5.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.String var19 = var15.toString();
    boolean var20 = var15.isFull();
    boolean var21 = var15.isEmpty();
    java.lang.Object var22 = var15.dequeue();
    java.lang.String var23 = var15.toString();
    boolean var24 = var15.isFull();
    var5.enqueue((java.lang.Object)var24);
    boolean var26 = var5.isEmpty();
    boolean var27 = var5.isEmpty();
    var0.enqueue((java.lang.Object)var5);
    boolean var29 = var5.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    java.lang.String var34 = var30.toString();
    java.lang.String var35 = var30.toString();
    var30.setCapacity(1);
    boolean var38 = var30.isFull();
    var30.setCapacity(10);
    QueueFaulty var41 = new QueueFaulty();
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    boolean var48 = var42.isFull();
    boolean var49 = var42.isFull();
    java.lang.String var50 = var42.toString();
    var42.setCapacity(0);
    var41.enqueue((java.lang.Object)var42);
    var42.setCapacity(10);
    QueueFaulty var56 = new QueueFaulty();
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    boolean var59 = var56.isEmpty();
    QueueFaulty var60 = new QueueFaulty();
    var60.enqueue((java.lang.Object)false);
    boolean var63 = var60.isFull();
    boolean var64 = var60.isFull();
    java.lang.Object var65 = var60.dequeue();
    var60.enqueue((java.lang.Object)1.0f);
    var56.enqueue((java.lang.Object)var60);
    var42.enqueue((java.lang.Object)var60);
    boolean var70 = var42.isEmpty();
    java.lang.String var71 = var42.toString();
    var42.setCapacity(0);
    java.lang.String var74 = var42.toString();
    var42.setCapacity(0);
    QueueFaulty var77 = new QueueFaulty();
    boolean var78 = var77.isEmpty();
    java.lang.String var79 = var77.toString();
    var77.setCapacity((-1));
    boolean var82 = var77.isEmpty();
    QueueFaulty var83 = new QueueFaulty();
    boolean var84 = var83.isEmpty();
    java.lang.String var85 = var83.toString();
    var83.setCapacity(0);
    var77.enqueue((java.lang.Object)var83);
    var42.enqueue((java.lang.Object)var77);
    var30.enqueue((java.lang.Object)var77);
    var5.enqueue((java.lang.Object)var77);
    var77.setCapacity(100);
    boolean var94 = var77.isEmpty();
    java.lang.Object var95 = var77.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var96 = var77.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (short)(-1)+ "'", var3.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[false]"+ "'", var34.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[false]"+ "'", var35.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + false+ "'", var65.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[[1.0]]"+ "'", var71.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "[[1.0]]"+ "'", var74.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "[]"+ "'", var79.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "[]"+ "'", var85.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test83");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isFull();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    boolean var11 = var7.isFull();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var0.enqueue((java.lang.Object)var7);
    boolean var16 = var0.isFull();
    boolean var17 = var0.isEmpty();
    boolean var18 = var0.isFull();
    var0.setCapacity(0);
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isEmpty();
    boolean var25 = var21.isFull();
    java.lang.String var26 = var21.toString();
    java.lang.Object var27 = var21.dequeue();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    java.lang.Object var32 = var28.dequeue();
    var28.setCapacity(10);
    boolean var35 = var28.isFull();
    var28.setCapacity(1);
    boolean var38 = var28.isEmpty();
    var28.setCapacity(10);
    var21.enqueue((java.lang.Object)var28);
    boolean var42 = var28.isEmpty();
    boolean var43 = var28.isEmpty();
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isEmpty();
    java.lang.Object var48 = var44.dequeue();
    var44.setCapacity(10);
    boolean var51 = var44.isFull();
    java.lang.String var52 = var44.toString();
    boolean var53 = var44.isEmpty();
    java.lang.String var54 = var44.toString();
    boolean var55 = var44.isEmpty();
    QueueFaulty var56 = new QueueFaulty();
    var56.enqueue((java.lang.Object)false);
    boolean var59 = var56.isEmpty();
    java.lang.String var60 = var56.toString();
    boolean var61 = var56.isEmpty();
    boolean var62 = var56.isFull();
    var44.enqueue((java.lang.Object)var56);
    var28.enqueue((java.lang.Object)var56);
    boolean var65 = var56.isEmpty();
    QueueFaulty var66 = new QueueFaulty();
    boolean var67 = var66.isEmpty();
    java.lang.String var68 = var66.toString();
    QueueFaulty var69 = new QueueFaulty();
    var69.enqueue((java.lang.Object)false);
    boolean var72 = var69.isFull();
    boolean var73 = var69.isFull();
    java.lang.Object var74 = var69.dequeue();
    boolean var75 = var69.isFull();
    boolean var76 = var69.isFull();
    java.lang.String var77 = var69.toString();
    var69.enqueue((java.lang.Object)1.0d);
    boolean var80 = var69.isFull();
    var66.enqueue((java.lang.Object)var69);
    QueueFaulty var82 = new QueueFaulty();
    var82.enqueue((java.lang.Object)false);
    boolean var85 = var82.isEmpty();
    java.lang.Object var86 = var82.dequeue();
    boolean var87 = var82.isFull();
    java.lang.String var88 = var82.toString();
    boolean var89 = var82.isEmpty();
    var82.setCapacity(10);
    var66.enqueue((java.lang.Object)var82);
    var56.enqueue((java.lang.Object)var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var56);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[false]"+ "'", var26.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[false]"+ "'", var60.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + false+ "'", var74.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "[]"+ "'", var77.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + false+ "'", var86.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "[]"+ "'", var88.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test84");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var10 = var0.isFull();
    boolean var11 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.Object var18 = var14.dequeue();
    var14.setCapacity(10);
    boolean var21 = var14.isFull();
    var14.enqueue((java.lang.Object)"hi!");
    boolean var24 = var14.isFull();
    QueueFaulty var25 = new QueueFaulty();
    boolean var26 = var25.isEmpty();
    java.lang.String var27 = var25.toString();
    var14.enqueue((java.lang.Object)var25);
    var0.enqueue((java.lang.Object)var14);
    java.lang.Object var30 = var14.dequeue();
    java.lang.String var31 = var14.toString();
    QueueFaulty var32 = new QueueFaulty();
    java.lang.String var33 = var32.toString();
    var32.setCapacity(1);
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    java.lang.String var42 = var36.toString();
    var32.enqueue((java.lang.Object)var36);
    boolean var44 = var32.isEmpty();
    boolean var45 = var32.isEmpty();
    java.lang.String var46 = var32.toString();
    var32.setCapacity(100);
    boolean var49 = var32.isFull();
    boolean var50 = var32.isFull();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isFull();
    boolean var55 = var51.isFull();
    java.lang.Object var56 = var51.dequeue();
    boolean var57 = var51.isFull();
    var32.enqueue((java.lang.Object)var51);
    var51.setCapacity((-1));
    boolean var61 = var51.isFull();
    var14.enqueue((java.lang.Object)var61);
    var14.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[[]]"+ "'", var31.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[[]]"+ "'", var46.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + false+ "'", var56.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test85");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    boolean var13 = var0.isFull();
    boolean var14 = var0.isFull();
    boolean var15 = var0.isEmpty();
    var0.setCapacity(1);
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isEmpty();
    boolean var22 = var18.isFull();
    java.lang.String var23 = var18.toString();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    var24.enqueue((java.lang.Object)1.0f);
    var24.setCapacity(10);
    var18.enqueue((java.lang.Object)var24);
    boolean var35 = var18.isEmpty();
    java.lang.Object var36 = var18.dequeue();
    boolean var37 = var18.isFull();
    var0.enqueue((java.lang.Object)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[false]"+ "'", var23.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test86");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var10 = var0.isFull();
    java.lang.String var11 = var0.toString();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    var12.enqueue((java.lang.Object)1.0f);
    var12.setCapacity(10);
    boolean var22 = var12.isEmpty();
    boolean var23 = var12.isEmpty();
    var0.enqueue((java.lang.Object)var23);
    java.lang.Object var25 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test87");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    var0.enqueue((java.lang.Object)(short)1);
    QueueFaulty var11 = new QueueFaulty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    boolean var18 = var12.isFull();
    boolean var19 = var12.isFull();
    java.lang.String var20 = var12.toString();
    var12.setCapacity(0);
    var11.enqueue((java.lang.Object)var12);
    var12.setCapacity(10);
    QueueFaulty var26 = new QueueFaulty();
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    boolean var29 = var26.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    var26.enqueue((java.lang.Object)var30);
    var12.enqueue((java.lang.Object)var30);
    java.lang.Object var40 = var12.dequeue();
    var0.enqueue((java.lang.Object)var12);
    var0.setCapacity(10);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isFull();
    boolean var48 = var44.isFull();
    java.lang.Object var49 = var44.dequeue();
    var44.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var44);
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isFull();
    boolean var57 = var53.isFull();
    var53.setCapacity(100);
    boolean var60 = var53.isFull();
    QueueFaulty var61 = new QueueFaulty();
    var61.enqueue((java.lang.Object)false);
    boolean var64 = var61.isFull();
    boolean var65 = var61.isFull();
    java.lang.Object var66 = var61.dequeue();
    var61.enqueue((java.lang.Object)1.0f);
    java.lang.String var69 = var61.toString();
    java.lang.String var70 = var61.toString();
    boolean var71 = var61.isEmpty();
    java.lang.Object var72 = var61.dequeue();
    var61.setCapacity(100);
    boolean var75 = var61.isFull();
    var53.enqueue((java.lang.Object)var61);
    var53.setCapacity(1);
    var44.enqueue((java.lang.Object)var53);
    java.lang.Object var80 = var53.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + false+ "'", var49.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + false+ "'", var66.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "[1.0]"+ "'", var69.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[1.0]"+ "'", var70.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + 1.0f+ "'", var72.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test88");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.Object var14 = var10.dequeue();
    QueueFaulty var15 = new QueueFaulty();
    java.lang.String var16 = var15.toString();
    var10.enqueue((java.lang.Object)var16);
    var10.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    boolean var21 = var0.isFull();
    java.lang.Object var22 = var0.dequeue();
    java.lang.String var23 = var0.toString();
    java.lang.String var24 = var0.toString();
    var0.setCapacity(0);
    boolean var27 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 10+ "'", var22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test89");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    var0.setCapacity(10);
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    boolean var32 = var26.isFull();
    boolean var33 = var26.isFull();
    boolean var34 = var26.isFull();
    java.lang.String var35 = var26.toString();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isEmpty();
    java.lang.Object var40 = var36.dequeue();
    QueueFaulty var41 = new QueueFaulty();
    java.lang.String var42 = var41.toString();
    var36.enqueue((java.lang.Object)var42);
    var36.setCapacity(10);
    var26.enqueue((java.lang.Object)10);
    QueueFaulty var47 = new QueueFaulty();
    var47.enqueue((java.lang.Object)false);
    boolean var50 = var47.isEmpty();
    boolean var51 = var47.isFull();
    boolean var52 = var47.isEmpty();
    var26.enqueue((java.lang.Object)var52);
    var0.enqueue((java.lang.Object)var26);
    java.lang.Object var55 = var0.dequeue();
    java.lang.Object var56 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test90");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    boolean var14 = var0.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.String var19 = var15.toString();
    boolean var20 = var15.isFull();
    boolean var21 = var15.isEmpty();
    java.lang.Object var22 = var15.dequeue();
    java.lang.String var23 = var15.toString();
    boolean var24 = var15.isFull();
    java.lang.String var25 = var15.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.String var30 = var26.toString();
    boolean var31 = var26.isFull();
    boolean var32 = var26.isEmpty();
    java.lang.Object var33 = var26.dequeue();
    var15.enqueue((java.lang.Object)var26);
    java.lang.Object var35 = var15.dequeue();
    java.lang.String var36 = var15.toString();
    var15.setCapacity((-1));
    var0.enqueue((java.lang.Object)(-1));
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isEmpty();
    boolean var44 = var40.isFull();
    var40.setCapacity(100);
    boolean var47 = var40.isEmpty();
    java.lang.Object var48 = var40.dequeue();
    boolean var49 = var40.isFull();
    boolean var50 = var40.isEmpty();
    boolean var51 = var40.isFull();
    var0.enqueue((java.lang.Object)var40);
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isEmpty();
    java.lang.Object var57 = var53.dequeue();
    QueueFaulty var58 = new QueueFaulty();
    java.lang.String var59 = var58.toString();
    var53.enqueue((java.lang.Object)var59);
    java.lang.String var61 = var53.toString();
    boolean var62 = var53.isFull();
    java.lang.Object var63 = var53.dequeue();
    QueueFaulty var64 = new QueueFaulty();
    boolean var65 = var64.isEmpty();
    boolean var66 = var64.isEmpty();
    QueueFaulty var67 = new QueueFaulty();
    var67.enqueue((java.lang.Object)false);
    boolean var70 = var67.isFull();
    boolean var71 = var67.isFull();
    java.lang.Object var72 = var67.dequeue();
    java.lang.String var73 = var67.toString();
    boolean var74 = var67.isFull();
    boolean var75 = var67.isEmpty();
    QueueFaulty var76 = new QueueFaulty();
    var76.enqueue((java.lang.Object)false);
    boolean var79 = var76.isEmpty();
    java.lang.String var80 = var76.toString();
    boolean var81 = var76.isFull();
    boolean var82 = var76.isEmpty();
    java.lang.Object var83 = var76.dequeue();
    java.lang.String var84 = var76.toString();
    boolean var85 = var76.isFull();
    java.lang.String var86 = var76.toString();
    var67.enqueue((java.lang.Object)var76);
    var64.enqueue((java.lang.Object)var67);
    var53.enqueue((java.lang.Object)var64);
    java.lang.String var90 = var53.toString();
    var53.setCapacity((-1));
    boolean var93 = var53.isFull();
    java.lang.Object var94 = var53.dequeue();
    var0.enqueue((java.lang.Object)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[false]"+ "'", var30.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[[]]"+ "'", var61.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[]"+ "'", var63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + false+ "'", var72.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "[]"+ "'", var73.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[false]"+ "'", var80.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + false+ "'", var83.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]"+ "'", var84.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "[]"+ "'", var86.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "[[[[]]]]"+ "'", var90.equals("[[[[]]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test91");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isEmpty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    var4.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var4);
    boolean var13 = var0.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.Object var18 = var14.dequeue();
    java.lang.String var19 = var14.toString();
    boolean var20 = var14.isEmpty();
    boolean var21 = var14.isEmpty();
    boolean var22 = var14.isFull();
    java.lang.String var23 = var14.toString();
    var14.setCapacity(10);
    var0.enqueue((java.lang.Object)var14);
    QueueFaulty var27 = new QueueFaulty();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isFull();
    boolean var32 = var28.isFull();
    java.lang.Object var33 = var28.dequeue();
    boolean var34 = var28.isFull();
    boolean var35 = var28.isFull();
    java.lang.String var36 = var28.toString();
    var28.setCapacity(0);
    var27.enqueue((java.lang.Object)var28);
    var28.setCapacity(10);
    QueueFaulty var42 = new QueueFaulty();
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    boolean var45 = var42.isEmpty();
    QueueFaulty var46 = new QueueFaulty();
    var46.enqueue((java.lang.Object)false);
    boolean var49 = var46.isFull();
    boolean var50 = var46.isFull();
    java.lang.Object var51 = var46.dequeue();
    var46.enqueue((java.lang.Object)1.0f);
    var42.enqueue((java.lang.Object)var46);
    var28.enqueue((java.lang.Object)var46);
    java.lang.Object var56 = var28.dequeue();
    java.lang.String var57 = var28.toString();
    var0.enqueue((java.lang.Object)var28);
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + false+ "'", var51.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[]"+ "'", var57.equals("[]"));

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test92");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    java.lang.String var11 = var8.toString();
    java.lang.Object var12 = var8.dequeue();
    var0.enqueue(var12);
    java.lang.String var14 = var0.toString();
    var0.setCapacity(10);
    java.lang.Object var17 = var0.dequeue();
    boolean var18 = var0.isFull();
    boolean var19 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[false]"+ "'", var11.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[], false]"+ "'", var14.equals("[[], false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test93");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    var0.setCapacity(0);
    var0.setCapacity(100);
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    var9.enqueue((java.lang.Object)1.0f);
    java.lang.String var17 = var9.toString();
    boolean var18 = var9.isFull();
    var0.enqueue((java.lang.Object)var9);
    var9.enqueue((java.lang.Object)100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[1.0]"+ "'", var17.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test94");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.Object var14 = var0.dequeue();
    boolean var15 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test95");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    boolean var16 = var12.isFull();
    boolean var17 = var12.isEmpty();
    java.lang.String var18 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    var12.setCapacity(100);
    boolean var22 = var12.isEmpty();
    boolean var23 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[false]"+ "'", var18.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test96");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.String var38 = var16.toString();
    var16.setCapacity(100);
    boolean var41 = var16.isFull();
    QueueFaulty var42 = new QueueFaulty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    java.lang.String var51 = var43.toString();
    var43.setCapacity(0);
    var42.enqueue((java.lang.Object)var43);
    boolean var55 = var43.isEmpty();
    boolean var56 = var43.isFull();
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    boolean var60 = var57.isEmpty();
    boolean var61 = var57.isFull();
    var57.setCapacity(10);
    boolean var64 = var57.isEmpty();
    var57.setCapacity(100);
    var57.setCapacity(0);
    java.lang.Object var69 = var57.dequeue();
    var43.enqueue((java.lang.Object)var57);
    var16.enqueue((java.lang.Object)var43);
    QueueFaulty var72 = new QueueFaulty();
    var72.enqueue((java.lang.Object)false);
    boolean var75 = var72.isEmpty();
    java.lang.Object var76 = var72.dequeue();
    java.lang.String var77 = var72.toString();
    boolean var78 = var72.isEmpty();
    QueueFaulty var79 = new QueueFaulty();
    var79.enqueue((java.lang.Object)false);
    boolean var82 = var79.isFull();
    java.lang.String var83 = var79.toString();
    var79.setCapacity(0);
    var72.enqueue((java.lang.Object)0);
    var72.enqueue((java.lang.Object)0.0d);
    var16.enqueue((java.lang.Object)0.0d);
    boolean var90 = var16.isFull();
    var16.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[10]"+ "'", var38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + false+ "'", var76.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "[]"+ "'", var77.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "[false]"+ "'", var83.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test97");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    boolean var25 = var24.isEmpty();
    java.lang.String var26 = var24.toString();
    var24.setCapacity((-1));
    boolean var29 = var24.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    boolean var31 = var30.isEmpty();
    java.lang.String var32 = var30.toString();
    var30.setCapacity(0);
    var24.enqueue((java.lang.Object)var30);
    java.lang.Object var36 = var24.dequeue();
    boolean var37 = var24.isEmpty();
    var24.setCapacity(100);
    var7.enqueue((java.lang.Object)var24);
    boolean var41 = var7.isFull();
    boolean var42 = var7.isFull();
    java.lang.String var43 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[[]]"+ "'", var43.equals("[[]]"));

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test98");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    boolean var8 = var0.isFull();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    boolean var13 = var9.isFull();
    var9.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    boolean var17 = var0.isFull();
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isFull();
    boolean var22 = var18.isFull();
    java.lang.Object var23 = var18.dequeue();
    var18.enqueue((java.lang.Object)1.0f);
    java.lang.String var26 = var18.toString();
    java.lang.String var27 = var18.toString();
    boolean var28 = var18.isFull();
    boolean var29 = var18.isFull();
    boolean var30 = var18.isEmpty();
    java.lang.String var31 = var18.toString();
    java.lang.Object var32 = var18.dequeue();
    var18.setCapacity(10);
    var18.enqueue((java.lang.Object)"[false, -1, a, []]");
    var0.enqueue((java.lang.Object)"[false, -1, a, []]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + false+ "'", var23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[1.0]"+ "'", var26.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[1.0]"+ "'", var27.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[1.0]"+ "'", var31.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 1.0f+ "'", var32.equals(1.0f));

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test99");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    var0.setCapacity(10);
    boolean var11 = var0.isFull();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    boolean var16 = var12.isFull();
    java.lang.String var17 = var12.toString();
    var12.setCapacity((-1));
    java.lang.String var20 = var12.toString();
    java.lang.String var21 = var12.toString();
    QueueFaulty var22 = new QueueFaulty();
    boolean var23 = var22.isEmpty();
    java.lang.String var24 = var22.toString();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    boolean var31 = var25.isFull();
    boolean var32 = var25.isFull();
    java.lang.String var33 = var25.toString();
    var25.enqueue((java.lang.Object)1.0d);
    boolean var36 = var25.isFull();
    var22.enqueue((java.lang.Object)var25);
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isFull();
    boolean var42 = var38.isFull();
    java.lang.Object var43 = var38.dequeue();
    boolean var44 = var38.isFull();
    boolean var45 = var38.isFull();
    boolean var46 = var38.isFull();
    java.lang.String var47 = var38.toString();
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isEmpty();
    java.lang.Object var52 = var48.dequeue();
    QueueFaulty var53 = new QueueFaulty();
    java.lang.String var54 = var53.toString();
    var48.enqueue((java.lang.Object)var54);
    var48.setCapacity(10);
    var38.enqueue((java.lang.Object)10);
    var25.enqueue((java.lang.Object)var38);
    var12.enqueue((java.lang.Object)var38);
    boolean var61 = var12.isFull();
    boolean var62 = var12.isEmpty();
    var12.setCapacity(10);
    boolean var65 = var12.isEmpty();
    java.lang.Object var66 = var12.dequeue();
    boolean var67 = var12.isEmpty();
    QueueFaulty var68 = new QueueFaulty();
    java.lang.String var69 = var68.toString();
    var68.setCapacity(1);
    QueueFaulty var72 = new QueueFaulty();
    var72.enqueue((java.lang.Object)false);
    boolean var75 = var72.isFull();
    boolean var76 = var72.isFull();
    java.lang.Object var77 = var72.dequeue();
    java.lang.String var78 = var72.toString();
    var68.enqueue((java.lang.Object)var72);
    boolean var80 = var68.isEmpty();
    boolean var81 = var68.isFull();
    var68.setCapacity(10);
    QueueFaulty var84 = new QueueFaulty();
    var84.enqueue((java.lang.Object)false);
    boolean var87 = var84.isFull();
    var84.enqueue((java.lang.Object)0.0f);
    var68.enqueue((java.lang.Object)var84);
    var84.enqueue((java.lang.Object)"[true]");
    java.lang.Object var93 = var84.dequeue();
    var12.enqueue((java.lang.Object)var84);
    var0.enqueue((java.lang.Object)var84);
    boolean var96 = var84.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[false]"+ "'", var17.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[false]"+ "'", var20.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[false]"+ "'", var21.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "[]"+ "'", var69.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + false+ "'", var77.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "[]"+ "'", var78.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + false+ "'", var93.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test100");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    java.lang.String var24 = var0.toString();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isEmpty();
    boolean var29 = var25.isFull();
    var25.setCapacity(10);
    boolean var32 = var25.isEmpty();
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isFull();
    boolean var37 = var33.isFull();
    java.lang.Object var38 = var33.dequeue();
    java.lang.String var39 = var33.toString();
    var25.enqueue((java.lang.Object)var39);
    var25.setCapacity((-1));
    boolean var43 = var25.isFull();
    boolean var44 = var25.isEmpty();
    java.lang.Object var45 = var25.dequeue();
    var0.enqueue((java.lang.Object)var25);
    java.lang.String var47 = var25.toString();
    boolean var48 = var25.isFull();
    boolean var49 = var25.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[0]"+ "'", var24.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + false+ "'", var38.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[]"+ "'", var39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[[]]"+ "'", var47.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test101");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    var0.setCapacity(100);
    var0.setCapacity(0);
    var0.setCapacity(100);
    boolean var14 = var0.isEmpty();
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test102");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.setCapacity(0);
    var10.setCapacity(0);
    QueueFaulty var23 = new QueueFaulty();
    var23.setCapacity(100);
    QueueFaulty var26 = new QueueFaulty();
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    boolean var33 = var27.isFull();
    boolean var34 = var27.isFull();
    java.lang.String var35 = var27.toString();
    var27.setCapacity(0);
    var26.enqueue((java.lang.Object)var27);
    boolean var39 = var27.isEmpty();
    var23.enqueue((java.lang.Object)var39);
    var10.enqueue((java.lang.Object)var23);
    java.lang.String var42 = var23.toString();
    var0.enqueue((java.lang.Object)var42);
    boolean var44 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var47 = var0.isFull();
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isEmpty();
    boolean var52 = var48.isFull();
    var48.setCapacity(100);
    boolean var55 = var48.isEmpty();
    java.lang.Object var56 = var48.dequeue();
    java.lang.String var57 = var48.toString();
    var48.setCapacity((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)(-1));
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[[]]"+ "'", var9.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[true]"+ "'", var42.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[]"+ "'", var57.equals("[]"));

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test103");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(1);
    var0.setCapacity(10);
    boolean var12 = var0.isFull();
    boolean var13 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var16 = var0.isFull();
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isEmpty();
    java.lang.Object var21 = var17.dequeue();
    java.lang.String var22 = var17.toString();
    java.lang.String var23 = var17.toString();
    var0.enqueue((java.lang.Object)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var25 = var17.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test104");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    QueueFaulty var7 = new QueueFaulty();
    boolean var8 = var7.isEmpty();
    java.lang.String var9 = var7.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.enqueue((java.lang.Object)1.0d);
    boolean var21 = var10.isFull();
    var7.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var7);
    var7.setCapacity(1);
    java.lang.Object var26 = var7.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test105");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isEmpty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    var4.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var4);
    boolean var13 = var4.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    var14.enqueue((java.lang.Object)1.0f);
    java.lang.String var22 = var14.toString();
    java.lang.String var23 = var14.toString();
    var14.setCapacity(10);
    var4.enqueue((java.lang.Object)var14);
    java.lang.Object var27 = var14.dequeue();
    boolean var28 = var14.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var29 = var14.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[1.0]"+ "'", var22.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[1.0]"+ "'", var23.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test106");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    java.lang.String var9 = var6.toString();
    boolean var10 = var6.isEmpty();
    var6.setCapacity((-1));
    java.lang.String var13 = var6.toString();
    var6.setCapacity(0);
    var0.enqueue((java.lang.Object)var6);
    java.lang.Object var17 = var6.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[false]"+ "'", var13.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test107");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    java.lang.String var30 = var1.toString();
    QueueFaulty var31 = new QueueFaulty();
    boolean var32 = var31.isEmpty();
    java.lang.String var33 = var31.toString();
    var31.setCapacity((-1));
    boolean var36 = var31.isEmpty();
    boolean var37 = var31.isFull();
    var1.enqueue((java.lang.Object)var31);
    QueueFaulty var39 = new QueueFaulty();
    java.lang.String var40 = var39.toString();
    var39.setCapacity(1);
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    java.lang.String var49 = var43.toString();
    var39.enqueue((java.lang.Object)var43);
    java.lang.Object var51 = var39.dequeue();
    var39.enqueue((java.lang.Object)100);
    java.lang.String var54 = var39.toString();
    var31.enqueue((java.lang.Object)var39);
    QueueFaulty var56 = new QueueFaulty();
    var56.enqueue((java.lang.Object)false);
    QueueFaulty var59 = new QueueFaulty();
    var59.enqueue((java.lang.Object)false);
    boolean var62 = var59.isEmpty();
    boolean var63 = var59.isFull();
    var59.setCapacity(10);
    boolean var66 = var59.isEmpty();
    var59.setCapacity(100);
    var59.setCapacity(0);
    var56.enqueue((java.lang.Object)0);
    var31.enqueue((java.lang.Object)var56);
    boolean var73 = var31.isEmpty();
    QueueFaulty var74 = new QueueFaulty();
    var74.enqueue((java.lang.Object)false);
    boolean var77 = var74.isFull();
    boolean var78 = var74.isFull();
    java.lang.Object var79 = var74.dequeue();
    boolean var80 = var74.isFull();
    java.lang.String var81 = var74.toString();
    var74.setCapacity((-1));
    boolean var84 = var74.isFull();
    boolean var85 = var74.isEmpty();
    java.lang.String var86 = var74.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var31.enqueue((java.lang.Object)var74);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[1.0]]"+ "'", var30.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[100]"+ "'", var54.equals("[100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + false+ "'", var79.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[]"+ "'", var81.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "[]"+ "'", var86.equals("[]"));

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test108");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.enqueue((java.lang.Object)"hi!");
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    java.lang.String var14 = var10.toString();
    var10.setCapacity(0);
    QueueFaulty var17 = new QueueFaulty();
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isFull();
    boolean var22 = var18.isFull();
    java.lang.Object var23 = var18.dequeue();
    boolean var24 = var18.isFull();
    boolean var25 = var18.isFull();
    java.lang.String var26 = var18.toString();
    var18.setCapacity(0);
    var17.enqueue((java.lang.Object)var18);
    boolean var30 = var18.isEmpty();
    java.lang.String var31 = var18.toString();
    var10.enqueue((java.lang.Object)var18);
    java.lang.String var33 = var18.toString();
    var0.enqueue((java.lang.Object)var18);
    var0.setCapacity((-1));
    boolean var37 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + false+ "'", var23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test109");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(1);
    boolean var11 = var0.isEmpty();
    java.lang.String var12 = var0.toString();
    java.lang.String var13 = var0.toString();
    boolean var14 = var0.isFull();
    java.lang.String var15 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test110");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    java.lang.Object var13 = var0.dequeue();
    var0.setCapacity((-1));
    java.lang.String var16 = var0.toString();
    var0.setCapacity(1);
    boolean var19 = var0.isEmpty();
    java.lang.String var20 = var0.toString();
    var0.setCapacity(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var23 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test111");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.isEmpty();
    boolean var15 = var9.isEmpty();
    java.lang.Object var16 = var9.dequeue();
    java.lang.String var17 = var9.toString();
    boolean var18 = var9.isFull();
    boolean var19 = var9.isFull();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    var20.enqueue((java.lang.Object)1.0f);
    java.lang.String var28 = var20.toString();
    java.lang.String var29 = var20.toString();
    boolean var30 = var20.isFull();
    boolean var31 = var20.isFull();
    boolean var32 = var20.isEmpty();
    java.lang.String var33 = var20.toString();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    java.lang.Object var39 = var34.dequeue();
    boolean var40 = var34.isFull();
    boolean var41 = var34.isFull();
    java.lang.String var42 = var34.toString();
    var34.enqueue((java.lang.Object)1.0d);
    var34.setCapacity(0);
    java.lang.String var47 = var34.toString();
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isEmpty();
    java.lang.Object var52 = var48.dequeue();
    java.lang.String var53 = var48.toString();
    QueueFaulty var54 = new QueueFaulty();
    java.lang.String var55 = var54.toString();
    var54.setCapacity(1);
    QueueFaulty var58 = new QueueFaulty();
    var58.enqueue((java.lang.Object)false);
    boolean var61 = var58.isFull();
    boolean var62 = var58.isFull();
    java.lang.Object var63 = var58.dequeue();
    java.lang.String var64 = var58.toString();
    var54.enqueue((java.lang.Object)var58);
    var48.enqueue((java.lang.Object)var58);
    QueueFaulty var67 = new QueueFaulty();
    var67.enqueue((java.lang.Object)false);
    boolean var70 = var67.isFull();
    boolean var71 = var67.isFull();
    java.lang.Object var72 = var67.dequeue();
    var67.enqueue((java.lang.Object)1.0f);
    var67.setCapacity(10);
    var48.enqueue((java.lang.Object)10);
    boolean var78 = var48.isFull();
    var34.enqueue((java.lang.Object)var48);
    var20.enqueue((java.lang.Object)var48);
    boolean var81 = var48.isFull();
    var48.setCapacity((-1));
    boolean var84 = var48.isEmpty();
    var9.enqueue((java.lang.Object)var48);
    var0.enqueue((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[false]"+ "'", var13.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[1.0]"+ "'", var28.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[1.0]"+ "'", var29.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[1.0]"+ "'", var33.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[1.0]"+ "'", var47.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[]"+ "'", var53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + false+ "'", var63.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + false+ "'", var72.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test112");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.Object var10 = var0.dequeue();
    QueueFaulty var11 = new QueueFaulty();
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    boolean var21 = var14.isFull();
    boolean var22 = var14.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    java.lang.String var27 = var23.toString();
    boolean var28 = var23.isFull();
    boolean var29 = var23.isEmpty();
    java.lang.Object var30 = var23.dequeue();
    java.lang.String var31 = var23.toString();
    boolean var32 = var23.isFull();
    java.lang.String var33 = var23.toString();
    var14.enqueue((java.lang.Object)var23);
    var11.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var11);
    java.lang.String var37 = var11.toString();
    boolean var38 = var11.isFull();
    boolean var39 = var11.isEmpty();
    var11.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[]]"+ "'", var8.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[false]"+ "'", var27.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[[[]]]"+ "'", var37.equals("[[[]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test113");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(1);
    boolean var10 = var0.isEmpty();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    QueueFaulty var15 = new QueueFaulty();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.setCapacity(0);
    var15.enqueue((java.lang.Object)var16);
    var16.setCapacity(10);
    QueueFaulty var30 = new QueueFaulty();
    boolean var31 = var30.isEmpty();
    boolean var32 = var30.isEmpty();
    boolean var33 = var30.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    java.lang.Object var39 = var34.dequeue();
    var34.enqueue((java.lang.Object)1.0f);
    var30.enqueue((java.lang.Object)var34);
    var16.enqueue((java.lang.Object)var34);
    boolean var44 = var16.isEmpty();
    java.lang.String var45 = var16.toString();
    boolean var46 = var16.isEmpty();
    var0.enqueue((java.lang.Object)var16);
    boolean var48 = var0.isEmpty();
    var0.setCapacity(100);
    boolean var51 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[[1.0]]"+ "'", var45.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test114");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    var0.setCapacity(100);
    boolean var7 = var0.isFull();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    var8.enqueue((java.lang.Object)1.0f);
    java.lang.String var16 = var8.toString();
    java.lang.String var17 = var8.toString();
    boolean var18 = var8.isEmpty();
    java.lang.Object var19 = var8.dequeue();
    var8.setCapacity(100);
    boolean var22 = var8.isFull();
    var0.enqueue((java.lang.Object)var8);
    boolean var24 = var0.isFull();
    var0.setCapacity(100);
    QueueFaulty var27 = new QueueFaulty();
    boolean var28 = var27.isEmpty();
    java.lang.String var29 = var27.toString();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    boolean var36 = var30.isFull();
    boolean var37 = var30.isFull();
    java.lang.String var38 = var30.toString();
    var30.enqueue((java.lang.Object)1.0d);
    boolean var41 = var30.isFull();
    var27.enqueue((java.lang.Object)var30);
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    boolean var51 = var43.isFull();
    java.lang.String var52 = var43.toString();
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isEmpty();
    java.lang.Object var57 = var53.dequeue();
    QueueFaulty var58 = new QueueFaulty();
    java.lang.String var59 = var58.toString();
    var53.enqueue((java.lang.Object)var59);
    var53.setCapacity(10);
    var43.enqueue((java.lang.Object)10);
    var30.enqueue((java.lang.Object)var43);
    java.lang.String var65 = var43.toString();
    java.lang.String var66 = var43.toString();
    boolean var67 = var43.isEmpty();
    boolean var68 = var43.isFull();
    java.lang.Object var69 = var43.dequeue();
    var0.enqueue((java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[1.0]"+ "'", var16.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[1.0]"+ "'", var17.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + 1.0f+ "'", var19.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[10]"+ "'", var65.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "[10]"+ "'", var66.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + 10+ "'", var69.equals(10));

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test115");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    java.lang.String var30 = var1.toString();
    QueueFaulty var31 = new QueueFaulty();
    boolean var32 = var31.isEmpty();
    java.lang.String var33 = var31.toString();
    var31.setCapacity((-1));
    boolean var36 = var31.isEmpty();
    boolean var37 = var31.isFull();
    var1.enqueue((java.lang.Object)var31);
    java.lang.String var39 = var31.toString();
    boolean var40 = var31.isEmpty();
    boolean var41 = var31.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var42 = var31.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[1.0]]"+ "'", var30.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[]"+ "'", var39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test116");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    var0.setCapacity((-1));
    var0.setCapacity(100);
    boolean var20 = var0.isEmpty();
    boolean var21 = var0.isEmpty();
    boolean var22 = var0.isEmpty();
    boolean var23 = var0.isFull();
    java.lang.Object var24 = var0.dequeue();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isEmpty();
    java.lang.Object var29 = var25.dequeue();
    QueueFaulty var30 = new QueueFaulty();
    java.lang.String var31 = var30.toString();
    var25.enqueue((java.lang.Object)var31);
    var25.setCapacity(10);
    boolean var35 = var25.isFull();
    boolean var36 = var25.isEmpty();
    QueueFaulty var37 = new QueueFaulty();
    var37.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var40 = var37.dequeue();
    java.lang.String var41 = var37.toString();
    var25.enqueue((java.lang.Object)var41);
    boolean var43 = var25.isFull();
    boolean var44 = var25.isFull();
    var25.setCapacity(100);
    var0.enqueue((java.lang.Object)var25);
    boolean var48 = var25.isEmpty();
    var25.setCapacity(1);
    java.lang.Object var51 = var25.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + (short)(-1)+ "'", var40.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test117");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    var0.enqueue((java.lang.Object)10.0d);
    java.lang.Object var7 = var0.dequeue();
    boolean var8 = var0.isEmpty();
    java.lang.Object var9 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10.0d+ "'", var9.equals(10.0d));

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test118");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    var16.enqueue((java.lang.Object)0.0f);
    var0.enqueue((java.lang.Object)var16);
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    var23.enqueue((java.lang.Object)1.0f);
    java.lang.String var31 = var23.toString();
    java.lang.String var32 = var23.toString();
    var23.setCapacity(10);
    boolean var35 = var23.isFull();
    var0.enqueue((java.lang.Object)var35);
    java.lang.Object var37 = var0.dequeue();
    boolean var38 = var0.isFull();
    java.lang.Object var39 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[1.0]"+ "'", var31.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[1.0]"+ "'", var32.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test119");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    var0.setCapacity((-1));
    var0.setCapacity(100);
    boolean var20 = var0.isFull();
    java.lang.Object var21 = var0.dequeue();
    java.lang.Object var22 = var0.dequeue();
    java.lang.String var23 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var24 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test120");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var4.isEmpty();
    boolean var13 = var4.isEmpty();
    java.lang.String var14 = var4.toString();
    java.lang.String var15 = var4.toString();
    boolean var16 = var4.isEmpty();
    boolean var17 = var4.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var18 = var4.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test121");


    QueueFaulty var0 = new QueueFaulty();
    var0.setCapacity(100);
    QueueFaulty var3 = new QueueFaulty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    boolean var10 = var4.isFull();
    boolean var11 = var4.isFull();
    java.lang.String var12 = var4.toString();
    var4.setCapacity(0);
    var3.enqueue((java.lang.Object)var4);
    boolean var16 = var4.isEmpty();
    var0.enqueue((java.lang.Object)var16);
    java.lang.Object var18 = var0.dequeue();
    boolean var19 = var0.isFull();
    boolean var20 = var0.isEmpty();
    var0.setCapacity((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var23 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + true+ "'", var18.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test122");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    QueueFaulty var7 = new QueueFaulty();
    java.lang.String var8 = var7.toString();
    var7.setCapacity(1);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    java.lang.String var17 = var11.toString();
    var7.enqueue((java.lang.Object)var11);
    boolean var19 = var7.isEmpty();
    boolean var20 = var7.isFull();
    var0.enqueue((java.lang.Object)var20);
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isFull();
    boolean var26 = var22.isFull();
    var22.setCapacity(100);
    boolean var29 = var22.isFull();
    var0.enqueue((java.lang.Object)var22);
    java.lang.Object var31 = var22.dequeue();
    boolean var32 = var22.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test123");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isEmpty();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.isFull();
    boolean var15 = var9.isEmpty();
    java.lang.Object var16 = var9.dequeue();
    java.lang.String var17 = var9.toString();
    boolean var18 = var9.isFull();
    java.lang.String var19 = var9.toString();
    var0.enqueue((java.lang.Object)var9);
    QueueFaulty var21 = new QueueFaulty();
    java.lang.String var22 = var21.toString();
    var21.setCapacity(1);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    var21.enqueue((java.lang.Object)var25);
    boolean var33 = var21.isEmpty();
    java.lang.Object var34 = var21.dequeue();
    boolean var35 = var21.isEmpty();
    boolean var36 = var21.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[false]"+ "'", var13.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test124");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isEmpty();
    java.lang.Object var20 = var16.dequeue();
    boolean var21 = var16.isFull();
    java.lang.String var22 = var16.toString();
    boolean var23 = var16.isEmpty();
    var0.enqueue((java.lang.Object)var23);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isEmpty();
    java.lang.Object var29 = var25.dequeue();
    java.lang.String var30 = var25.toString();
    boolean var31 = var25.isEmpty();
    QueueFaulty var32 = new QueueFaulty();
    var32.enqueue((java.lang.Object)false);
    boolean var35 = var32.isFull();
    java.lang.String var36 = var32.toString();
    var32.setCapacity(0);
    var25.enqueue((java.lang.Object)0);
    boolean var40 = var25.isFull();
    var25.setCapacity(1);
    var0.enqueue((java.lang.Object)var25);
    boolean var44 = var25.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[false]"+ "'", var36.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test125");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    var0.setCapacity(10);
    QueueFaulty var25 = new QueueFaulty();
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isFull();
    boolean var33 = var29.isFull();
    java.lang.Object var34 = var29.dequeue();
    var29.enqueue((java.lang.Object)1.0f);
    var25.enqueue((java.lang.Object)var29);
    boolean var38 = var29.isEmpty();
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isFull();
    boolean var43 = var39.isFull();
    java.lang.Object var44 = var39.dequeue();
    var39.enqueue((java.lang.Object)1.0f);
    java.lang.String var47 = var39.toString();
    java.lang.String var48 = var39.toString();
    var39.setCapacity(10);
    var29.enqueue((java.lang.Object)var39);
    boolean var52 = var39.isEmpty();
    boolean var53 = var39.isEmpty();
    var0.enqueue((java.lang.Object)var39);
    boolean var55 = var39.isFull();
    var39.setCapacity((-1));
    boolean var58 = var39.isFull();
    java.lang.Object var59 = var39.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + false+ "'", var44.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[1.0]"+ "'", var47.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[1.0]"+ "'", var48.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test126");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    var7.enqueue((java.lang.Object)var24);
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    java.lang.String var39 = var35.toString();
    boolean var40 = var35.isFull();
    boolean var41 = var35.isEmpty();
    java.lang.Object var42 = var35.dequeue();
    java.lang.String var43 = var35.toString();
    boolean var44 = var35.isFull();
    java.lang.String var45 = var35.toString();
    QueueFaulty var46 = new QueueFaulty();
    var46.enqueue((java.lang.Object)false);
    boolean var49 = var46.isEmpty();
    java.lang.String var50 = var46.toString();
    boolean var51 = var46.isFull();
    boolean var52 = var46.isEmpty();
    java.lang.Object var53 = var46.dequeue();
    var35.enqueue((java.lang.Object)var46);
    java.lang.Object var55 = var35.dequeue();
    var24.enqueue(var55);
    java.lang.String var57 = var24.toString();
    java.lang.String var58 = var24.toString();
    boolean var59 = var24.isFull();
    var24.setCapacity((-1));
    boolean var62 = var24.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[false]"+ "'", var39.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + false+ "'", var42.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[false]"+ "'", var50.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + false+ "'", var53.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[[]]"+ "'", var57.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "[[]]"+ "'", var58.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test127");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(0);
    java.lang.String var24 = var7.toString();
    boolean var25 = var7.isEmpty();
    boolean var26 = var7.isEmpty();
    java.lang.String var27 = var7.toString();
    var7.setCapacity(100);
    var7.setCapacity(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var32 = var7.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test128");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var4.isEmpty();
    boolean var13 = var4.isEmpty();
    java.lang.String var14 = var4.toString();
    boolean var15 = var4.isEmpty();
    java.lang.String var16 = var4.toString();
    boolean var17 = var4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test129");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    java.lang.Object var12 = var0.dequeue();
    var0.enqueue((java.lang.Object)100);
    boolean var15 = var0.isFull();
    java.lang.Object var16 = var0.dequeue();
    java.lang.String var17 = var0.toString();
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isFull();
    boolean var22 = var18.isFull();
    java.lang.Object var23 = var18.dequeue();
    boolean var24 = var18.isFull();
    boolean var25 = var18.isFull();
    java.lang.String var26 = var18.toString();
    var18.enqueue((java.lang.Object)1.0d);
    var18.setCapacity(0);
    boolean var31 = var18.isEmpty();
    var18.setCapacity((-1));
    var0.enqueue((java.lang.Object)var18);
    boolean var35 = var18.isEmpty();
    java.lang.Object var36 = var18.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + 100+ "'", var16.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + false+ "'", var23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 1.0d+ "'", var36.equals(1.0d));

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test130");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    var0.setCapacity((-1));
    var0.enqueue((java.lang.Object)(byte)0);
    java.lang.String var7 = var0.toString();
    java.lang.Object var8 = var0.dequeue();
    java.lang.String var9 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var10 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[0]"+ "'", var7.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + (byte)0+ "'", var8.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test131");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(1);
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    boolean var14 = var0.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.Object var19 = var15.dequeue();
    boolean var20 = var15.isFull();
    java.lang.String var21 = var15.toString();
    boolean var22 = var15.isEmpty();
    var15.enqueue((java.lang.Object)(byte)10);
    java.lang.String var25 = var15.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var25);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[10]"+ "'", var25.equals("[10]"));

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test132");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var9 = var0.isEmpty();
    boolean var10 = var0.isFull();
    var0.setCapacity(10);
    java.lang.String var13 = var0.toString();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    boolean var18 = var14.isFull();
    java.lang.String var19 = var14.toString();
    var14.setCapacity((-1));
    java.lang.String var22 = var14.toString();
    java.lang.String var23 = var14.toString();
    java.lang.String var24 = var14.toString();
    boolean var25 = var14.isFull();
    java.lang.String var26 = var14.toString();
    boolean var27 = var14.isFull();
    var0.enqueue((java.lang.Object)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[false]"+ "'", var22.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[false]"+ "'", var23.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[false]"+ "'", var24.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[false]"+ "'", var26.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test133");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    var1.setCapacity(100);
    java.lang.Object var32 = var1.dequeue();
    boolean var33 = var1.isEmpty();
    boolean var34 = var1.isEmpty();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    java.lang.String var38 = var35.toString();
    boolean var39 = var35.isEmpty();
    var35.setCapacity((-1));
    java.lang.String var42 = var35.toString();
    var35.setCapacity(0);
    java.lang.Object var45 = var35.dequeue();
    var1.enqueue((java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[false]"+ "'", var42.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test134");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isFull();
    var0.setCapacity(100);
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test135");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    java.lang.String var4 = var0.toString();
    var0.setCapacity(0);
    QueueFaulty var7 = new QueueFaulty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    boolean var14 = var8.isFull();
    boolean var15 = var8.isFull();
    java.lang.String var16 = var8.toString();
    var8.setCapacity(0);
    var7.enqueue((java.lang.Object)var8);
    boolean var20 = var8.isEmpty();
    java.lang.String var21 = var8.toString();
    var0.enqueue((java.lang.Object)var8);
    java.lang.String var23 = var8.toString();
    boolean var24 = var8.isEmpty();
    java.lang.String var25 = var8.toString();
    boolean var26 = var8.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test136");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    boolean var13 = var0.isEmpty();
    boolean var14 = var0.isFull();
    boolean var15 = var0.isFull();
    var0.setCapacity(100);
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test137");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.String var7 = var0.toString();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.setCapacity((-1));
    boolean var21 = var10.isEmpty();
    var10.setCapacity((-1));
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    java.lang.String var30 = var24.toString();
    boolean var31 = var24.isFull();
    boolean var32 = var24.isFull();
    boolean var33 = var24.isFull();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isEmpty();
    java.lang.Object var38 = var34.dequeue();
    var34.setCapacity(10);
    boolean var41 = var34.isFull();
    java.lang.String var42 = var34.toString();
    boolean var43 = var34.isEmpty();
    QueueFaulty var44 = new QueueFaulty();
    java.lang.String var45 = var44.toString();
    var44.setCapacity(1);
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isFull();
    boolean var52 = var48.isFull();
    java.lang.Object var53 = var48.dequeue();
    java.lang.String var54 = var48.toString();
    var44.enqueue((java.lang.Object)var48);
    var34.enqueue((java.lang.Object)var44);
    var44.setCapacity(100);
    var24.enqueue((java.lang.Object)100);
    var10.enqueue((java.lang.Object)var24);
    var0.enqueue((java.lang.Object)var24);
    java.lang.String var62 = var24.toString();
    QueueFaulty var63 = new QueueFaulty();
    java.lang.String var64 = var63.toString();
    java.lang.String var65 = var63.toString();
    var63.setCapacity(0);
    QueueFaulty var68 = new QueueFaulty();
    boolean var69 = var68.isEmpty();
    boolean var70 = var68.isEmpty();
    boolean var71 = var68.isEmpty();
    QueueFaulty var72 = new QueueFaulty();
    var72.enqueue((java.lang.Object)false);
    boolean var75 = var72.isFull();
    boolean var76 = var72.isFull();
    java.lang.Object var77 = var72.dequeue();
    var72.enqueue((java.lang.Object)1.0f);
    var68.enqueue((java.lang.Object)var72);
    var63.enqueue((java.lang.Object)var72);
    java.lang.String var82 = var63.toString();
    var63.setCapacity((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.enqueue((java.lang.Object)(-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[false]"+ "'", var7.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + false+ "'", var38.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + false+ "'", var53.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[100]"+ "'", var62.equals("[100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[]"+ "'", var65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + false+ "'", var77.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "[[1.0]]"+ "'", var82.equals("[[1.0]]"));

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test138");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    var0.setCapacity(100);
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.Object var19 = var15.dequeue();
    var15.setCapacity(10);
    boolean var22 = var15.isFull();
    var15.setCapacity(1);
    boolean var25 = var15.isEmpty();
    var0.enqueue((java.lang.Object)var15);
    boolean var27 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test139");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    boolean var14 = var0.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.String var19 = var15.toString();
    boolean var20 = var15.isFull();
    boolean var21 = var15.isEmpty();
    java.lang.Object var22 = var15.dequeue();
    java.lang.String var23 = var15.toString();
    boolean var24 = var15.isFull();
    java.lang.String var25 = var15.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.String var30 = var26.toString();
    boolean var31 = var26.isFull();
    boolean var32 = var26.isEmpty();
    java.lang.Object var33 = var26.dequeue();
    var15.enqueue((java.lang.Object)var26);
    java.lang.Object var35 = var15.dequeue();
    java.lang.String var36 = var15.toString();
    var15.setCapacity((-1));
    var0.enqueue((java.lang.Object)(-1));
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isEmpty();
    boolean var44 = var40.isFull();
    var40.setCapacity(100);
    boolean var47 = var40.isEmpty();
    java.lang.Object var48 = var40.dequeue();
    boolean var49 = var40.isFull();
    boolean var50 = var40.isEmpty();
    boolean var51 = var40.isFull();
    var0.enqueue((java.lang.Object)var40);
    boolean var53 = var40.isEmpty();
    boolean var54 = var40.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[false]"+ "'", var30.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test140");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.String var38 = var16.toString();
    var16.setCapacity(100);
    boolean var41 = var16.isFull();
    boolean var42 = var16.isFull();
    var16.setCapacity((-1));
    QueueFaulty var45 = new QueueFaulty();
    var45.enqueue((java.lang.Object)false);
    boolean var48 = var45.isEmpty();
    boolean var49 = var45.isFull();
    java.lang.String var50 = var45.toString();
    var45.setCapacity((-1));
    java.lang.String var53 = var45.toString();
    var45.setCapacity((-1));
    boolean var56 = var45.isFull();
    var45.setCapacity(0);
    var16.enqueue((java.lang.Object)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[10]"+ "'", var38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[false]"+ "'", var50.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[false]"+ "'", var53.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test141");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isFull();
    java.lang.String var11 = var7.toString();
    var7.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    boolean var15 = var0.isFull();
    var0.setCapacity(1);
    boolean var18 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)"[10]");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[false]"+ "'", var11.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test142");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    var16.enqueue((java.lang.Object)0.0f);
    var0.enqueue((java.lang.Object)var16);
    var16.setCapacity(100);
    java.lang.Object var25 = var16.dequeue();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    java.lang.String var31 = var26.toString();
    boolean var32 = var26.isEmpty();
    var26.setCapacity(0);
    boolean var35 = var26.isEmpty();
    boolean var36 = var26.isFull();
    java.lang.String var37 = var26.toString();
    var16.enqueue((java.lang.Object)var26);
    var26.setCapacity(1);
    var26.setCapacity(1);
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    java.lang.String var51 = var43.toString();
    var43.enqueue((java.lang.Object)1.0d);
    boolean var54 = var43.isFull();
    boolean var55 = var43.isFull();
    QueueFaulty var56 = new QueueFaulty();
    var56.enqueue((java.lang.Object)false);
    boolean var59 = var56.isEmpty();
    java.lang.Object var60 = var56.dequeue();
    QueueFaulty var61 = new QueueFaulty();
    java.lang.String var62 = var61.toString();
    var56.enqueue((java.lang.Object)var62);
    var56.setCapacity(10);
    boolean var66 = var56.isFull();
    boolean var67 = var56.isEmpty();
    boolean var68 = var56.isEmpty();
    java.lang.Object var69 = var56.dequeue();
    var43.enqueue((java.lang.Object)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var26.enqueue((java.lang.Object)var43);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + false+ "'", var60.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[]"+ "'", var62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test143");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test144");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var10);
    java.lang.Object var23 = var0.dequeue();
    var0.setCapacity(10);
    boolean var26 = var0.isFull();
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test145");


    QueueFaulty var0 = new QueueFaulty();
    var0.setCapacity(100);
    boolean var3 = var0.isEmpty();
    var0.setCapacity(100);
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test146");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isEmpty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    var4.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var4);
    boolean var13 = var4.isEmpty();
    java.lang.Object var14 = var4.dequeue();
    var4.setCapacity(100);
    boolean var17 = var4.isEmpty();
    boolean var18 = var4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 1.0f+ "'", var14.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test147");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(0);
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    java.lang.String var14 = var0.toString();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isFull();
    boolean var19 = var15.isFull();
    java.lang.Object var20 = var15.dequeue();
    boolean var21 = var15.isFull();
    boolean var22 = var15.isFull();
    java.lang.String var23 = var15.toString();
    var15.setCapacity((-1));
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    var26.setCapacity(10);
    boolean var33 = var26.isFull();
    java.lang.String var34 = var26.toString();
    boolean var35 = var26.isEmpty();
    QueueFaulty var36 = new QueueFaulty();
    java.lang.String var37 = var36.toString();
    var36.setCapacity(1);
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isFull();
    boolean var44 = var40.isFull();
    java.lang.Object var45 = var40.dequeue();
    java.lang.String var46 = var40.toString();
    var36.enqueue((java.lang.Object)var40);
    var26.enqueue((java.lang.Object)var36);
    boolean var49 = var26.isEmpty();
    var15.enqueue((java.lang.Object)var26);
    java.lang.Object var51 = var26.dequeue();
    java.lang.String var52 = var26.toString();
    java.lang.String var53 = var26.toString();
    var0.enqueue((java.lang.Object)var53);
    boolean var55 = var0.isEmpty();
    java.lang.Object var56 = var0.dequeue();
    boolean var57 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[]"+ "'", var34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[]"+ "'", var53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test148");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isFull();
    boolean var2 = var0.isFull();
    var0.setCapacity((-1));
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test149");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isFull();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.String var16 = var12.toString();
    var12.setCapacity((-1));
    java.lang.String var19 = var12.toString();
    java.lang.Object var20 = var12.dequeue();
    boolean var21 = var12.isEmpty();
    var0.enqueue((java.lang.Object)var21);
    var0.setCapacity(10);
    java.lang.Object var25 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[false]"+ "'", var16.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test150");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isEmpty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    var4.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var4);
    boolean var13 = var0.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    boolean var18 = var14.isFull();
    java.lang.String var19 = var14.toString();
    java.lang.Object var20 = var14.dequeue();
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isEmpty();
    java.lang.Object var25 = var21.dequeue();
    var21.setCapacity(10);
    boolean var28 = var21.isFull();
    var21.setCapacity(1);
    boolean var31 = var21.isEmpty();
    var21.setCapacity(10);
    var14.enqueue((java.lang.Object)var21);
    boolean var35 = var21.isFull();
    boolean var36 = var21.isEmpty();
    boolean var37 = var21.isFull();
    var0.enqueue((java.lang.Object)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var39 = var21.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test151");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.String var14 = var10.toString();
    boolean var15 = var10.isFull();
    boolean var16 = var10.isEmpty();
    java.lang.Object var17 = var10.dequeue();
    java.lang.String var18 = var10.toString();
    boolean var19 = var10.isFull();
    var0.enqueue((java.lang.Object)var19);
    boolean var21 = var0.isEmpty();
    boolean var22 = var0.isEmpty();
    boolean var23 = var0.isEmpty();
    java.lang.String var24 = var0.toString();
    java.lang.String var25 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[false]"+ "'", var14.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[false]"+ "'", var24.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[false]"+ "'", var25.equals("[false]"));

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test152");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.enqueue((java.lang.Object)"hi!");
    boolean var10 = var0.isFull();
    QueueFaulty var11 = new QueueFaulty();
    boolean var12 = var11.isEmpty();
    java.lang.String var13 = var11.toString();
    var0.enqueue((java.lang.Object)var11);
    boolean var15 = var0.isEmpty();
    java.lang.String var16 = var0.toString();
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[hi!, []]"+ "'", var16.equals("[hi!, []]"));

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test153");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    QueueFaulty var9 = new QueueFaulty();
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    boolean var12 = var9.isEmpty();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    var13.enqueue((java.lang.Object)1.0f);
    var9.enqueue((java.lang.Object)var13);
    boolean var22 = var9.isEmpty();
    var0.enqueue((java.lang.Object)var9);
    boolean var24 = var0.isFull();
    java.lang.String var25 = var0.toString();
    var0.setCapacity((-1));
    java.lang.Object var28 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[[1.0]]]"+ "'", var25.equals("[[[1.0]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test154");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test155");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isEmpty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    var4.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var4);
    java.lang.String var13 = var4.toString();
    boolean var14 = var4.isFull();
    java.lang.String var15 = var4.toString();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isEmpty();
    java.lang.Object var20 = var16.dequeue();
    java.lang.String var21 = var16.toString();
    boolean var22 = var16.isFull();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    boolean var27 = var23.isFull();
    var23.setCapacity(10);
    boolean var30 = var23.isFull();
    var16.enqueue((java.lang.Object)var23);
    boolean var32 = var16.isFull();
    boolean var33 = var16.isFull();
    var16.setCapacity((-1));
    var4.enqueue((java.lang.Object)(-1));
    var4.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[1.0]"+ "'", var15.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test156");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(1);
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test157");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    java.lang.String var30 = var1.toString();
    QueueFaulty var31 = new QueueFaulty();
    boolean var32 = var31.isEmpty();
    java.lang.String var33 = var31.toString();
    var31.setCapacity((-1));
    boolean var36 = var31.isEmpty();
    boolean var37 = var31.isFull();
    var1.enqueue((java.lang.Object)var31);
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isEmpty();
    boolean var43 = var39.isFull();
    var39.setCapacity(10);
    boolean var46 = var39.isEmpty();
    QueueFaulty var47 = new QueueFaulty();
    var47.enqueue((java.lang.Object)false);
    boolean var50 = var47.isFull();
    boolean var51 = var47.isFull();
    java.lang.Object var52 = var47.dequeue();
    java.lang.String var53 = var47.toString();
    var39.enqueue((java.lang.Object)var53);
    java.lang.Object var55 = var39.dequeue();
    boolean var56 = var39.isEmpty();
    var31.enqueue((java.lang.Object)var39);
    boolean var58 = var31.isEmpty();
    java.lang.Object var59 = var31.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[1.0]]"+ "'", var30.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[]"+ "'", var53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test158");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    var16.enqueue((java.lang.Object)0.0f);
    var0.enqueue((java.lang.Object)var16);
    var16.enqueue((java.lang.Object)"[true]");
    boolean var25 = var16.isEmpty();
    java.lang.String var26 = var16.toString();
    boolean var27 = var16.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[false, 0.0, [true]]"+ "'", var26.equals("[false, 0.0, [true]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test159");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isEmpty();
    QueueFaulty var7 = new QueueFaulty();
    java.lang.String var8 = var7.toString();
    var7.setCapacity(1);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    java.lang.String var17 = var11.toString();
    var7.enqueue((java.lang.Object)var11);
    boolean var19 = var7.isEmpty();
    boolean var20 = var7.isEmpty();
    java.lang.String var21 = var7.toString();
    var7.setCapacity(1);
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    var0.setCapacity(1);
    boolean var29 = var0.isEmpty();
    boolean var30 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[[]]"+ "'", var21.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test160");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    var0.setCapacity(10);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    var11.enqueue((java.lang.Object)"hi!");
    boolean var21 = var11.isFull();
    var0.enqueue((java.lang.Object)var11);
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    boolean var29 = var23.isFull();
    boolean var30 = var23.isFull();
    java.lang.String var31 = var23.toString();
    var23.setCapacity(0);
    var23.setCapacity(0);
    QueueFaulty var36 = new QueueFaulty();
    var36.setCapacity(100);
    QueueFaulty var39 = new QueueFaulty();
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isFull();
    boolean var44 = var40.isFull();
    java.lang.Object var45 = var40.dequeue();
    boolean var46 = var40.isFull();
    boolean var47 = var40.isFull();
    java.lang.String var48 = var40.toString();
    var40.setCapacity(0);
    var39.enqueue((java.lang.Object)var40);
    boolean var52 = var40.isEmpty();
    var36.enqueue((java.lang.Object)var52);
    var23.enqueue((java.lang.Object)var36);
    java.lang.String var55 = var36.toString();
    var0.enqueue((java.lang.Object)var36);
    java.lang.Object var57 = var0.dequeue();
    boolean var58 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[true]"+ "'", var55.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test161");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    java.lang.Object var16 = var0.dequeue();
    boolean var17 = var0.isEmpty();
    boolean var18 = var0.isFull();
    java.lang.Object var19 = var0.dequeue();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isEmpty();
    java.lang.Object var24 = var20.dequeue();
    boolean var25 = var20.isFull();
    java.lang.String var26 = var20.toString();
    boolean var27 = var20.isEmpty();
    var20.enqueue((java.lang.Object)(byte)10);
    java.lang.Object var30 = var20.dequeue();
    var20.setCapacity(10);
    var0.enqueue((java.lang.Object)var20);
    java.lang.Object var34 = var0.dequeue();
    boolean var35 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + (byte)10+ "'", var30.equals((byte)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test162");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    var0.setCapacity((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var11 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test163");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.String var38 = var16.toString();
    var16.setCapacity(10);
    boolean var41 = var16.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[10]"+ "'", var38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test164");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    java.lang.String var5 = var0.toString();
    var0.setCapacity(1);
    boolean var8 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var11 = new QueueFaulty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    boolean var18 = var12.isFull();
    boolean var19 = var12.isFull();
    java.lang.String var20 = var12.toString();
    var12.setCapacity(0);
    var11.enqueue((java.lang.Object)var12);
    var12.setCapacity(10);
    QueueFaulty var26 = new QueueFaulty();
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    boolean var29 = var26.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    var26.enqueue((java.lang.Object)var30);
    var12.enqueue((java.lang.Object)var30);
    boolean var40 = var12.isEmpty();
    java.lang.String var41 = var12.toString();
    var12.setCapacity(0);
    java.lang.String var44 = var12.toString();
    var12.setCapacity(0);
    QueueFaulty var47 = new QueueFaulty();
    boolean var48 = var47.isEmpty();
    java.lang.String var49 = var47.toString();
    var47.setCapacity((-1));
    boolean var52 = var47.isEmpty();
    QueueFaulty var53 = new QueueFaulty();
    boolean var54 = var53.isEmpty();
    java.lang.String var55 = var53.toString();
    var53.setCapacity(0);
    var47.enqueue((java.lang.Object)var53);
    var12.enqueue((java.lang.Object)var47);
    var0.enqueue((java.lang.Object)var47);
    java.lang.String var61 = var47.toString();
    boolean var62 = var47.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[[1.0]]"+ "'", var41.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[[1.0]]"+ "'", var44.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[[]]"+ "'", var61.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test165");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    var7.enqueue((java.lang.Object)var24);
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    java.lang.String var38 = var35.toString();
    boolean var39 = var35.isEmpty();
    java.lang.String var40 = var35.toString();
    boolean var41 = var35.isFull();
    boolean var42 = var35.isEmpty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    boolean var51 = var43.isFull();
    boolean var52 = var43.isEmpty();
    var35.enqueue((java.lang.Object)var43);
    var35.setCapacity(0);
    var24.enqueue((java.lang.Object)0);
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    java.lang.String var60 = var57.toString();
    boolean var61 = var57.isEmpty();
    var24.enqueue((java.lang.Object)var57);
    boolean var63 = var57.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[false]"+ "'", var40.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[false]"+ "'", var60.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test166");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(0);
    boolean var24 = var7.isFull();
    java.lang.String var25 = var7.toString();
    java.lang.String var26 = var7.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var27 = var7.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test167");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isEmpty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    var4.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var4);
    boolean var13 = var4.isEmpty();
    var4.setCapacity(100);
    var4.setCapacity(0);
    java.lang.Object var18 = var4.dequeue();
    boolean var19 = var4.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = var4.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test168");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    boolean var24 = var0.isFull();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    boolean var32 = var25.isFull();
    boolean var33 = var25.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isEmpty();
    java.lang.String var38 = var34.toString();
    boolean var39 = var34.isFull();
    boolean var40 = var34.isEmpty();
    java.lang.Object var41 = var34.dequeue();
    java.lang.String var42 = var34.toString();
    boolean var43 = var34.isFull();
    java.lang.String var44 = var34.toString();
    var25.enqueue((java.lang.Object)var34);
    boolean var46 = var25.isEmpty();
    java.lang.Object var47 = var25.dequeue();
    var0.enqueue((java.lang.Object)var25);
    var25.setCapacity(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var51 = var25.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test169");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.String var38 = var16.toString();
    var16.setCapacity(100);
    boolean var41 = var16.isFull();
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    boolean var48 = var42.isFull();
    boolean var49 = var42.isFull();
    java.lang.String var50 = var42.toString();
    var42.setCapacity((-1));
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isFull();
    boolean var57 = var53.isFull();
    java.lang.Object var58 = var53.dequeue();
    var53.enqueue((java.lang.Object)1.0f);
    java.lang.String var61 = var53.toString();
    java.lang.String var62 = var53.toString();
    boolean var63 = var53.isEmpty();
    java.lang.Object var64 = var53.dequeue();
    var42.enqueue(var64);
    boolean var66 = var42.isFull();
    boolean var67 = var42.isFull();
    java.lang.Object var68 = var42.dequeue();
    var16.enqueue((java.lang.Object)var42);
    java.lang.String var70 = var42.toString();
    var42.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[10]"+ "'", var38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + false+ "'", var58.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[1.0]"+ "'", var61.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[1.0]"+ "'", var62.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + 1.0f+ "'", var64.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + 1.0f+ "'", var68.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[]"+ "'", var70.equals("[]"));

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test170");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    var0.setCapacity(0);
    QueueFaulty var5 = new QueueFaulty();
    var5.enqueue((java.lang.Object)false);
    boolean var8 = var5.isEmpty();
    java.lang.Object var9 = var5.dequeue();
    boolean var10 = var5.isFull();
    var0.enqueue((java.lang.Object)var10);
    java.lang.String var12 = var0.toString();
    boolean var13 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[false]"+ "'", var12.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test171");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    java.lang.String var13 = var0.toString();
    java.lang.Object var14 = var0.dequeue();
    boolean var15 = var0.isEmpty();
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 1.0f+ "'", var14.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test172");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    var0.setCapacity((-1));
    boolean var18 = var0.isFull();
    var0.setCapacity(100);
    boolean var21 = var0.isFull();
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isEmpty();
    java.lang.Object var26 = var22.dequeue();
    var22.setCapacity(10);
    boolean var29 = var22.isFull();
    java.lang.String var30 = var22.toString();
    boolean var31 = var22.isEmpty();
    java.lang.String var32 = var22.toString();
    boolean var33 = var22.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isEmpty();
    java.lang.String var38 = var34.toString();
    boolean var39 = var34.isEmpty();
    boolean var40 = var34.isFull();
    var22.enqueue((java.lang.Object)var34);
    boolean var42 = var34.isFull();
    boolean var43 = var34.isFull();
    var0.enqueue((java.lang.Object)var34);
    java.lang.Object var45 = var34.dequeue();
    boolean var46 = var34.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test173");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity((-1));
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    java.lang.String var19 = var16.toString();
    boolean var20 = var16.isEmpty();
    boolean var21 = var16.isEmpty();
    boolean var22 = var16.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    java.lang.String var24 = var23.toString();
    var23.setCapacity(1);
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    java.lang.String var33 = var27.toString();
    var23.enqueue((java.lang.Object)var27);
    boolean var35 = var23.isEmpty();
    boolean var36 = var23.isEmpty();
    java.lang.String var37 = var23.toString();
    var23.setCapacity(1);
    var23.setCapacity(10);
    var16.enqueue((java.lang.Object)var23);
    var0.enqueue((java.lang.Object)var23);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isEmpty();
    java.lang.Object var48 = var44.dequeue();
    java.lang.String var49 = var44.toString();
    boolean var50 = var44.isEmpty();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isFull();
    java.lang.String var55 = var51.toString();
    var51.setCapacity(0);
    var44.enqueue((java.lang.Object)0);
    var44.enqueue((java.lang.Object)0.0d);
    var23.enqueue((java.lang.Object)0.0d);
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)false);
    boolean var65 = var62.isFull();
    boolean var66 = var62.isFull();
    java.lang.Object var67 = var62.dequeue();
    boolean var68 = var62.isFull();
    boolean var69 = var62.isFull();
    java.lang.String var70 = var62.toString();
    var62.enqueue((java.lang.Object)1.0d);
    var62.setCapacity(0);
    java.lang.String var75 = var62.toString();
    var62.setCapacity(100);
    QueueFaulty var78 = new QueueFaulty();
    var78.enqueue((java.lang.Object)false);
    boolean var81 = var78.isFull();
    java.lang.String var82 = var78.toString();
    var78.setCapacity(1);
    java.lang.Object var85 = var78.dequeue();
    var78.setCapacity(0);
    var62.enqueue((java.lang.Object)var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.enqueue((java.lang.Object)var78);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[[]]"+ "'", var37.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[false]"+ "'", var55.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + false+ "'", var67.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[]"+ "'", var70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "[1.0]"+ "'", var75.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "[false]"+ "'", var82.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test174");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    boolean var11 = var10.isEmpty();
    java.lang.String var12 = var10.toString();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    boolean var19 = var13.isFull();
    boolean var20 = var13.isFull();
    java.lang.String var21 = var13.toString();
    var13.enqueue((java.lang.Object)1.0d);
    boolean var24 = var13.isFull();
    var10.enqueue((java.lang.Object)var13);
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    boolean var32 = var26.isFull();
    boolean var33 = var26.isFull();
    boolean var34 = var26.isFull();
    java.lang.String var35 = var26.toString();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isEmpty();
    java.lang.Object var40 = var36.dequeue();
    QueueFaulty var41 = new QueueFaulty();
    java.lang.String var42 = var41.toString();
    var36.enqueue((java.lang.Object)var42);
    var36.setCapacity(10);
    var26.enqueue((java.lang.Object)10);
    var13.enqueue((java.lang.Object)var26);
    var0.enqueue((java.lang.Object)var26);
    boolean var49 = var0.isFull();
    boolean var50 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var53 = var0.isEmpty();
    java.lang.Object var54 = var0.dequeue();
    var0.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test175");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    var0.enqueue((java.lang.Object)(short)1);
    QueueFaulty var11 = new QueueFaulty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    boolean var18 = var12.isFull();
    boolean var19 = var12.isFull();
    java.lang.String var20 = var12.toString();
    var12.setCapacity(0);
    var11.enqueue((java.lang.Object)var12);
    var12.setCapacity(10);
    QueueFaulty var26 = new QueueFaulty();
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    boolean var29 = var26.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    var26.enqueue((java.lang.Object)var30);
    var12.enqueue((java.lang.Object)var30);
    java.lang.Object var40 = var12.dequeue();
    var0.enqueue((java.lang.Object)var12);
    var0.setCapacity(10);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isEmpty();
    java.lang.Object var48 = var44.dequeue();
    var44.setCapacity(10);
    var44.setCapacity(1);
    var44.setCapacity(10);
    QueueFaulty var55 = new QueueFaulty();
    var55.enqueue((java.lang.Object)false);
    boolean var58 = var55.isEmpty();
    java.lang.Object var59 = var55.dequeue();
    var55.setCapacity(10);
    boolean var62 = var55.isFull();
    var55.enqueue((java.lang.Object)"hi!");
    boolean var65 = var55.isFull();
    var44.enqueue((java.lang.Object)var55);
    var0.enqueue((java.lang.Object)var55);
    boolean var68 = var55.isFull();
    boolean var69 = var55.isFull();
    var55.setCapacity((-1));
    boolean var72 = var55.isFull();
    java.lang.Object var73 = var55.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + false+ "'", var59.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test176");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    boolean var8 = var0.isFull();
    boolean var9 = var0.isEmpty();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isFull();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.Object var16 = var12.dequeue();
    QueueFaulty var17 = new QueueFaulty();
    java.lang.String var18 = var17.toString();
    var12.enqueue((java.lang.Object)var18);
    java.lang.String var20 = var12.toString();
    boolean var21 = var12.isFull();
    java.lang.Object var22 = var12.dequeue();
    QueueFaulty var23 = new QueueFaulty();
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    java.lang.String var32 = var26.toString();
    boolean var33 = var26.isFull();
    boolean var34 = var26.isEmpty();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    java.lang.String var39 = var35.toString();
    boolean var40 = var35.isFull();
    boolean var41 = var35.isEmpty();
    java.lang.Object var42 = var35.dequeue();
    java.lang.String var43 = var35.toString();
    boolean var44 = var35.isFull();
    java.lang.String var45 = var35.toString();
    var26.enqueue((java.lang.Object)var35);
    var23.enqueue((java.lang.Object)var26);
    var12.enqueue((java.lang.Object)var23);
    java.lang.String var49 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    boolean var51 = var12.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[[]]"+ "'", var20.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[false]"+ "'", var39.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + false+ "'", var42.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[[[[]]]]"+ "'", var49.equals("[[[[]]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test177");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var19.isFull();
    var19.setCapacity(10);
    java.lang.Object var32 = var19.dequeue();
    boolean var33 = var19.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test178");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isEmpty();
    java.lang.Object var17 = var13.dequeue();
    QueueFaulty var18 = new QueueFaulty();
    java.lang.String var19 = var18.toString();
    var13.enqueue((java.lang.Object)var19);
    var13.setCapacity(10);
    java.lang.Object var23 = var13.dequeue();
    boolean var24 = var13.isEmpty();
    QueueFaulty var25 = new QueueFaulty();
    java.lang.String var26 = var25.toString();
    var25.setCapacity(1);
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isFull();
    boolean var33 = var29.isFull();
    java.lang.Object var34 = var29.dequeue();
    java.lang.String var35 = var29.toString();
    var25.enqueue((java.lang.Object)var29);
    boolean var37 = var25.isEmpty();
    boolean var38 = var25.isFull();
    var25.setCapacity(10);
    QueueFaulty var41 = new QueueFaulty();
    var41.enqueue((java.lang.Object)false);
    boolean var44 = var41.isFull();
    var41.enqueue((java.lang.Object)0.0f);
    var25.enqueue((java.lang.Object)var41);
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isFull();
    boolean var52 = var48.isFull();
    java.lang.Object var53 = var48.dequeue();
    var48.enqueue((java.lang.Object)1.0f);
    java.lang.String var56 = var48.toString();
    java.lang.String var57 = var48.toString();
    var48.setCapacity(10);
    boolean var60 = var48.isFull();
    var25.enqueue((java.lang.Object)var60);
    var13.enqueue((java.lang.Object)var60);
    var1.enqueue((java.lang.Object)var60);
    java.lang.Object var64 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + false+ "'", var53.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[1.0]"+ "'", var56.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[1.0]"+ "'", var57.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + false+ "'", var64.equals(false));

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test179");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.setCapacity(0);
    var10.enqueue((java.lang.Object)var11);
    var11.setCapacity(10);
    QueueFaulty var25 = new QueueFaulty();
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isFull();
    boolean var33 = var29.isFull();
    java.lang.Object var34 = var29.dequeue();
    var29.enqueue((java.lang.Object)1.0f);
    var25.enqueue((java.lang.Object)var29);
    var11.enqueue((java.lang.Object)var29);
    boolean var39 = var11.isEmpty();
    boolean var40 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var40);
    var0.setCapacity(0);
    java.lang.Object var44 = var0.dequeue();
    java.lang.String var45 = var0.toString();
    var0.setCapacity(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var48 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + false+ "'", var44.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test180");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.String var14 = var10.toString();
    boolean var15 = var10.isFull();
    boolean var16 = var10.isEmpty();
    java.lang.Object var17 = var10.dequeue();
    java.lang.String var18 = var10.toString();
    boolean var19 = var10.isFull();
    var0.enqueue((java.lang.Object)var19);
    boolean var21 = var0.isEmpty();
    boolean var22 = var0.isEmpty();
    boolean var23 = var0.isEmpty();
    java.lang.String var24 = var0.toString();
    java.lang.Object var25 = var0.dequeue();
    boolean var26 = var0.isEmpty();
    var0.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[false]"+ "'", var14.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[false]"+ "'", var24.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test181");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity((-1));
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.setCapacity(0);
    var16.setCapacity(0);
    QueueFaulty var29 = new QueueFaulty();
    var29.setCapacity(100);
    QueueFaulty var32 = new QueueFaulty();
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isFull();
    boolean var37 = var33.isFull();
    java.lang.Object var38 = var33.dequeue();
    boolean var39 = var33.isFull();
    boolean var40 = var33.isFull();
    java.lang.String var41 = var33.toString();
    var33.setCapacity(0);
    var32.enqueue((java.lang.Object)var33);
    boolean var45 = var33.isEmpty();
    var29.enqueue((java.lang.Object)var45);
    var16.enqueue((java.lang.Object)var29);
    var0.enqueue((java.lang.Object)var29);
    boolean var49 = var29.isEmpty();
    boolean var50 = var29.isFull();
    boolean var51 = var29.isFull();
    boolean var52 = var29.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + false+ "'", var38.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test182");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    var11.enqueue((java.lang.Object)1.0f);
    java.lang.String var19 = var11.toString();
    java.lang.String var20 = var11.toString();
    boolean var21 = var11.isEmpty();
    java.lang.Object var22 = var11.dequeue();
    var0.enqueue(var22);
    boolean var24 = var0.isFull();
    boolean var25 = var0.isFull();
    java.lang.String var26 = var0.toString();
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    var27.enqueue((java.lang.Object)1.0f);
    java.lang.Object var35 = var27.dequeue();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isEmpty();
    java.lang.Object var40 = var36.dequeue();
    boolean var41 = var36.isFull();
    boolean var42 = var36.isEmpty();
    var27.enqueue((java.lang.Object)var36);
    var0.enqueue((java.lang.Object)var27);
    var0.setCapacity(0);
    java.lang.Object var47 = var0.dequeue();
    boolean var48 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[1.0]"+ "'", var19.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[1.0]"+ "'", var20.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 1.0f+ "'", var22.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[1.0]"+ "'", var26.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 1.0f+ "'", var35.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 1.0f+ "'", var47.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test183");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    var11.enqueue((java.lang.Object)1.0f);
    java.lang.String var19 = var11.toString();
    java.lang.String var20 = var11.toString();
    boolean var21 = var11.isEmpty();
    java.lang.Object var22 = var11.dequeue();
    var0.enqueue(var22);
    boolean var24 = var0.isFull();
    java.lang.String var25 = var0.toString();
    boolean var26 = var0.isEmpty();
    boolean var27 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[1.0]"+ "'", var19.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[1.0]"+ "'", var20.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 1.0f+ "'", var22.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[1.0]"+ "'", var25.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test184");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    java.lang.Object var11 = var0.dequeue();
    java.lang.String var12 = var0.toString();
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1.0f+ "'", var11.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test185");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    java.lang.Object var14 = var0.dequeue();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.Object var19 = var15.dequeue();
    var15.setCapacity(10);
    boolean var22 = var15.isFull();
    java.lang.String var23 = var15.toString();
    boolean var24 = var15.isEmpty();
    QueueFaulty var25 = new QueueFaulty();
    java.lang.String var26 = var25.toString();
    var25.setCapacity(1);
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isFull();
    boolean var33 = var29.isFull();
    java.lang.Object var34 = var29.dequeue();
    java.lang.String var35 = var29.toString();
    var25.enqueue((java.lang.Object)var29);
    var15.enqueue((java.lang.Object)var25);
    var0.enqueue((java.lang.Object)var15);
    QueueFaulty var39 = new QueueFaulty();
    var39.setCapacity(100);
    boolean var42 = var39.isEmpty();
    var39.setCapacity(100);
    var0.enqueue((java.lang.Object)var39);
    boolean var46 = var39.isFull();
    java.lang.String var47 = var39.toString();
    var39.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 1.0f+ "'", var14.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test186");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(1);
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isEmpty();
    var0.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test187");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    var0.setCapacity(10);
    java.lang.Object var10 = var0.dequeue();
    boolean var11 = var0.isEmpty();
    java.lang.String var12 = var0.toString();
    boolean var13 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test188");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    java.lang.Object var13 = var0.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var14 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 1.0d+ "'", var13.equals(1.0d));

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test189");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    boolean var22 = var7.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    java.lang.Object var27 = var23.dequeue();
    var23.setCapacity(10);
    boolean var30 = var23.isFull();
    java.lang.String var31 = var23.toString();
    boolean var32 = var23.isEmpty();
    java.lang.String var33 = var23.toString();
    boolean var34 = var23.isEmpty();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    java.lang.String var39 = var35.toString();
    boolean var40 = var35.isEmpty();
    boolean var41 = var35.isFull();
    var23.enqueue((java.lang.Object)var35);
    var7.enqueue((java.lang.Object)var35);
    boolean var44 = var35.isEmpty();
    QueueFaulty var45 = new QueueFaulty();
    QueueFaulty var46 = new QueueFaulty();
    var46.enqueue((java.lang.Object)false);
    boolean var49 = var46.isFull();
    boolean var50 = var46.isFull();
    java.lang.Object var51 = var46.dequeue();
    boolean var52 = var46.isFull();
    boolean var53 = var46.isFull();
    java.lang.String var54 = var46.toString();
    var46.setCapacity(0);
    var45.enqueue((java.lang.Object)var46);
    var46.setCapacity(10);
    QueueFaulty var60 = new QueueFaulty();
    boolean var61 = var60.isEmpty();
    boolean var62 = var60.isEmpty();
    boolean var63 = var60.isEmpty();
    QueueFaulty var64 = new QueueFaulty();
    var64.enqueue((java.lang.Object)false);
    boolean var67 = var64.isFull();
    boolean var68 = var64.isFull();
    java.lang.Object var69 = var64.dequeue();
    var64.enqueue((java.lang.Object)1.0f);
    var60.enqueue((java.lang.Object)var64);
    var46.enqueue((java.lang.Object)var64);
    boolean var74 = var46.isEmpty();
    java.lang.String var75 = var46.toString();
    QueueFaulty var76 = new QueueFaulty();
    boolean var77 = var76.isEmpty();
    java.lang.String var78 = var76.toString();
    var76.setCapacity((-1));
    boolean var81 = var76.isEmpty();
    boolean var82 = var76.isFull();
    var46.enqueue((java.lang.Object)var76);
    var76.setCapacity((-1));
    var76.setCapacity(1);
    java.lang.String var88 = var76.toString();
    var76.setCapacity(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.enqueue((java.lang.Object)1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[false]"+ "'", var39.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + false+ "'", var51.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + false+ "'", var69.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "[[1.0]]"+ "'", var75.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "[]"+ "'", var78.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "[]"+ "'", var88.equals("[]"));

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test190");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(1);
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isEmpty();
    java.lang.String var12 = var0.toString();
    java.lang.String var13 = var0.toString();
    java.lang.String var14 = var0.toString();
    java.lang.String var15 = var0.toString();
    var0.setCapacity((-1));
    boolean var18 = var0.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    boolean var25 = var19.isFull();
    boolean var26 = var19.isFull();
    java.lang.String var27 = var19.toString();
    var19.setCapacity(0);
    var19.setCapacity(0);
    QueueFaulty var32 = new QueueFaulty();
    var32.setCapacity(100);
    QueueFaulty var35 = new QueueFaulty();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    boolean var42 = var36.isFull();
    boolean var43 = var36.isFull();
    java.lang.String var44 = var36.toString();
    var36.setCapacity(0);
    var35.enqueue((java.lang.Object)var36);
    boolean var48 = var36.isEmpty();
    var32.enqueue((java.lang.Object)var48);
    var19.enqueue((java.lang.Object)var32);
    var0.enqueue((java.lang.Object)var32);
    boolean var52 = var32.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test191");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isFull();
    java.lang.Object var13 = var0.dequeue();
    var0.setCapacity(10);
    boolean var16 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 1.0f+ "'", var13.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test192");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    var0.setCapacity(1);
    boolean var14 = var0.isFull();
    var0.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test193");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var3 = var0.dequeue();
    java.lang.String var4 = var0.toString();
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (short)(-1)+ "'", var3.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test194");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    java.lang.String var7 = var6.toString();
    var6.setCapacity(1);
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    java.lang.String var16 = var10.toString();
    var6.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var10);
    boolean var19 = var10.isFull();
    var10.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test195");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    java.lang.String var7 = var6.toString();
    var6.setCapacity(1);
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    java.lang.String var16 = var10.toString();
    var6.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var10);
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var19.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    boolean var30 = var0.isFull();
    boolean var31 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test196");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    var0.setCapacity(0);
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isEmpty();
    java.lang.Object var10 = var6.dequeue();
    java.lang.String var11 = var6.toString();
    boolean var12 = var6.isEmpty();
    var6.setCapacity(0);
    boolean var15 = var6.isEmpty();
    boolean var16 = var6.isFull();
    var0.enqueue((java.lang.Object)var6);
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isEmpty();
    java.lang.Object var22 = var18.dequeue();
    java.lang.String var23 = var18.toString();
    boolean var24 = var18.isEmpty();
    boolean var25 = var18.isEmpty();
    boolean var26 = var18.isFull();
    boolean var27 = var18.isFull();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    java.lang.Object var32 = var28.dequeue();
    java.lang.String var33 = var28.toString();
    boolean var34 = var28.isEmpty();
    var28.setCapacity(0);
    boolean var37 = var28.isEmpty();
    java.lang.String var38 = var28.toString();
    var18.enqueue((java.lang.Object)var28);
    var0.enqueue((java.lang.Object)var28);
    boolean var41 = var28.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test197");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isFull();
    boolean var2 = var0.isFull();
    boolean var3 = var0.isEmpty();
    var0.setCapacity((-1));
    var0.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test198");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    boolean var24 = var0.isEmpty();
    java.lang.Object var25 = var0.dequeue();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    boolean var32 = var26.isFull();
    boolean var33 = var26.isFull();
    java.lang.String var34 = var26.toString();
    var26.enqueue((java.lang.Object)1.0d);
    var26.setCapacity(0);
    var0.enqueue((java.lang.Object)var26);
    var0.setCapacity(1);
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 0+ "'", var25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[]"+ "'", var34.equals("[]"));

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test199");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.Object var18 = var14.dequeue();
    java.lang.String var19 = var14.toString();
    boolean var20 = var14.isEmpty();
    boolean var21 = var14.isFull();
    java.lang.String var22 = var14.toString();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    java.lang.Object var27 = var23.dequeue();
    java.lang.String var28 = var23.toString();
    boolean var29 = var23.isFull();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isEmpty();
    boolean var34 = var30.isFull();
    var30.setCapacity(10);
    boolean var37 = var30.isFull();
    var23.enqueue((java.lang.Object)var30);
    boolean var39 = var23.isFull();
    var14.enqueue((java.lang.Object)var39);
    java.lang.String var41 = var14.toString();
    var0.enqueue((java.lang.Object)var14);
    java.lang.Object var43 = var14.dequeue();
    var14.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[false]"+ "'", var41.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test200");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isEmpty();
    boolean var24 = var7.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var25 = var7.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test201");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    QueueFaulty var7 = new QueueFaulty();
    boolean var8 = var7.isEmpty();
    java.lang.String var9 = var7.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.enqueue((java.lang.Object)1.0d);
    boolean var21 = var10.isFull();
    var7.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var7);
    java.lang.Object var24 = var0.dequeue();
    var0.setCapacity((-1));
    boolean var27 = var0.isEmpty();
    java.lang.String var28 = var0.toString();
    boolean var29 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test202");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    boolean var20 = var0.isFull();
    var0.setCapacity(10);
    boolean var23 = var0.isFull();
    boolean var24 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test203");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    boolean var16 = var12.isFull();
    boolean var17 = var12.isEmpty();
    java.lang.String var18 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    java.lang.Object var20 = var12.dequeue();
    boolean var21 = var12.isFull();
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isFull();
    boolean var26 = var22.isFull();
    java.lang.Object var27 = var22.dequeue();
    boolean var28 = var22.isFull();
    boolean var29 = var22.isFull();
    java.lang.String var30 = var22.toString();
    var22.setCapacity(1);
    boolean var33 = var22.isEmpty();
    boolean var34 = var22.isFull();
    boolean var35 = var22.isFull();
    var12.enqueue((java.lang.Object)var35);
    QueueFaulty var37 = new QueueFaulty();
    var37.enqueue((java.lang.Object)false);
    boolean var40 = var37.isFull();
    java.lang.String var41 = var37.toString();
    var37.setCapacity(1);
    boolean var44 = var37.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.enqueue((java.lang.Object)var37);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[false]"+ "'", var18.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[false]"+ "'", var41.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test204");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    var0.setCapacity(0);
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isEmpty();
    java.lang.Object var10 = var6.dequeue();
    java.lang.String var11 = var6.toString();
    boolean var12 = var6.isEmpty();
    var6.setCapacity(0);
    boolean var15 = var6.isEmpty();
    boolean var16 = var6.isFull();
    var0.enqueue((java.lang.Object)var6);
    java.lang.Object var18 = var0.dequeue();
    boolean var19 = var0.isFull();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test205");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    var0.setCapacity(0);
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isEmpty();
    java.lang.Object var10 = var6.dequeue();
    java.lang.String var11 = var6.toString();
    boolean var12 = var6.isEmpty();
    var6.setCapacity(0);
    boolean var15 = var6.isEmpty();
    boolean var16 = var6.isFull();
    var0.enqueue((java.lang.Object)var6);
    boolean var18 = var0.isFull();
    var0.setCapacity(1);
    boolean var21 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var24 = var0.isFull();
    var0.setCapacity(1);
    boolean var27 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test206");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    var6.enqueue((java.lang.Object)1.0f);
    var6.setCapacity(10);
    var0.enqueue((java.lang.Object)var6);
    boolean var17 = var0.isFull();
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isEmpty();
    boolean var22 = var18.isFull();
    var18.setCapacity(10);
    boolean var25 = var18.isEmpty();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    java.lang.String var32 = var26.toString();
    var18.enqueue((java.lang.Object)var32);
    java.lang.Object var34 = var18.dequeue();
    var0.enqueue((java.lang.Object)var18);
    boolean var36 = var18.isEmpty();
    java.lang.String var37 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[[]]"+ "'", var37.equals("[[]]"));

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test207");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    boolean var22 = var10.isEmpty();
    boolean var23 = var10.isEmpty();
    var10.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    java.lang.Object var27 = var0.dequeue();
    var0.setCapacity(1);
    boolean var30 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var31 = var0.dequeue();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test208");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(0);
    boolean var11 = var0.isEmpty();
    var0.setCapacity(100);
    var0.setCapacity(100);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.setCapacity((-1));
    java.lang.String var27 = var16.toString();
    boolean var28 = var16.isEmpty();
    boolean var29 = var16.isFull();
    boolean var30 = var16.isEmpty();
    var0.enqueue((java.lang.Object)var30);
    QueueFaulty var32 = new QueueFaulty();
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.toString();
    var32.setCapacity(0);
    java.lang.String var37 = var32.toString();
    java.lang.String var38 = var32.toString();
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isEmpty();
    java.lang.Object var43 = var39.dequeue();
    var39.setCapacity(10);
    var39.setCapacity(1);
    var39.setCapacity(10);
    QueueFaulty var50 = new QueueFaulty();
    var50.enqueue((java.lang.Object)false);
    boolean var53 = var50.isEmpty();
    java.lang.Object var54 = var50.dequeue();
    var50.setCapacity(10);
    boolean var57 = var50.isFull();
    var50.enqueue((java.lang.Object)"hi!");
    boolean var60 = var50.isFull();
    var39.enqueue((java.lang.Object)var50);
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)false);
    boolean var65 = var62.isFull();
    boolean var66 = var62.isFull();
    java.lang.Object var67 = var62.dequeue();
    boolean var68 = var62.isFull();
    boolean var69 = var62.isFull();
    java.lang.String var70 = var62.toString();
    var62.setCapacity(0);
    var62.setCapacity(0);
    QueueFaulty var75 = new QueueFaulty();
    var75.setCapacity(100);
    QueueFaulty var78 = new QueueFaulty();
    QueueFaulty var79 = new QueueFaulty();
    var79.enqueue((java.lang.Object)false);
    boolean var82 = var79.isFull();
    boolean var83 = var79.isFull();
    java.lang.Object var84 = var79.dequeue();
    boolean var85 = var79.isFull();
    boolean var86 = var79.isFull();
    java.lang.String var87 = var79.toString();
    var79.setCapacity(0);
    var78.enqueue((java.lang.Object)var79);
    boolean var91 = var79.isEmpty();
    var75.enqueue((java.lang.Object)var91);
    var62.enqueue((java.lang.Object)var75);
    java.lang.String var94 = var75.toString();
    var39.enqueue((java.lang.Object)var75);
    java.lang.Object var96 = var75.dequeue();
    var32.enqueue(var96);
    var0.enqueue(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[]"+ "'", var34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + false+ "'", var54.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + false+ "'", var67.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[]"+ "'", var70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + false+ "'", var84.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "[]"+ "'", var87.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "[true]"+ "'", var94.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + true+ "'", var96.equals(true));

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test209");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var10 = var0.isFull();
    java.lang.String var11 = var0.toString();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    var12.enqueue((java.lang.Object)1.0f);
    var12.setCapacity(10);
    boolean var22 = var12.isEmpty();
    boolean var23 = var12.isEmpty();
    var0.enqueue((java.lang.Object)var23);
    boolean var25 = var0.isEmpty();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    boolean var30 = var26.isFull();
    java.lang.String var31 = var26.toString();
    java.lang.Object var32 = var26.dequeue();
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isEmpty();
    java.lang.Object var37 = var33.dequeue();
    var33.setCapacity(10);
    boolean var40 = var33.isFull();
    var33.setCapacity(1);
    boolean var43 = var33.isEmpty();
    var33.setCapacity(10);
    var26.enqueue((java.lang.Object)var33);
    boolean var47 = var26.isEmpty();
    var26.setCapacity(0);
    var0.enqueue((java.lang.Object)var26);
    java.lang.String var51 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[false]"+ "'", var31.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[false, [[]]]"+ "'", var51.equals("[false, [[]]]"));

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test210");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(1);
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    boolean var14 = var0.isEmpty();
    java.lang.String var15 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var16 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test211");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    var7.enqueue((java.lang.Object)var24);
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    java.lang.String var38 = var35.toString();
    boolean var39 = var35.isEmpty();
    java.lang.String var40 = var35.toString();
    boolean var41 = var35.isFull();
    boolean var42 = var35.isEmpty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    boolean var51 = var43.isFull();
    boolean var52 = var43.isEmpty();
    var35.enqueue((java.lang.Object)var43);
    var35.setCapacity(0);
    var24.enqueue((java.lang.Object)0);
    java.lang.Object var57 = var24.dequeue();
    var24.setCapacity((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var60 = var24.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[false]"+ "'", var40.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 0+ "'", var57.equals(0));

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test212");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.Object var10 = var0.dequeue();
    QueueFaulty var11 = new QueueFaulty();
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    boolean var21 = var14.isFull();
    boolean var22 = var14.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    java.lang.String var27 = var23.toString();
    boolean var28 = var23.isFull();
    boolean var29 = var23.isEmpty();
    java.lang.Object var30 = var23.dequeue();
    java.lang.String var31 = var23.toString();
    boolean var32 = var23.isFull();
    java.lang.String var33 = var23.toString();
    var14.enqueue((java.lang.Object)var23);
    var11.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var11);
    java.lang.Object var37 = var11.dequeue();
    var11.setCapacity((-1));
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isEmpty();
    java.lang.String var44 = var40.toString();
    boolean var45 = var40.isFull();
    boolean var46 = var40.isEmpty();
    java.lang.Object var47 = var40.dequeue();
    java.lang.String var48 = var40.toString();
    boolean var49 = var40.isFull();
    java.lang.String var50 = var40.toString();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isEmpty();
    java.lang.String var55 = var51.toString();
    boolean var56 = var51.isFull();
    boolean var57 = var51.isEmpty();
    java.lang.Object var58 = var51.dequeue();
    var40.enqueue((java.lang.Object)var51);
    boolean var60 = var40.isFull();
    QueueFaulty var61 = new QueueFaulty();
    java.lang.String var62 = var61.toString();
    var61.setCapacity(1);
    QueueFaulty var65 = new QueueFaulty();
    var65.enqueue((java.lang.Object)false);
    boolean var68 = var65.isFull();
    boolean var69 = var65.isFull();
    java.lang.Object var70 = var65.dequeue();
    java.lang.String var71 = var65.toString();
    var61.enqueue((java.lang.Object)var65);
    boolean var73 = var61.isEmpty();
    boolean var74 = var61.isEmpty();
    java.lang.String var75 = var61.toString();
    var61.setCapacity(100);
    boolean var78 = var61.isFull();
    var61.setCapacity(10);
    boolean var81 = var61.isFull();
    var40.enqueue((java.lang.Object)var61);
    var11.enqueue((java.lang.Object)var61);
    java.lang.Object var84 = var11.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[]]"+ "'", var8.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[false]"+ "'", var27.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[false]"+ "'", var44.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[false]"+ "'", var55.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + false+ "'", var58.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[]"+ "'", var62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + false+ "'", var70.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[]"+ "'", var71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "[[]]"+ "'", var75.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test213");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    QueueFaulty var21 = new QueueFaulty();
    boolean var22 = var21.isEmpty();
    java.lang.String var23 = var21.toString();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    boolean var30 = var24.isFull();
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    var24.enqueue((java.lang.Object)1.0d);
    boolean var35 = var24.isFull();
    var21.enqueue((java.lang.Object)var24);
    QueueFaulty var37 = new QueueFaulty();
    var37.enqueue((java.lang.Object)false);
    boolean var40 = var37.isFull();
    boolean var41 = var37.isFull();
    java.lang.Object var42 = var37.dequeue();
    boolean var43 = var37.isFull();
    boolean var44 = var37.isFull();
    java.lang.String var45 = var37.toString();
    var37.enqueue((java.lang.Object)1.0d);
    var37.setCapacity(0);
    boolean var50 = var37.isEmpty();
    var37.setCapacity(0);
    var24.enqueue((java.lang.Object)var37);
    var24.setCapacity((-1));
    var7.enqueue((java.lang.Object)(-1));
    java.lang.String var57 = var7.toString();
    boolean var58 = var7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + false+ "'", var42.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[-1]"+ "'", var57.equals("[-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test214");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    java.lang.String var15 = var0.toString();
    boolean var16 = var0.isEmpty();
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isEmpty();
    java.lang.Object var21 = var17.dequeue();
    java.lang.String var22 = var17.toString();
    QueueFaulty var23 = new QueueFaulty();
    java.lang.String var24 = var23.toString();
    var23.setCapacity(1);
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    java.lang.String var33 = var27.toString();
    var23.enqueue((java.lang.Object)var27);
    var17.enqueue((java.lang.Object)var27);
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    var36.enqueue((java.lang.Object)1.0f);
    var36.setCapacity(10);
    var17.enqueue((java.lang.Object)10);
    boolean var47 = var17.isFull();
    var0.enqueue((java.lang.Object)var17);
    var17.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[1.0]"+ "'", var14.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[1.0]"+ "'", var15.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test215");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var10 = var0.isFull();
    java.lang.String var11 = var0.toString();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    var12.enqueue((java.lang.Object)1.0f);
    var12.setCapacity(10);
    boolean var22 = var12.isEmpty();
    boolean var23 = var12.isEmpty();
    var0.enqueue((java.lang.Object)var23);
    var0.setCapacity((-1));
    boolean var27 = var0.isEmpty();
    var0.setCapacity((-1));
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test216");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isEmpty();
    java.lang.Object var12 = var8.dequeue();
    var8.setCapacity(10);
    boolean var15 = var8.isFull();
    var0.enqueue((java.lang.Object)var8);
    boolean var17 = var0.isFull();
    java.lang.Object var18 = var0.dequeue();
    var0.setCapacity(1);
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isEmpty();
    java.lang.Object var25 = var21.dequeue();
    java.lang.String var26 = var21.toString();
    QueueFaulty var27 = new QueueFaulty();
    java.lang.String var28 = var27.toString();
    var27.setCapacity(1);
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isFull();
    boolean var35 = var31.isFull();
    java.lang.Object var36 = var31.dequeue();
    java.lang.String var37 = var31.toString();
    var27.enqueue((java.lang.Object)var31);
    var21.enqueue((java.lang.Object)var31);
    boolean var40 = var31.isFull();
    java.lang.String var41 = var31.toString();
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    java.lang.String var48 = var42.toString();
    boolean var49 = var42.isFull();
    boolean var50 = var42.isEmpty();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isEmpty();
    java.lang.String var55 = var51.toString();
    boolean var56 = var51.isFull();
    boolean var57 = var51.isEmpty();
    java.lang.Object var58 = var51.dequeue();
    java.lang.String var59 = var51.toString();
    boolean var60 = var51.isFull();
    java.lang.String var61 = var51.toString();
    var42.enqueue((java.lang.Object)var51);
    QueueFaulty var63 = new QueueFaulty();
    var63.enqueue((java.lang.Object)false);
    boolean var66 = var63.isFull();
    boolean var67 = var63.isFull();
    java.lang.Object var68 = var63.dequeue();
    boolean var69 = var63.isFull();
    boolean var70 = var63.isFull();
    java.lang.String var71 = var63.toString();
    QueueFaulty var72 = new QueueFaulty();
    var72.enqueue((java.lang.Object)false);
    boolean var75 = var72.isFull();
    boolean var76 = var72.isFull();
    java.lang.Object var77 = var72.dequeue();
    boolean var78 = var72.isFull();
    boolean var79 = var72.isFull();
    java.lang.String var80 = var72.toString();
    var72.enqueue((java.lang.Object)1.0d);
    var72.setCapacity(0);
    var63.enqueue((java.lang.Object)0);
    java.lang.String var86 = var63.toString();
    var63.setCapacity(10);
    boolean var89 = var63.isFull();
    var51.enqueue((java.lang.Object)var63);
    java.lang.Object var91 = var51.dequeue();
    var31.enqueue((java.lang.Object)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var51);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + 1.0f+ "'", var18.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[false]"+ "'", var55.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + false+ "'", var58.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + false+ "'", var68.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[]"+ "'", var71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + false+ "'", var77.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[]"+ "'", var80.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "[0]"+ "'", var86.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test217");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    java.lang.String var10 = var0.toString();
    java.lang.String var11 = var0.toString();
    java.lang.String var12 = var0.toString();
    java.lang.String var13 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test218");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.enqueue((java.lang.Object)"hi!");
    boolean var10 = var0.isFull();
    QueueFaulty var11 = new QueueFaulty();
    boolean var12 = var11.isEmpty();
    java.lang.String var13 = var11.toString();
    var0.enqueue((java.lang.Object)var11);
    boolean var15 = var0.isEmpty();
    boolean var16 = var0.isEmpty();
    boolean var17 = var0.isEmpty();
    java.lang.Object var18 = var0.dequeue();
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test219");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(1);
    var0.setCapacity(10);
    java.lang.String var12 = var0.toString();
    java.lang.String var13 = var0.toString();
    boolean var14 = var0.isFull();
    boolean var15 = var0.isFull();
    boolean var16 = var0.isEmpty();
    boolean var17 = var0.isFull();
    java.lang.String var18 = var0.toString();
    java.lang.String var19 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test220");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    boolean var14 = var0.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.String var19 = var15.toString();
    boolean var20 = var15.isFull();
    boolean var21 = var15.isEmpty();
    java.lang.Object var22 = var15.dequeue();
    java.lang.String var23 = var15.toString();
    boolean var24 = var15.isFull();
    java.lang.String var25 = var15.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.String var30 = var26.toString();
    boolean var31 = var26.isFull();
    boolean var32 = var26.isEmpty();
    java.lang.Object var33 = var26.dequeue();
    var15.enqueue((java.lang.Object)var26);
    java.lang.Object var35 = var15.dequeue();
    java.lang.String var36 = var15.toString();
    var15.setCapacity((-1));
    var0.enqueue((java.lang.Object)(-1));
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isEmpty();
    boolean var44 = var40.isFull();
    var40.setCapacity(100);
    boolean var47 = var40.isEmpty();
    java.lang.Object var48 = var40.dequeue();
    boolean var49 = var40.isFull();
    boolean var50 = var40.isEmpty();
    boolean var51 = var40.isFull();
    var0.enqueue((java.lang.Object)var40);
    var40.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[false]"+ "'", var30.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test221");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isEmpty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.Object var16 = var12.dequeue();
    var12.setCapacity(10);
    boolean var19 = var12.isFull();
    var12.setCapacity(1);
    var12.setCapacity(10);
    java.lang.String var24 = var12.toString();
    java.lang.String var25 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isEmpty();
    java.lang.Object var31 = var27.dequeue();
    var27.setCapacity(10);
    boolean var34 = var27.isFull();
    java.lang.String var35 = var27.toString();
    boolean var36 = var27.isEmpty();
    QueueFaulty var37 = new QueueFaulty();
    java.lang.String var38 = var37.toString();
    var37.setCapacity(1);
    QueueFaulty var41 = new QueueFaulty();
    var41.enqueue((java.lang.Object)false);
    boolean var44 = var41.isFull();
    boolean var45 = var41.isFull();
    java.lang.Object var46 = var41.dequeue();
    java.lang.String var47 = var41.toString();
    var37.enqueue((java.lang.Object)var41);
    var27.enqueue((java.lang.Object)var37);
    java.lang.Object var50 = var27.dequeue();
    var27.setCapacity(10);
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isFull();
    boolean var57 = var53.isFull();
    java.lang.Object var58 = var53.dequeue();
    boolean var59 = var53.isFull();
    boolean var60 = var53.isFull();
    boolean var61 = var53.isFull();
    java.lang.String var62 = var53.toString();
    var53.setCapacity(10);
    var53.setCapacity(0);
    boolean var67 = var53.isFull();
    var27.enqueue((java.lang.Object)var67);
    var12.enqueue((java.lang.Object)var27);
    java.lang.Object var70 = var12.dequeue();
    boolean var71 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + false+ "'", var46.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + false+ "'", var58.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[]"+ "'", var62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test222");


    QueueFaulty var0 = new QueueFaulty();
    var0.setCapacity(100);
    QueueFaulty var3 = new QueueFaulty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    boolean var10 = var4.isFull();
    boolean var11 = var4.isFull();
    java.lang.String var12 = var4.toString();
    var4.setCapacity(0);
    var3.enqueue((java.lang.Object)var4);
    boolean var16 = var4.isEmpty();
    var0.enqueue((java.lang.Object)var16);
    java.lang.String var18 = var0.toString();
    boolean var19 = var0.isEmpty();
    boolean var20 = var0.isFull();
    boolean var21 = var0.isEmpty();
    boolean var22 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[true]"+ "'", var18.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test223");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    java.lang.Object var28 = var0.dequeue();
    var0.setCapacity(100);
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test224");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    java.lang.Object var14 = var0.dequeue();
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    java.lang.String var17 = var15.toString();
    var15.setCapacity((-1));
    boolean var20 = var15.isEmpty();
    QueueFaulty var21 = new QueueFaulty();
    boolean var22 = var21.isEmpty();
    java.lang.String var23 = var21.toString();
    var21.setCapacity(0);
    var15.enqueue((java.lang.Object)var21);
    java.lang.Object var27 = var15.dequeue();
    boolean var28 = var15.isEmpty();
    var15.setCapacity(100);
    boolean var31 = var15.isEmpty();
    var0.enqueue((java.lang.Object)var15);
    boolean var33 = var15.isFull();
    var15.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test225");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(100);
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    boolean var30 = var24.isFull();
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    var24.setCapacity((-1));
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    java.lang.Object var39 = var35.dequeue();
    var35.setCapacity(10);
    boolean var42 = var35.isFull();
    java.lang.String var43 = var35.toString();
    boolean var44 = var35.isEmpty();
    QueueFaulty var45 = new QueueFaulty();
    java.lang.String var46 = var45.toString();
    var45.setCapacity(1);
    QueueFaulty var49 = new QueueFaulty();
    var49.enqueue((java.lang.Object)false);
    boolean var52 = var49.isFull();
    boolean var53 = var49.isFull();
    java.lang.Object var54 = var49.dequeue();
    java.lang.String var55 = var49.toString();
    var45.enqueue((java.lang.Object)var49);
    var35.enqueue((java.lang.Object)var45);
    boolean var58 = var35.isEmpty();
    var24.enqueue((java.lang.Object)var35);
    java.lang.Object var60 = var35.dequeue();
    boolean var61 = var35.isFull();
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)false);
    boolean var65 = var62.isFull();
    boolean var66 = var62.isFull();
    java.lang.Object var67 = var62.dequeue();
    java.lang.String var68 = var62.toString();
    boolean var69 = var62.isFull();
    boolean var70 = var62.isEmpty();
    QueueFaulty var71 = new QueueFaulty();
    var71.enqueue((java.lang.Object)false);
    boolean var74 = var71.isEmpty();
    java.lang.String var75 = var71.toString();
    boolean var76 = var71.isFull();
    boolean var77 = var71.isEmpty();
    java.lang.Object var78 = var71.dequeue();
    java.lang.String var79 = var71.toString();
    boolean var80 = var71.isFull();
    java.lang.String var81 = var71.toString();
    var62.enqueue((java.lang.Object)var71);
    java.lang.String var83 = var62.toString();
    var35.enqueue((java.lang.Object)var83);
    boolean var85 = var35.isEmpty();
    var7.enqueue((java.lang.Object)var85);
    boolean var87 = var7.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + false+ "'", var54.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + false+ "'", var67.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "[false]"+ "'", var75.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + false+ "'", var78.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "[]"+ "'", var79.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[]"+ "'", var81.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "[[]]"+ "'", var83.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test226");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isFull();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isFull();
    boolean var11 = var7.isFull();
    java.lang.Object var12 = var7.dequeue();
    java.lang.String var13 = var7.toString();
    boolean var14 = var7.isFull();
    boolean var15 = var7.isFull();
    boolean var16 = var7.isFull();
    boolean var17 = var7.isFull();
    var0.enqueue((java.lang.Object)var7);
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    java.lang.String var25 = var19.toString();
    boolean var26 = var19.isFull();
    boolean var27 = var19.isFull();
    boolean var28 = var19.isFull();
    boolean var29 = var19.isFull();
    boolean var30 = var19.isFull();
    var0.enqueue((java.lang.Object)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var32 = var19.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test227");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    boolean var20 = var11.isEmpty();
    QueueFaulty var21 = new QueueFaulty();
    java.lang.String var22 = var21.toString();
    var21.setCapacity(1);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    var21.enqueue((java.lang.Object)var25);
    var11.enqueue((java.lang.Object)var21);
    boolean var34 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var11);
    QueueFaulty var36 = new QueueFaulty();
    boolean var37 = var36.isEmpty();
    java.lang.String var38 = var36.toString();
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isFull();
    boolean var43 = var39.isFull();
    java.lang.Object var44 = var39.dequeue();
    boolean var45 = var39.isFull();
    boolean var46 = var39.isFull();
    java.lang.String var47 = var39.toString();
    var39.enqueue((java.lang.Object)1.0d);
    boolean var50 = var39.isFull();
    var36.enqueue((java.lang.Object)var39);
    QueueFaulty var52 = new QueueFaulty();
    var52.enqueue((java.lang.Object)false);
    boolean var55 = var52.isFull();
    boolean var56 = var52.isFull();
    java.lang.Object var57 = var52.dequeue();
    boolean var58 = var52.isFull();
    boolean var59 = var52.isFull();
    boolean var60 = var52.isFull();
    java.lang.String var61 = var52.toString();
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)false);
    boolean var65 = var62.isEmpty();
    java.lang.Object var66 = var62.dequeue();
    QueueFaulty var67 = new QueueFaulty();
    java.lang.String var68 = var67.toString();
    var62.enqueue((java.lang.Object)var68);
    var62.setCapacity(10);
    var52.enqueue((java.lang.Object)10);
    var39.enqueue((java.lang.Object)var52);
    var0.enqueue((java.lang.Object)var39);
    boolean var75 = var39.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + false+ "'", var44.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + false+ "'", var66.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test228");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    var0.setCapacity(0);
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isEmpty();
    java.lang.Object var10 = var6.dequeue();
    java.lang.String var11 = var6.toString();
    boolean var12 = var6.isEmpty();
    var6.setCapacity(0);
    boolean var15 = var6.isEmpty();
    boolean var16 = var6.isFull();
    var0.enqueue((java.lang.Object)var6);
    boolean var18 = var0.isFull();
    var0.setCapacity(1);
    boolean var21 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var24 = var0.isFull();
    var0.setCapacity(1);
    java.lang.Object var27 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test229");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(100);
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.setCapacity((-1));
    java.lang.String var21 = var10.toString();
    boolean var22 = var10.isEmpty();
    var10.setCapacity(1);
    var0.enqueue((java.lang.Object)1);
    java.lang.Object var26 = var0.dequeue();
    boolean var27 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 1+ "'", var26.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test230");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.setCapacity((-1));
    var11.setCapacity(0);
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    var24.enqueue((java.lang.Object)0.0f);
    java.lang.Object var30 = var24.dequeue();
    boolean var31 = var24.isEmpty();
    var11.enqueue((java.lang.Object)var31);
    java.lang.String var33 = var11.toString();
    var0.enqueue((java.lang.Object)var11);
    var11.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[false]"+ "'", var33.equals("[false]"));

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test231");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test232");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isEmpty();
    java.lang.Object var20 = var16.dequeue();
    boolean var21 = var16.isFull();
    java.lang.String var22 = var16.toString();
    boolean var23 = var16.isEmpty();
    var0.enqueue((java.lang.Object)var23);
    var0.setCapacity(10);
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test233");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    java.lang.Object var11 = var0.dequeue();
    var0.setCapacity(100);
    boolean var14 = var0.isFull();
    var0.setCapacity(0);
    boolean var17 = var0.isEmpty();
    boolean var18 = var0.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var19 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1.0f+ "'", var11.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test234");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    var7.enqueue((java.lang.Object)var24);
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    java.lang.String var38 = var35.toString();
    boolean var39 = var35.isEmpty();
    java.lang.String var40 = var35.toString();
    boolean var41 = var35.isFull();
    boolean var42 = var35.isEmpty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    boolean var51 = var43.isFull();
    boolean var52 = var43.isEmpty();
    var35.enqueue((java.lang.Object)var43);
    var35.setCapacity(0);
    var24.enqueue((java.lang.Object)0);
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    java.lang.String var60 = var57.toString();
    boolean var61 = var57.isEmpty();
    var24.enqueue((java.lang.Object)var57);
    var57.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[false]"+ "'", var40.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[false]"+ "'", var60.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test235");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    var0.setCapacity(1);
    var0.setCapacity(0);
    var0.setCapacity((-1));
    boolean var19 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test236");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.enqueue((java.lang.Object)1.0d);
    var16.setCapacity(0);
    boolean var29 = var16.isEmpty();
    var16.setCapacity(0);
    var3.enqueue((java.lang.Object)var16);
    var3.setCapacity((-1));
    QueueFaulty var35 = new QueueFaulty();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    boolean var42 = var36.isFull();
    boolean var43 = var36.isFull();
    java.lang.String var44 = var36.toString();
    var36.setCapacity(0);
    var35.enqueue((java.lang.Object)var36);
    var36.setCapacity(10);
    QueueFaulty var50 = new QueueFaulty();
    boolean var51 = var50.isEmpty();
    boolean var52 = var50.isEmpty();
    boolean var53 = var50.isEmpty();
    QueueFaulty var54 = new QueueFaulty();
    var54.enqueue((java.lang.Object)false);
    boolean var57 = var54.isFull();
    boolean var58 = var54.isFull();
    java.lang.Object var59 = var54.dequeue();
    var54.enqueue((java.lang.Object)1.0f);
    var50.enqueue((java.lang.Object)var54);
    var36.enqueue((java.lang.Object)var54);
    boolean var64 = var36.isEmpty();
    boolean var65 = var36.isEmpty();
    boolean var66 = var36.isFull();
    java.lang.String var67 = var36.toString();
    var36.setCapacity((-1));
    var3.enqueue((java.lang.Object)var36);
    boolean var71 = var3.isFull();
    java.lang.Object var72 = var3.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var73 = var3.toString();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + false+ "'", var59.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[[1.0]]"+ "'", var67.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test237");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(0);
    boolean var11 = var0.isEmpty();
    var0.setCapacity(1);
    java.lang.String var14 = var0.toString();
    boolean var15 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test238");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    boolean var20 = var11.isEmpty();
    QueueFaulty var21 = new QueueFaulty();
    java.lang.String var22 = var21.toString();
    var21.setCapacity(1);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    var21.enqueue((java.lang.Object)var25);
    var11.enqueue((java.lang.Object)var21);
    boolean var34 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var11);
    QueueFaulty var36 = new QueueFaulty();
    boolean var37 = var36.isEmpty();
    java.lang.String var38 = var36.toString();
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isFull();
    boolean var43 = var39.isFull();
    java.lang.Object var44 = var39.dequeue();
    boolean var45 = var39.isFull();
    boolean var46 = var39.isFull();
    java.lang.String var47 = var39.toString();
    var39.enqueue((java.lang.Object)1.0d);
    boolean var50 = var39.isFull();
    var36.enqueue((java.lang.Object)var39);
    QueueFaulty var52 = new QueueFaulty();
    var52.enqueue((java.lang.Object)false);
    boolean var55 = var52.isFull();
    boolean var56 = var52.isFull();
    java.lang.Object var57 = var52.dequeue();
    boolean var58 = var52.isFull();
    boolean var59 = var52.isFull();
    boolean var60 = var52.isFull();
    java.lang.String var61 = var52.toString();
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)false);
    boolean var65 = var62.isEmpty();
    java.lang.Object var66 = var62.dequeue();
    QueueFaulty var67 = new QueueFaulty();
    java.lang.String var68 = var67.toString();
    var62.enqueue((java.lang.Object)var68);
    var62.setCapacity(10);
    var52.enqueue((java.lang.Object)10);
    var39.enqueue((java.lang.Object)var52);
    var0.enqueue((java.lang.Object)var39);
    java.lang.Object var75 = var0.dequeue();
    boolean var76 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + false+ "'", var44.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + false+ "'", var66.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test239");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    var11.enqueue((java.lang.Object)(short)(-1));
    boolean var22 = var11.isFull();
    var11.setCapacity(0);
    var11.setCapacity(0);
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    var27.enqueue((java.lang.Object)1.0f);
    java.lang.String var35 = var27.toString();
    java.lang.String var36 = var27.toString();
    boolean var37 = var27.isEmpty();
    java.lang.Object var38 = var27.dequeue();
    var27.setCapacity(100);
    boolean var41 = var27.isEmpty();
    boolean var42 = var27.isFull();
    var11.enqueue((java.lang.Object)var42);
    java.lang.Object var44 = var11.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[1.0]"+ "'", var35.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[1.0]"+ "'", var36.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 1.0f+ "'", var38.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (short)(-1)+ "'", var44.equals((short)(-1)));

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test240");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    java.lang.String var7 = var0.toString();
    boolean var8 = var0.isFull();
    boolean var9 = var0.isFull();
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test241");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    var0.setCapacity(100);
    java.lang.Object var10 = var0.dequeue();
    var0.setCapacity(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test242");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    var0.setCapacity((-1));
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isEmpty();
    java.lang.Object var22 = var18.dequeue();
    var18.setCapacity(10);
    boolean var25 = var18.isFull();
    var18.enqueue((java.lang.Object)"hi!");
    var0.enqueue((java.lang.Object)var18);
    boolean var29 = var18.isEmpty();
    java.lang.Object var30 = var18.dequeue();
    boolean var31 = var18.isFull();
    boolean var32 = var18.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test243");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isFull();
    java.lang.String var12 = var0.toString();
    boolean var13 = var0.isFull();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    var14.enqueue((java.lang.Object)0.0f);
    java.lang.Object var20 = var14.dequeue();
    boolean var21 = var14.isEmpty();
    var0.enqueue((java.lang.Object)var14);
    java.lang.Object var23 = var14.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var24 = var14.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[false]"+ "'", var10.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[false]"+ "'", var12.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 0.0f+ "'", var23.equals(0.0f));

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test244");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(100);
    boolean var10 = var0.isFull();
    java.lang.Object var11 = var0.dequeue();
    boolean var12 = var0.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test245");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    boolean var8 = var0.isFull();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    boolean var17 = var9.isFull();
    java.lang.String var18 = var9.toString();
    var9.setCapacity(10);
    var9.setCapacity(0);
    boolean var23 = var9.isFull();
    var0.enqueue((java.lang.Object)var9);
    boolean var25 = var0.isFull();
    boolean var26 = var0.isEmpty();
    var0.setCapacity(0);
    var0.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test246");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    boolean var9 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var12 = new QueueFaulty();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    boolean var19 = var13.isFull();
    boolean var20 = var13.isFull();
    java.lang.String var21 = var13.toString();
    var13.setCapacity(0);
    var12.enqueue((java.lang.Object)var13);
    var13.setCapacity(10);
    QueueFaulty var27 = new QueueFaulty();
    boolean var28 = var27.isEmpty();
    boolean var29 = var27.isEmpty();
    boolean var30 = var27.isEmpty();
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isFull();
    boolean var35 = var31.isFull();
    java.lang.Object var36 = var31.dequeue();
    var31.enqueue((java.lang.Object)1.0f);
    var27.enqueue((java.lang.Object)var31);
    var13.enqueue((java.lang.Object)var31);
    boolean var41 = var13.isEmpty();
    java.lang.String var42 = var13.toString();
    var13.setCapacity(0);
    java.lang.String var45 = var13.toString();
    var13.setCapacity(0);
    QueueFaulty var48 = new QueueFaulty();
    boolean var49 = var48.isEmpty();
    java.lang.String var50 = var48.toString();
    var48.setCapacity((-1));
    boolean var53 = var48.isEmpty();
    QueueFaulty var54 = new QueueFaulty();
    boolean var55 = var54.isEmpty();
    java.lang.String var56 = var54.toString();
    var54.setCapacity(0);
    var48.enqueue((java.lang.Object)var54);
    var13.enqueue((java.lang.Object)var48);
    QueueFaulty var61 = new QueueFaulty();
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)false);
    boolean var65 = var62.isFull();
    boolean var66 = var62.isFull();
    java.lang.Object var67 = var62.dequeue();
    boolean var68 = var62.isFull();
    boolean var69 = var62.isFull();
    java.lang.String var70 = var62.toString();
    var62.setCapacity(0);
    var61.enqueue((java.lang.Object)var62);
    var62.setCapacity(10);
    QueueFaulty var76 = new QueueFaulty();
    boolean var77 = var76.isEmpty();
    boolean var78 = var76.isEmpty();
    boolean var79 = var76.isEmpty();
    QueueFaulty var80 = new QueueFaulty();
    var80.enqueue((java.lang.Object)false);
    boolean var83 = var80.isFull();
    boolean var84 = var80.isFull();
    java.lang.Object var85 = var80.dequeue();
    var80.enqueue((java.lang.Object)1.0f);
    var76.enqueue((java.lang.Object)var80);
    var62.enqueue((java.lang.Object)var80);
    boolean var90 = var62.isEmpty();
    java.lang.String var91 = var62.toString();
    var62.setCapacity(10);
    var13.enqueue((java.lang.Object)var62);
    var0.enqueue((java.lang.Object)var62);
    boolean var96 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[[1.0]]"+ "'", var42.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[[1.0]]"+ "'", var45.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + false+ "'", var67.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[]"+ "'", var70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + false+ "'", var85.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "[[1.0]]"+ "'", var91.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test247");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    boolean var20 = var11.isEmpty();
    QueueFaulty var21 = new QueueFaulty();
    java.lang.String var22 = var21.toString();
    var21.setCapacity(1);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    var21.enqueue((java.lang.Object)var25);
    var11.enqueue((java.lang.Object)var21);
    boolean var34 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var11);
    java.lang.Object var36 = var11.dequeue();
    boolean var37 = var11.isFull();
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isEmpty();
    boolean var42 = var38.isFull();
    var38.setCapacity(10);
    boolean var45 = var38.isEmpty();
    QueueFaulty var46 = new QueueFaulty();
    var46.enqueue((java.lang.Object)false);
    boolean var49 = var46.isFull();
    boolean var50 = var46.isFull();
    java.lang.Object var51 = var46.dequeue();
    java.lang.String var52 = var46.toString();
    var38.enqueue((java.lang.Object)var52);
    var38.setCapacity((-1));
    var38.setCapacity(100);
    boolean var58 = var38.isEmpty();
    boolean var59 = var38.isEmpty();
    boolean var60 = var38.isEmpty();
    java.lang.Object var61 = var38.dequeue();
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)false);
    boolean var65 = var62.isFull();
    boolean var66 = var62.isFull();
    java.lang.Object var67 = var62.dequeue();
    boolean var68 = var62.isFull();
    boolean var69 = var62.isFull();
    java.lang.String var70 = var62.toString();
    var62.enqueue((java.lang.Object)1.0d);
    var62.setCapacity(0);
    java.lang.String var75 = var62.toString();
    boolean var76 = var62.isFull();
    var38.enqueue((java.lang.Object)var62);
    java.lang.Object var78 = var62.dequeue();
    boolean var79 = var62.isFull();
    var11.enqueue((java.lang.Object)var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var81 = var62.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + false+ "'", var51.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + false+ "'", var67.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[]"+ "'", var70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "[1.0]"+ "'", var75.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + 1.0d+ "'", var78.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test248");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    var6.enqueue((java.lang.Object)1.0f);
    var6.setCapacity(10);
    var0.enqueue((java.lang.Object)var6);
    boolean var17 = var0.isEmpty();
    java.lang.Object var18 = var0.dequeue();
    var0.setCapacity(100);
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isEmpty();
    java.lang.String var25 = var21.toString();
    boolean var26 = var21.isFull();
    java.lang.Object var27 = var21.dequeue();
    var21.setCapacity(10);
    QueueFaulty var30 = new QueueFaulty();
    java.lang.String var31 = var30.toString();
    var30.setCapacity(1);
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    java.lang.Object var39 = var34.dequeue();
    java.lang.String var40 = var34.toString();
    var30.enqueue((java.lang.Object)var34);
    boolean var42 = var30.isEmpty();
    boolean var43 = var30.isEmpty();
    var30.setCapacity(10);
    var21.enqueue((java.lang.Object)var30);
    var0.enqueue((java.lang.Object)var21);
    QueueFaulty var48 = new QueueFaulty();
    java.lang.String var49 = var48.toString();
    var48.setCapacity(1);
    QueueFaulty var52 = new QueueFaulty();
    var52.enqueue((java.lang.Object)false);
    boolean var55 = var52.isFull();
    boolean var56 = var52.isFull();
    java.lang.Object var57 = var52.dequeue();
    java.lang.String var58 = var52.toString();
    var48.enqueue((java.lang.Object)var52);
    java.lang.Object var60 = var48.dequeue();
    boolean var61 = var48.isFull();
    var0.enqueue((java.lang.Object)var61);
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[false]"+ "'", var25.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "[]"+ "'", var58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test249");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    var0.setCapacity((-1));
    boolean var13 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test250");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isEmpty();
    QueueFaulty var7 = new QueueFaulty();
    java.lang.String var8 = var7.toString();
    var7.setCapacity(1);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    java.lang.String var17 = var11.toString();
    var7.enqueue((java.lang.Object)var11);
    boolean var19 = var7.isEmpty();
    boolean var20 = var7.isEmpty();
    java.lang.String var21 = var7.toString();
    var7.setCapacity(1);
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    QueueFaulty var27 = new QueueFaulty();
    java.lang.String var28 = var27.toString();
    var27.setCapacity(1);
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isFull();
    boolean var35 = var31.isFull();
    java.lang.Object var36 = var31.dequeue();
    java.lang.String var37 = var31.toString();
    var27.enqueue((java.lang.Object)var31);
    QueueFaulty var39 = new QueueFaulty();
    java.lang.String var40 = var39.toString();
    var39.setCapacity(1);
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    java.lang.String var49 = var43.toString();
    var39.enqueue((java.lang.Object)var43);
    boolean var51 = var39.isEmpty();
    boolean var52 = var39.isFull();
    var31.enqueue((java.lang.Object)var52);
    var31.setCapacity((-1));
    boolean var56 = var31.isEmpty();
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    boolean var60 = var57.isEmpty();
    boolean var61 = var57.isFull();
    java.lang.String var62 = var57.toString();
    java.lang.Object var63 = var57.dequeue();
    QueueFaulty var64 = new QueueFaulty();
    var64.enqueue((java.lang.Object)false);
    boolean var67 = var64.isEmpty();
    java.lang.Object var68 = var64.dequeue();
    var64.setCapacity(10);
    boolean var71 = var64.isFull();
    var64.setCapacity(1);
    boolean var74 = var64.isEmpty();
    var64.setCapacity(10);
    var57.enqueue((java.lang.Object)var64);
    boolean var78 = var64.isFull();
    boolean var79 = var64.isEmpty();
    boolean var80 = var64.isFull();
    QueueFaulty var81 = new QueueFaulty();
    var81.enqueue((java.lang.Object)false);
    boolean var84 = var81.isEmpty();
    java.lang.Object var85 = var81.dequeue();
    var81.setCapacity(10);
    boolean var88 = var81.isFull();
    java.lang.String var89 = var81.toString();
    boolean var90 = var81.isEmpty();
    var64.enqueue((java.lang.Object)var81);
    var64.setCapacity(100);
    var31.enqueue((java.lang.Object)var64);
    var7.enqueue((java.lang.Object)var31);
    var7.setCapacity((-1));
    boolean var98 = var7.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[[]]"+ "'", var21.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[false]"+ "'", var62.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + false+ "'", var63.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + false+ "'", var68.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + false+ "'", var85.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "[]"+ "'", var89.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test251");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.toString();
    var0.setCapacity(10);
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    boolean var14 = var10.isFull();
    java.lang.String var15 = var10.toString();
    java.lang.Object var16 = var10.dequeue();
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isEmpty();
    java.lang.Object var21 = var17.dequeue();
    var17.setCapacity(10);
    boolean var24 = var17.isFull();
    var17.setCapacity(1);
    boolean var27 = var17.isEmpty();
    var17.setCapacity(10);
    var10.enqueue((java.lang.Object)var17);
    boolean var31 = var17.isEmpty();
    var17.setCapacity(0);
    boolean var34 = var17.isEmpty();
    java.lang.String var35 = var17.toString();
    boolean var36 = var17.isFull();
    var0.enqueue((java.lang.Object)var36);
    boolean var38 = var0.isEmpty();
    QueueFaulty var39 = new QueueFaulty();
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isFull();
    boolean var44 = var40.isFull();
    java.lang.Object var45 = var40.dequeue();
    boolean var46 = var40.isFull();
    boolean var47 = var40.isFull();
    java.lang.String var48 = var40.toString();
    var40.setCapacity(0);
    var39.enqueue((java.lang.Object)var40);
    var40.setCapacity(10);
    java.lang.String var54 = var40.toString();
    QueueFaulty var55 = new QueueFaulty();
    var55.enqueue((java.lang.Object)false);
    boolean var58 = var55.isFull();
    boolean var59 = var55.isFull();
    java.lang.Object var60 = var55.dequeue();
    boolean var61 = var55.isFull();
    boolean var62 = var55.isFull();
    java.lang.String var63 = var55.toString();
    var55.enqueue((java.lang.Object)1.0d);
    var55.setCapacity(0);
    boolean var68 = var55.isEmpty();
    java.lang.String var69 = var55.toString();
    java.lang.Object var70 = var55.dequeue();
    java.lang.String var71 = var55.toString();
    var40.enqueue((java.lang.Object)var55);
    var55.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    boolean var76 = var0.isEmpty();
    boolean var77 = var0.isEmpty();
    boolean var78 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + false+ "'", var60.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[]"+ "'", var63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "[1.0]"+ "'", var69.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + 1.0d+ "'", var70.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[]"+ "'", var71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test252");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.String var7 = var0.toString();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.enqueue((java.lang.Object)1.0d);
    var10.setCapacity(0);
    java.lang.String var23 = var10.toString();
    var10.setCapacity(100);
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    var10.enqueue((java.lang.Object)var26);
    var0.enqueue((java.lang.Object)var26);
    java.lang.String var33 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[false]"+ "'", var7.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[1.0]"+ "'", var23.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test253");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    var0.setCapacity(0);
    boolean var9 = var0.isFull();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.String var14 = var10.toString();
    boolean var15 = var10.isFull();
    boolean var16 = var10.isEmpty();
    java.lang.Object var17 = var10.dequeue();
    java.lang.String var18 = var10.toString();
    boolean var19 = var10.isFull();
    boolean var20 = var10.isEmpty();
    boolean var21 = var10.isEmpty();
    var0.enqueue((java.lang.Object)var10);
    java.lang.Object var23 = var0.dequeue();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    boolean var30 = var24.isFull();
    boolean var31 = var24.isFull();
    boolean var32 = var24.isFull();
    var24.setCapacity(0);
    QueueFaulty var35 = new QueueFaulty();
    boolean var36 = var35.isEmpty();
    java.lang.String var37 = var35.toString();
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isFull();
    boolean var42 = var38.isFull();
    java.lang.Object var43 = var38.dequeue();
    boolean var44 = var38.isFull();
    boolean var45 = var38.isFull();
    java.lang.String var46 = var38.toString();
    var38.enqueue((java.lang.Object)1.0d);
    boolean var49 = var38.isFull();
    var35.enqueue((java.lang.Object)var38);
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isFull();
    boolean var55 = var51.isFull();
    java.lang.Object var56 = var51.dequeue();
    boolean var57 = var51.isFull();
    boolean var58 = var51.isFull();
    java.lang.String var59 = var51.toString();
    var51.enqueue((java.lang.Object)1.0d);
    var51.setCapacity(0);
    boolean var64 = var51.isEmpty();
    var51.setCapacity(0);
    var38.enqueue((java.lang.Object)var51);
    var24.enqueue((java.lang.Object)var38);
    java.lang.String var69 = var38.toString();
    var0.enqueue((java.lang.Object)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[false]"+ "'", var14.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + false+ "'", var56.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "[1.0, [1.0]]"+ "'", var69.equals("[1.0, [1.0]]"));

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test254");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    java.lang.String var9 = var3.toString();
    boolean var10 = var3.isFull();
    boolean var11 = var3.isEmpty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.String var16 = var12.toString();
    boolean var17 = var12.isFull();
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    java.lang.String var20 = var12.toString();
    boolean var21 = var12.isFull();
    java.lang.String var22 = var12.toString();
    var3.enqueue((java.lang.Object)var12);
    var0.enqueue((java.lang.Object)var3);
    java.lang.Object var25 = var3.dequeue();
    boolean var26 = var3.isEmpty();
    java.lang.String var27 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[false]"+ "'", var16.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test255");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.enqueue((java.lang.Object)1.0d);
    var16.setCapacity(0);
    boolean var29 = var16.isEmpty();
    var16.setCapacity(0);
    var3.enqueue((java.lang.Object)var16);
    var3.setCapacity((-1));
    QueueFaulty var35 = new QueueFaulty();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    boolean var42 = var36.isFull();
    boolean var43 = var36.isFull();
    java.lang.String var44 = var36.toString();
    var36.setCapacity(0);
    var35.enqueue((java.lang.Object)var36);
    var36.setCapacity(10);
    QueueFaulty var50 = new QueueFaulty();
    boolean var51 = var50.isEmpty();
    boolean var52 = var50.isEmpty();
    boolean var53 = var50.isEmpty();
    QueueFaulty var54 = new QueueFaulty();
    var54.enqueue((java.lang.Object)false);
    boolean var57 = var54.isFull();
    boolean var58 = var54.isFull();
    java.lang.Object var59 = var54.dequeue();
    var54.enqueue((java.lang.Object)1.0f);
    var50.enqueue((java.lang.Object)var54);
    var36.enqueue((java.lang.Object)var54);
    boolean var64 = var36.isEmpty();
    boolean var65 = var36.isEmpty();
    boolean var66 = var36.isFull();
    java.lang.String var67 = var36.toString();
    var36.setCapacity((-1));
    var3.enqueue((java.lang.Object)var36);
    boolean var71 = var3.isFull();
    boolean var72 = var3.isFull();
    boolean var73 = var3.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + false+ "'", var59.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[[1.0]]"+ "'", var67.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test256");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    var0.setCapacity(100);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    java.lang.String var20 = var16.toString();
    var16.setCapacity(1);
    java.lang.Object var23 = var16.dequeue();
    var16.setCapacity(0);
    var0.enqueue((java.lang.Object)var16);
    boolean var27 = var0.isEmpty();
    boolean var28 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[false]"+ "'", var20.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test257");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    var11.enqueue((java.lang.Object)(short)(-1));
    boolean var22 = var11.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    boolean var29 = var23.isFull();
    boolean var30 = var23.isFull();
    java.lang.String var31 = var23.toString();
    QueueFaulty var32 = new QueueFaulty();
    var32.enqueue((java.lang.Object)false);
    boolean var35 = var32.isFull();
    boolean var36 = var32.isFull();
    java.lang.Object var37 = var32.dequeue();
    boolean var38 = var32.isFull();
    boolean var39 = var32.isFull();
    java.lang.String var40 = var32.toString();
    var32.enqueue((java.lang.Object)1.0d);
    var32.setCapacity(0);
    var23.enqueue((java.lang.Object)0);
    java.lang.String var46 = var23.toString();
    boolean var47 = var23.isEmpty();
    java.lang.Object var48 = var23.dequeue();
    QueueFaulty var49 = new QueueFaulty();
    var49.enqueue((java.lang.Object)false);
    boolean var52 = var49.isFull();
    boolean var53 = var49.isFull();
    java.lang.Object var54 = var49.dequeue();
    boolean var55 = var49.isFull();
    boolean var56 = var49.isFull();
    java.lang.String var57 = var49.toString();
    var49.enqueue((java.lang.Object)1.0d);
    var49.setCapacity(0);
    var23.enqueue((java.lang.Object)var49);
    var23.setCapacity(1);
    boolean var65 = var23.isEmpty();
    java.lang.Object var66 = var23.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.enqueue((java.lang.Object)var23);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[0]"+ "'", var46.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 0+ "'", var48.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + false+ "'", var54.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[]"+ "'", var57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test258");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    boolean var8 = var0.isFull();
    boolean var9 = var0.isEmpty();
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var12 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test259");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    var0.setCapacity(10);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    var11.enqueue((java.lang.Object)"hi!");
    boolean var21 = var11.isFull();
    var0.enqueue((java.lang.Object)var11);
    java.lang.Object var23 = var11.dequeue();
    boolean var24 = var11.isEmpty();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isEmpty();
    java.lang.Object var29 = var25.dequeue();
    QueueFaulty var30 = new QueueFaulty();
    java.lang.String var31 = var30.toString();
    var25.enqueue((java.lang.Object)var31);
    var25.setCapacity(10);
    boolean var35 = var25.isFull();
    boolean var36 = var25.isEmpty();
    QueueFaulty var37 = new QueueFaulty();
    var37.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var40 = var37.dequeue();
    java.lang.String var41 = var37.toString();
    var25.enqueue((java.lang.Object)var41);
    boolean var43 = var25.isFull();
    boolean var44 = var25.isFull();
    var25.setCapacity(100);
    var11.enqueue((java.lang.Object)var25);
    boolean var48 = var25.isEmpty();
    var25.setCapacity(1);
    QueueFaulty var51 = new QueueFaulty();
    var51.setCapacity(100);
    boolean var54 = var51.isEmpty();
    var51.setCapacity(100);
    QueueFaulty var57 = new QueueFaulty();
    java.lang.String var58 = var57.toString();
    var57.setCapacity(1);
    QueueFaulty var61 = new QueueFaulty();
    var61.enqueue((java.lang.Object)false);
    boolean var64 = var61.isFull();
    boolean var65 = var61.isFull();
    java.lang.Object var66 = var61.dequeue();
    java.lang.String var67 = var61.toString();
    var57.enqueue((java.lang.Object)var61);
    boolean var69 = var57.isEmpty();
    boolean var70 = var57.isEmpty();
    java.lang.String var71 = var57.toString();
    var57.setCapacity(100);
    boolean var74 = var57.isEmpty();
    QueueFaulty var75 = new QueueFaulty();
    var75.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var78 = var75.dequeue();
    java.lang.String var79 = var75.toString();
    java.lang.String var80 = var75.toString();
    java.lang.String var81 = var75.toString();
    QueueFaulty var82 = new QueueFaulty();
    var82.enqueue((java.lang.Object)false);
    java.lang.String var85 = var82.toString();
    boolean var86 = var82.isEmpty();
    java.lang.String var87 = var82.toString();
    boolean var88 = var82.isFull();
    boolean var89 = var82.isEmpty();
    java.lang.Object var90 = var82.dequeue();
    var82.setCapacity(0);
    var75.enqueue((java.lang.Object)var82);
    java.lang.Object var94 = var75.dequeue();
    var57.enqueue(var94);
    var51.enqueue((java.lang.Object)var57);
    java.lang.Object var97 = var51.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var25.enqueue((java.lang.Object)var51);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + (short)(-1)+ "'", var40.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "[]"+ "'", var58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + false+ "'", var66.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[[]]"+ "'", var71.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + (short)(-1)+ "'", var78.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "[]"+ "'", var79.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[]"+ "'", var80.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[]"+ "'", var81.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "[false]"+ "'", var85.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "[false]"+ "'", var87.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + false+ "'", var90.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test260");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    boolean var13 = var1.isEmpty();
    boolean var14 = var1.isFull();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    boolean var19 = var15.isFull();
    var15.setCapacity(10);
    boolean var22 = var15.isEmpty();
    var15.setCapacity(100);
    var15.setCapacity(0);
    java.lang.Object var27 = var15.dequeue();
    var1.enqueue((java.lang.Object)var15);
    boolean var29 = var15.isFull();
    boolean var30 = var15.isEmpty();
    boolean var31 = var15.isEmpty();
    QueueFaulty var32 = new QueueFaulty();
    var32.enqueue((java.lang.Object)false);
    boolean var35 = var32.isEmpty();
    java.lang.Object var36 = var32.dequeue();
    java.lang.String var37 = var32.toString();
    boolean var38 = var32.isEmpty();
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isFull();
    java.lang.String var43 = var39.toString();
    var39.setCapacity(0);
    var32.enqueue((java.lang.Object)0);
    var32.setCapacity((-1));
    var15.enqueue((java.lang.Object)(-1));
    boolean var50 = var15.isEmpty();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isEmpty();
    java.lang.Object var55 = var51.dequeue();
    java.lang.String var56 = var51.toString();
    boolean var57 = var51.isFull();
    QueueFaulty var58 = new QueueFaulty();
    var58.enqueue((java.lang.Object)false);
    boolean var61 = var58.isEmpty();
    boolean var62 = var58.isFull();
    var58.setCapacity(10);
    boolean var65 = var58.isFull();
    var51.enqueue((java.lang.Object)var58);
    var15.enqueue((java.lang.Object)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[false]"+ "'", var43.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + false+ "'", var55.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test261");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    var11.enqueue((java.lang.Object)1.0f);
    java.lang.String var19 = var11.toString();
    java.lang.String var20 = var11.toString();
    boolean var21 = var11.isEmpty();
    java.lang.Object var22 = var11.dequeue();
    var0.enqueue(var22);
    boolean var24 = var0.isFull();
    boolean var25 = var0.isFull();
    java.lang.String var26 = var0.toString();
    boolean var27 = var0.isFull();
    var0.setCapacity(0);
    boolean var30 = var0.isFull();
    boolean var31 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[1.0]"+ "'", var19.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[1.0]"+ "'", var20.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 1.0f+ "'", var22.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[1.0]"+ "'", var26.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test262");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    var0.enqueue((java.lang.Object)10.0d);
    java.lang.Object var7 = var0.dequeue();
    QueueFaulty var8 = new QueueFaulty();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.setCapacity(0);
    var8.enqueue((java.lang.Object)var9);
    var9.setCapacity(10);
    QueueFaulty var23 = new QueueFaulty();
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    boolean var26 = var23.isEmpty();
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    var27.enqueue((java.lang.Object)1.0f);
    var23.enqueue((java.lang.Object)var27);
    var9.enqueue((java.lang.Object)var27);
    boolean var37 = var9.isEmpty();
    java.lang.String var38 = var9.toString();
    QueueFaulty var39 = new QueueFaulty();
    boolean var40 = var39.isEmpty();
    java.lang.String var41 = var39.toString();
    var39.setCapacity((-1));
    boolean var44 = var39.isEmpty();
    boolean var45 = var39.isFull();
    var9.enqueue((java.lang.Object)var39);
    QueueFaulty var47 = new QueueFaulty();
    java.lang.String var48 = var47.toString();
    var47.setCapacity(1);
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isFull();
    boolean var55 = var51.isFull();
    java.lang.Object var56 = var51.dequeue();
    java.lang.String var57 = var51.toString();
    var47.enqueue((java.lang.Object)var51);
    java.lang.Object var59 = var47.dequeue();
    var47.enqueue((java.lang.Object)100);
    java.lang.String var62 = var47.toString();
    var39.enqueue((java.lang.Object)var47);
    QueueFaulty var64 = new QueueFaulty();
    var64.enqueue((java.lang.Object)false);
    QueueFaulty var67 = new QueueFaulty();
    var67.enqueue((java.lang.Object)false);
    boolean var70 = var67.isEmpty();
    boolean var71 = var67.isFull();
    var67.setCapacity(10);
    boolean var74 = var67.isEmpty();
    var67.setCapacity(100);
    var67.setCapacity(0);
    var64.enqueue((java.lang.Object)0);
    var39.enqueue((java.lang.Object)var64);
    java.lang.Object var81 = var39.dequeue();
    var0.enqueue(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[[1.0]]"+ "'", var38.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + false+ "'", var56.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[]"+ "'", var57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[100]"+ "'", var62.equals("[100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test263");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    boolean var4 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test264");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(1);
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    boolean var14 = var0.isEmpty();
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test265");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isEmpty();
    java.lang.Object var12 = var8.dequeue();
    var8.setCapacity(10);
    boolean var15 = var8.isFull();
    java.lang.String var16 = var8.toString();
    boolean var17 = var8.isEmpty();
    QueueFaulty var18 = new QueueFaulty();
    java.lang.String var19 = var18.toString();
    var18.setCapacity(1);
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isFull();
    boolean var26 = var22.isFull();
    java.lang.Object var27 = var22.dequeue();
    java.lang.String var28 = var22.toString();
    var18.enqueue((java.lang.Object)var22);
    var8.enqueue((java.lang.Object)var18);
    boolean var31 = var8.isEmpty();
    var8.setCapacity(1);
    var0.enqueue((java.lang.Object)var8);
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    boolean var39 = var35.isFull();
    java.lang.String var40 = var35.toString();
    java.lang.Object var41 = var35.dequeue();
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isEmpty();
    java.lang.Object var46 = var42.dequeue();
    var42.setCapacity(10);
    boolean var49 = var42.isFull();
    var42.setCapacity(1);
    boolean var52 = var42.isEmpty();
    var42.setCapacity(10);
    var35.enqueue((java.lang.Object)var42);
    QueueFaulty var56 = new QueueFaulty();
    boolean var57 = var56.isEmpty();
    java.lang.String var58 = var56.toString();
    QueueFaulty var59 = new QueueFaulty();
    var59.enqueue((java.lang.Object)false);
    boolean var62 = var59.isFull();
    boolean var63 = var59.isFull();
    java.lang.Object var64 = var59.dequeue();
    boolean var65 = var59.isFull();
    boolean var66 = var59.isFull();
    java.lang.String var67 = var59.toString();
    var59.enqueue((java.lang.Object)1.0d);
    boolean var70 = var59.isFull();
    var56.enqueue((java.lang.Object)var59);
    QueueFaulty var72 = new QueueFaulty();
    var72.enqueue((java.lang.Object)false);
    boolean var75 = var72.isFull();
    boolean var76 = var72.isFull();
    java.lang.Object var77 = var72.dequeue();
    boolean var78 = var72.isFull();
    boolean var79 = var72.isFull();
    java.lang.String var80 = var72.toString();
    var72.enqueue((java.lang.Object)1.0d);
    var72.setCapacity(0);
    boolean var85 = var72.isEmpty();
    var72.setCapacity(0);
    var59.enqueue((java.lang.Object)var72);
    var59.setCapacity((-1));
    var42.enqueue((java.lang.Object)(-1));
    var8.enqueue((java.lang.Object)var42);
    java.lang.String var93 = var42.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[false]"+ "'", var40.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + false+ "'", var46.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "[]"+ "'", var58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + false+ "'", var64.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + false+ "'", var77.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[]"+ "'", var80.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "[-1]"+ "'", var93.equals("[-1]"));

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test266");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    var0.setCapacity(100);
    QueueFaulty var5 = new QueueFaulty();
    boolean var6 = var5.isEmpty();
    java.lang.String var7 = var5.toString();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    boolean var14 = var8.isFull();
    boolean var15 = var8.isFull();
    java.lang.String var16 = var8.toString();
    var8.enqueue((java.lang.Object)1.0d);
    boolean var19 = var8.isFull();
    var5.enqueue((java.lang.Object)var8);
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isFull();
    boolean var25 = var21.isFull();
    java.lang.Object var26 = var21.dequeue();
    boolean var27 = var21.isFull();
    boolean var28 = var21.isFull();
    java.lang.String var29 = var21.toString();
    var21.enqueue((java.lang.Object)1.0d);
    var21.setCapacity(0);
    boolean var34 = var21.isEmpty();
    var21.setCapacity(0);
    var8.enqueue((java.lang.Object)var21);
    var8.setCapacity((-1));
    var0.enqueue((java.lang.Object)var8);
    boolean var41 = var0.isEmpty();
    boolean var42 = var0.isFull();
    boolean var43 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test267");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isEmpty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.String var16 = var12.toString();
    boolean var17 = var12.isEmpty();
    boolean var18 = var12.isFull();
    var0.enqueue((java.lang.Object)var12);
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    boolean var26 = var20.isFull();
    QueueFaulty var27 = new QueueFaulty();
    java.lang.String var28 = var27.toString();
    var27.setCapacity(1);
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isFull();
    boolean var35 = var31.isFull();
    java.lang.Object var36 = var31.dequeue();
    java.lang.String var37 = var31.toString();
    var27.enqueue((java.lang.Object)var31);
    boolean var39 = var27.isEmpty();
    boolean var40 = var27.isFull();
    var20.enqueue((java.lang.Object)var40);
    boolean var42 = var20.isEmpty();
    var20.setCapacity(10);
    QueueFaulty var45 = new QueueFaulty();
    boolean var46 = var45.isFull();
    boolean var47 = var45.isFull();
    var45.setCapacity((-1));
    var20.enqueue((java.lang.Object)(-1));
    var12.enqueue((java.lang.Object)(-1));
    java.lang.Object var52 = var12.dequeue();
    var12.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[false]"+ "'", var16.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test268");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    var0.setCapacity(100);
    var0.setCapacity(0);
    java.lang.Object var12 = var0.dequeue();
    java.lang.String var13 = var0.toString();
    boolean var14 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test269");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isEmpty();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.isFull();
    boolean var15 = var9.isEmpty();
    java.lang.Object var16 = var9.dequeue();
    java.lang.String var17 = var9.toString();
    boolean var18 = var9.isFull();
    java.lang.String var19 = var9.toString();
    var0.enqueue((java.lang.Object)var9);
    boolean var21 = var0.isEmpty();
    var0.setCapacity(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var24 = var0.dequeue();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[false]"+ "'", var13.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test270");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    var0.setCapacity(10);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    var11.enqueue((java.lang.Object)"hi!");
    boolean var21 = var11.isFull();
    var0.enqueue((java.lang.Object)var11);
    var0.setCapacity((-1));
    boolean var25 = var0.isFull();
    var0.enqueue((java.lang.Object)(short)1);
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test271");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    var0.setCapacity(100);
    boolean var5 = var0.isFull();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test272");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    boolean var20 = var14.isFull();
    java.lang.String var21 = var14.toString();
    java.lang.String var22 = var14.toString();
    boolean var23 = var14.isEmpty();
    var14.setCapacity((-1));
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    java.lang.String var29 = var26.toString();
    boolean var30 = var26.isEmpty();
    boolean var31 = var26.isEmpty();
    boolean var32 = var26.isEmpty();
    var26.setCapacity(100);
    var26.setCapacity(0);
    var14.enqueue((java.lang.Object)var26);
    boolean var38 = var14.isEmpty();
    var0.enqueue((java.lang.Object)var38);
    boolean var40 = var0.isFull();
    java.lang.Object var41 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[false]"+ "'", var29.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test273");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    boolean var10 = var0.isEmpty();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.setCapacity((-1));
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isEmpty();
    java.lang.Object var26 = var22.dequeue();
    var22.setCapacity(10);
    boolean var29 = var22.isFull();
    java.lang.String var30 = var22.toString();
    boolean var31 = var22.isEmpty();
    QueueFaulty var32 = new QueueFaulty();
    java.lang.String var33 = var32.toString();
    var32.setCapacity(1);
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    java.lang.String var42 = var36.toString();
    var32.enqueue((java.lang.Object)var36);
    var22.enqueue((java.lang.Object)var32);
    boolean var45 = var22.isEmpty();
    var11.enqueue((java.lang.Object)var22);
    java.lang.Object var47 = var22.dequeue();
    boolean var48 = var22.isFull();
    var0.enqueue((java.lang.Object)var48);
    var0.setCapacity(100);
    boolean var52 = var0.isFull();
    java.lang.Object var53 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test274");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    boolean var11 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    boolean var21 = var14.isFull();
    boolean var22 = var14.isFull();
    boolean var23 = var14.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    java.lang.String var35 = var34.toString();
    var34.setCapacity(1);
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isFull();
    boolean var42 = var38.isFull();
    java.lang.Object var43 = var38.dequeue();
    java.lang.String var44 = var38.toString();
    var34.enqueue((java.lang.Object)var38);
    var24.enqueue((java.lang.Object)var34);
    var34.setCapacity(100);
    var14.enqueue((java.lang.Object)100);
    var0.enqueue((java.lang.Object)var14);
    var14.setCapacity(0);
    java.lang.Object var53 = var14.dequeue();
    QueueFaulty var54 = new QueueFaulty();
    java.lang.String var55 = var54.toString();
    var54.setCapacity(1);
    QueueFaulty var58 = new QueueFaulty();
    var58.enqueue((java.lang.Object)false);
    boolean var61 = var58.isFull();
    boolean var62 = var58.isFull();
    java.lang.Object var63 = var58.dequeue();
    java.lang.String var64 = var58.toString();
    var54.enqueue((java.lang.Object)var58);
    boolean var66 = var54.isEmpty();
    boolean var67 = var54.isEmpty();
    java.lang.String var68 = var54.toString();
    boolean var69 = var54.isEmpty();
    boolean var70 = var54.isEmpty();
    java.lang.String var71 = var54.toString();
    java.lang.Object var72 = var54.dequeue();
    QueueFaulty var73 = new QueueFaulty();
    var73.enqueue((java.lang.Object)false);
    boolean var76 = var73.isFull();
    boolean var77 = var73.isFull();
    java.lang.Object var78 = var73.dequeue();
    var73.enqueue((java.lang.Object)1.0f);
    java.lang.String var81 = var73.toString();
    java.lang.String var82 = var73.toString();
    boolean var83 = var73.isFull();
    var54.enqueue((java.lang.Object)var73);
    java.lang.String var85 = var73.toString();
    java.lang.Object var86 = var73.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.enqueue(var86);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + 100+ "'", var53.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + false+ "'", var63.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[[]]"+ "'", var68.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[[]]"+ "'", var71.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + false+ "'", var78.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[1.0]"+ "'", var81.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "[1.0]"+ "'", var82.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "[1.0]"+ "'", var85.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + 1.0f+ "'", var86.equals(1.0f));

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test275");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var13 = new QueueFaulty();
    java.lang.String var14 = var13.toString();
    var13.setCapacity(1);
    var13.setCapacity((-1));
    boolean var19 = var13.isEmpty();
    var13.setCapacity(0);
    var0.enqueue((java.lang.Object)var13);
    java.lang.Object var23 = var0.dequeue();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    boolean var30 = var24.isFull();
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    var24.setCapacity((-1));
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    java.lang.Object var39 = var35.dequeue();
    var35.setCapacity(10);
    boolean var42 = var35.isFull();
    java.lang.String var43 = var35.toString();
    boolean var44 = var35.isEmpty();
    QueueFaulty var45 = new QueueFaulty();
    java.lang.String var46 = var45.toString();
    var45.setCapacity(1);
    QueueFaulty var49 = new QueueFaulty();
    var49.enqueue((java.lang.Object)false);
    boolean var52 = var49.isFull();
    boolean var53 = var49.isFull();
    java.lang.Object var54 = var49.dequeue();
    java.lang.String var55 = var49.toString();
    var45.enqueue((java.lang.Object)var49);
    var35.enqueue((java.lang.Object)var45);
    boolean var58 = var35.isEmpty();
    var24.enqueue((java.lang.Object)var35);
    java.lang.Object var60 = var35.dequeue();
    java.lang.String var61 = var35.toString();
    var0.enqueue((java.lang.Object)var35);
    java.lang.String var63 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + false+ "'", var54.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[]"+ "'", var63.equals("[]"));

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test276");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    java.lang.Object var20 = var0.dequeue();
    java.lang.String var21 = var0.toString();
    var0.setCapacity((-1));
    boolean var24 = var0.isEmpty();
    boolean var25 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var26 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test277");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var3 = var0.dequeue();
    boolean var4 = var0.isEmpty();
    QueueFaulty var5 = new QueueFaulty();
    var5.enqueue((java.lang.Object)false);
    boolean var8 = var5.isEmpty();
    java.lang.Object var9 = var5.dequeue();
    var5.setCapacity(10);
    boolean var12 = var5.isFull();
    java.lang.String var13 = var5.toString();
    boolean var14 = var5.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.String var19 = var15.toString();
    boolean var20 = var15.isFull();
    boolean var21 = var15.isEmpty();
    java.lang.Object var22 = var15.dequeue();
    java.lang.String var23 = var15.toString();
    boolean var24 = var15.isFull();
    var5.enqueue((java.lang.Object)var24);
    boolean var26 = var5.isEmpty();
    boolean var27 = var5.isEmpty();
    var0.enqueue((java.lang.Object)var5);
    boolean var29 = var0.isFull();
    boolean var30 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isEmpty();
    java.lang.Object var37 = var33.dequeue();
    var33.setCapacity(10);
    var33.setCapacity(1);
    boolean var42 = var33.isFull();
    boolean var43 = var33.isEmpty();
    boolean var44 = var33.isFull();
    boolean var45 = var33.isEmpty();
    boolean var46 = var33.isEmpty();
    java.lang.String var47 = var33.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var47);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (short)(-1)+ "'", var3.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test278");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    java.lang.String var18 = var12.toString();
    boolean var19 = var12.isFull();
    var4.enqueue((java.lang.Object)var19);
    java.lang.Object var21 = var4.dequeue();
    var4.setCapacity(1);
    var4.setCapacity((-1));
    var4.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test279");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    boolean var13 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var16 = var0.isEmpty();
    QueueFaulty var17 = new QueueFaulty();
    java.lang.String var18 = var17.toString();
    var17.setCapacity(1);
    java.lang.String var21 = var17.toString();
    var17.setCapacity(0);
    QueueFaulty var24 = new QueueFaulty();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    boolean var31 = var25.isFull();
    boolean var32 = var25.isFull();
    java.lang.String var33 = var25.toString();
    var25.setCapacity(0);
    var24.enqueue((java.lang.Object)var25);
    boolean var37 = var25.isEmpty();
    java.lang.String var38 = var25.toString();
    var17.enqueue((java.lang.Object)var25);
    boolean var40 = var17.isFull();
    java.lang.String var41 = var17.toString();
    var0.enqueue((java.lang.Object)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[[]]"+ "'", var41.equals("[[]]"));

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test280");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    boolean var5 = var0.isEmpty();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    java.lang.Object var8 = var0.dequeue();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    boolean var14 = var10.isFull();
    java.lang.String var15 = var10.toString();
    var10.setCapacity((-1));
    java.lang.String var18 = var10.toString();
    java.lang.String var19 = var10.toString();
    QueueFaulty var20 = new QueueFaulty();
    boolean var21 = var20.isEmpty();
    java.lang.String var22 = var20.toString();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    boolean var29 = var23.isFull();
    boolean var30 = var23.isFull();
    java.lang.String var31 = var23.toString();
    var23.enqueue((java.lang.Object)1.0d);
    boolean var34 = var23.isFull();
    var20.enqueue((java.lang.Object)var23);
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    boolean var42 = var36.isFull();
    boolean var43 = var36.isFull();
    boolean var44 = var36.isFull();
    java.lang.String var45 = var36.toString();
    QueueFaulty var46 = new QueueFaulty();
    var46.enqueue((java.lang.Object)false);
    boolean var49 = var46.isEmpty();
    java.lang.Object var50 = var46.dequeue();
    QueueFaulty var51 = new QueueFaulty();
    java.lang.String var52 = var51.toString();
    var46.enqueue((java.lang.Object)var52);
    var46.setCapacity(10);
    var36.enqueue((java.lang.Object)10);
    var23.enqueue((java.lang.Object)var36);
    var10.enqueue((java.lang.Object)var36);
    var10.setCapacity((-1));
    var0.enqueue((java.lang.Object)var10);
    boolean var62 = var10.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[false]"+ "'", var6.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[false]"+ "'", var18.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + false+ "'", var50.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test281");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var10);
    var10.setCapacity(100);
    boolean var25 = var10.isFull();
    var10.setCapacity(0);
    boolean var28 = var10.isFull();
    java.lang.Object var29 = var10.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test282");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.String var7 = var0.toString();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    java.lang.Object var10 = var0.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var11 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[false]"+ "'", var7.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test283");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    var0.setCapacity(100);
    var0.setCapacity(0);
    java.lang.Object var12 = var0.dequeue();
    java.lang.String var13 = var0.toString();
    boolean var14 = var0.isFull();
    java.lang.String var15 = var0.toString();
    boolean var16 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test284");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity((-1));
    boolean var16 = var0.isFull();
    var0.setCapacity(10);
    boolean var19 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test285");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isFull();
    boolean var12 = var8.isFull();
    java.lang.Object var13 = var8.dequeue();
    java.lang.String var14 = var8.toString();
    var0.enqueue((java.lang.Object)var14);
    var0.setCapacity((-1));
    var0.setCapacity(100);
    boolean var20 = var0.isEmpty();
    boolean var21 = var0.isEmpty();
    boolean var22 = var0.isEmpty();
    boolean var23 = var0.isFull();
    java.lang.Object var24 = var0.dequeue();
    java.lang.Object var25 = var0.dequeue();
    boolean var26 = var0.isFull();
    var0.setCapacity(100);
    java.lang.String var29 = var0.toString();
    boolean var30 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test286");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var10);
    boolean var23 = var10.isFull();
    java.lang.String var24 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    boolean var33 = var27.isFull();
    boolean var34 = var27.isFull();
    java.lang.String var35 = var27.toString();
    var27.setCapacity(1);
    boolean var38 = var27.isFull();
    var27.setCapacity(100);
    var10.enqueue((java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[]]"+ "'", var24.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test287");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.String var38 = var16.toString();
    var16.setCapacity(100);
    boolean var41 = var16.isFull();
    QueueFaulty var42 = new QueueFaulty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    java.lang.String var51 = var43.toString();
    var43.setCapacity(0);
    var42.enqueue((java.lang.Object)var43);
    boolean var55 = var43.isEmpty();
    boolean var56 = var43.isFull();
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    boolean var60 = var57.isEmpty();
    boolean var61 = var57.isFull();
    var57.setCapacity(10);
    boolean var64 = var57.isEmpty();
    var57.setCapacity(100);
    var57.setCapacity(0);
    java.lang.Object var69 = var57.dequeue();
    var43.enqueue((java.lang.Object)var57);
    var16.enqueue((java.lang.Object)var43);
    QueueFaulty var72 = new QueueFaulty();
    var72.enqueue((java.lang.Object)false);
    boolean var75 = var72.isEmpty();
    java.lang.Object var76 = var72.dequeue();
    java.lang.String var77 = var72.toString();
    boolean var78 = var72.isEmpty();
    QueueFaulty var79 = new QueueFaulty();
    var79.enqueue((java.lang.Object)false);
    boolean var82 = var79.isFull();
    java.lang.String var83 = var79.toString();
    var79.setCapacity(0);
    var72.enqueue((java.lang.Object)0);
    var72.enqueue((java.lang.Object)0.0d);
    var16.enqueue((java.lang.Object)0.0d);
    boolean var90 = var16.isEmpty();
    boolean var91 = var16.isFull();
    boolean var92 = var16.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[10]"+ "'", var38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + false+ "'", var76.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "[]"+ "'", var77.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "[false]"+ "'", var83.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test288");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    var0.enqueue((java.lang.Object)(short)1);
    var0.setCapacity((-1));
    java.lang.Object var13 = var0.dequeue();
    QueueFaulty var14 = new QueueFaulty();
    java.lang.String var15 = var14.toString();
    var14.setCapacity(1);
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isFull();
    boolean var22 = var18.isFull();
    java.lang.Object var23 = var18.dequeue();
    java.lang.String var24 = var18.toString();
    var14.enqueue((java.lang.Object)var18);
    boolean var26 = var14.isEmpty();
    java.lang.Object var27 = var14.dequeue();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isFull();
    boolean var32 = var28.isFull();
    java.lang.Object var33 = var28.dequeue();
    boolean var34 = var28.isFull();
    boolean var35 = var28.isFull();
    java.lang.String var36 = var28.toString();
    var28.setCapacity((-1));
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isEmpty();
    java.lang.Object var43 = var39.dequeue();
    var39.setCapacity(10);
    boolean var46 = var39.isFull();
    java.lang.String var47 = var39.toString();
    boolean var48 = var39.isEmpty();
    QueueFaulty var49 = new QueueFaulty();
    java.lang.String var50 = var49.toString();
    var49.setCapacity(1);
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isFull();
    boolean var57 = var53.isFull();
    java.lang.Object var58 = var53.dequeue();
    java.lang.String var59 = var53.toString();
    var49.enqueue((java.lang.Object)var53);
    var39.enqueue((java.lang.Object)var49);
    boolean var62 = var39.isEmpty();
    var28.enqueue((java.lang.Object)var39);
    java.lang.Object var64 = var39.dequeue();
    java.lang.String var65 = var39.toString();
    java.lang.String var66 = var39.toString();
    boolean var67 = var39.isFull();
    var14.enqueue((java.lang.Object)var39);
    var0.enqueue((java.lang.Object)var14);
    java.lang.Object var70 = var0.dequeue();
    boolean var71 = var0.isEmpty();
    boolean var72 = var0.isFull();
    java.lang.String var73 = var0.toString();
    java.lang.String var74 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + (short)1+ "'", var13.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + false+ "'", var23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + false+ "'", var58.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[]"+ "'", var65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "[]"+ "'", var66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "[]"+ "'", var73.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "[]"+ "'", var74.equals("[]"));

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test289");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    var7.enqueue((java.lang.Object)var24);
    java.lang.String var35 = var24.toString();
    var24.setCapacity(1);
    boolean var38 = var24.isEmpty();
    var24.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test290");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    boolean var9 = var0.isFull();
    boolean var10 = var0.isEmpty();
    var0.setCapacity(0);
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    boolean var19 = var13.isFull();
    boolean var20 = var13.isFull();
    boolean var21 = var13.isFull();
    boolean var22 = var13.isEmpty();
    boolean var23 = var13.isEmpty();
    QueueFaulty var24 = new QueueFaulty();
    java.lang.String var25 = var24.toString();
    var24.setCapacity(1);
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isFull();
    boolean var32 = var28.isFull();
    java.lang.Object var33 = var28.dequeue();
    java.lang.String var34 = var28.toString();
    var24.enqueue((java.lang.Object)var28);
    boolean var36 = var24.isEmpty();
    boolean var37 = var24.isEmpty();
    java.lang.String var38 = var24.toString();
    var24.setCapacity(100);
    boolean var41 = var24.isEmpty();
    var13.enqueue((java.lang.Object)var24);
    var0.enqueue((java.lang.Object)var13);
    var13.setCapacity(0);
    boolean var46 = var13.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[]"+ "'", var34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[[]]"+ "'", var38.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test291");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test292");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    var0.setCapacity((-1));
    boolean var6 = var0.isEmpty();
    java.lang.String var7 = var0.toString();
    QueueFaulty var8 = new QueueFaulty();
    boolean var9 = var8.isEmpty();
    java.lang.String var10 = var8.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.enqueue((java.lang.Object)1.0d);
    boolean var22 = var11.isFull();
    var8.enqueue((java.lang.Object)var11);
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    boolean var30 = var24.isFull();
    boolean var31 = var24.isFull();
    boolean var32 = var24.isFull();
    java.lang.String var33 = var24.toString();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isEmpty();
    java.lang.Object var38 = var34.dequeue();
    QueueFaulty var39 = new QueueFaulty();
    java.lang.String var40 = var39.toString();
    var34.enqueue((java.lang.Object)var40);
    var34.setCapacity(10);
    var24.enqueue((java.lang.Object)10);
    var11.enqueue((java.lang.Object)var24);
    java.lang.Object var46 = var24.dequeue();
    java.lang.String var47 = var24.toString();
    java.lang.String var48 = var24.toString();
    var0.enqueue((java.lang.Object)var24);
    java.lang.Object var50 = var0.dequeue();
    boolean var51 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + false+ "'", var38.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + 10+ "'", var46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test293");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    boolean var13 = var0.isEmpty();
    boolean var14 = var0.isFull();
    boolean var15 = var0.isFull();
    boolean var16 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test294");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var9 = var0.isEmpty();
    boolean var10 = var0.isFull();
    QueueFaulty var11 = new QueueFaulty();
    java.lang.String var12 = var11.toString();
    boolean var13 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var11);
    java.lang.String var15 = var0.toString();
    boolean var16 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[[]]"+ "'", var15.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test295");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    java.lang.Object var13 = var0.dequeue();
    var0.setCapacity((-1));
    java.lang.String var16 = var0.toString();
    var0.setCapacity(1);
    java.lang.String var19 = var0.toString();
    var0.setCapacity((-1));
    boolean var22 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test296");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    QueueFaulty var7 = new QueueFaulty();
    java.lang.String var8 = var7.toString();
    var7.setCapacity(1);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    java.lang.String var17 = var11.toString();
    var7.enqueue((java.lang.Object)var11);
    boolean var19 = var7.isEmpty();
    boolean var20 = var7.isFull();
    var0.enqueue((java.lang.Object)var20);
    var0.setCapacity(1);
    var0.setCapacity(10);
    QueueFaulty var26 = new QueueFaulty();
    java.lang.String var27 = var26.toString();
    var26.setCapacity(1);
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    java.lang.String var36 = var30.toString();
    var26.enqueue((java.lang.Object)var30);
    boolean var38 = var26.isFull();
    boolean var39 = var26.isFull();
    boolean var40 = var26.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var40);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test297");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(0);
    boolean var11 = var0.isEmpty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.Object var16 = var12.dequeue();
    QueueFaulty var17 = new QueueFaulty();
    java.lang.String var18 = var17.toString();
    var12.enqueue((java.lang.Object)var18);
    var12.setCapacity(10);
    boolean var22 = var12.isFull();
    boolean var23 = var12.isEmpty();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var27 = var24.dequeue();
    java.lang.String var28 = var24.toString();
    var12.enqueue((java.lang.Object)var28);
    boolean var30 = var12.isFull();
    boolean var31 = var12.isFull();
    var0.enqueue((java.lang.Object)var12);
    boolean var33 = var12.isEmpty();
    boolean var34 = var12.isEmpty();
    java.lang.Object var35 = var12.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (short)(-1)+ "'", var27.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test298");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var19.isFull();
    java.lang.String var30 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[1.0]"+ "'", var30.equals("[1.0]"));

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test299");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    var0.setCapacity(10);
    var0.setCapacity(10);
    java.lang.Object var16 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test300");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    QueueFaulty var12 = new QueueFaulty();
    java.lang.String var13 = var12.toString();
    var12.setCapacity(1);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    java.lang.String var22 = var16.toString();
    var12.enqueue((java.lang.Object)var16);
    boolean var24 = var12.isEmpty();
    boolean var25 = var12.isFull();
    var4.enqueue((java.lang.Object)var25);
    java.lang.Object var27 = var4.dequeue();
    var4.setCapacity(1);
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isEmpty();
    java.lang.Object var34 = var30.dequeue();
    java.lang.String var35 = var30.toString();
    boolean var36 = var30.isEmpty();
    boolean var37 = var30.isFull();
    var30.setCapacity(100);
    var30.setCapacity(10);
    var4.enqueue((java.lang.Object)10);
    var4.setCapacity(1);
    java.lang.Object var45 = var4.dequeue();
    boolean var46 = var4.isEmpty();
    var4.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + true+ "'", var27.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test301");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isFull();
    var0.setCapacity(0);
    boolean var15 = var0.isEmpty();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isEmpty();
    java.lang.Object var20 = var16.dequeue();
    var16.setCapacity(10);
    boolean var23 = var16.isFull();
    var16.setCapacity(1);
    boolean var26 = var16.isEmpty();
    var16.setCapacity(10);
    var0.enqueue((java.lang.Object)var16);
    boolean var30 = var0.isEmpty();
    boolean var31 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test302");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    boolean var20 = var11.isEmpty();
    QueueFaulty var21 = new QueueFaulty();
    java.lang.String var22 = var21.toString();
    var21.setCapacity(1);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    var21.enqueue((java.lang.Object)var25);
    var11.enqueue((java.lang.Object)var21);
    boolean var34 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var11);
    QueueFaulty var36 = new QueueFaulty();
    boolean var37 = var36.isEmpty();
    java.lang.String var38 = var36.toString();
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isFull();
    boolean var43 = var39.isFull();
    java.lang.Object var44 = var39.dequeue();
    boolean var45 = var39.isFull();
    boolean var46 = var39.isFull();
    java.lang.String var47 = var39.toString();
    var39.enqueue((java.lang.Object)1.0d);
    boolean var50 = var39.isFull();
    var36.enqueue((java.lang.Object)var39);
    QueueFaulty var52 = new QueueFaulty();
    var52.enqueue((java.lang.Object)false);
    boolean var55 = var52.isFull();
    boolean var56 = var52.isFull();
    java.lang.Object var57 = var52.dequeue();
    boolean var58 = var52.isFull();
    boolean var59 = var52.isFull();
    boolean var60 = var52.isFull();
    java.lang.String var61 = var52.toString();
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)false);
    boolean var65 = var62.isEmpty();
    java.lang.Object var66 = var62.dequeue();
    QueueFaulty var67 = new QueueFaulty();
    java.lang.String var68 = var67.toString();
    var62.enqueue((java.lang.Object)var68);
    var62.setCapacity(10);
    var52.enqueue((java.lang.Object)10);
    var39.enqueue((java.lang.Object)var52);
    var0.enqueue((java.lang.Object)var39);
    boolean var75 = var0.isEmpty();
    java.lang.Object var76 = var0.dequeue();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + false+ "'", var44.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + false+ "'", var66.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test303");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    java.lang.Object var15 = var0.dequeue();
    java.lang.String var16 = var0.toString();
    boolean var17 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[1.0]"+ "'", var14.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 1.0d+ "'", var15.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test304");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isEmpty();
    java.lang.Object var12 = var8.dequeue();
    var8.setCapacity(10);
    var8.setCapacity(100);
    var0.enqueue((java.lang.Object)var8);
    boolean var18 = var8.isFull();
    boolean var19 = var8.isFull();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isEmpty();
    java.lang.String var24 = var20.toString();
    var20.setCapacity((-1));
    var20.setCapacity(100);
    var8.enqueue((java.lang.Object)var20);
    var8.setCapacity((-1));
    QueueFaulty var32 = new QueueFaulty();
    var32.enqueue((java.lang.Object)false);
    boolean var35 = var32.isEmpty();
    java.lang.Object var36 = var32.dequeue();
    var32.setCapacity(10);
    QueueFaulty var39 = new QueueFaulty();
    boolean var40 = var39.isEmpty();
    java.lang.String var41 = var39.toString();
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    boolean var48 = var42.isFull();
    boolean var49 = var42.isFull();
    java.lang.String var50 = var42.toString();
    var42.enqueue((java.lang.Object)1.0d);
    boolean var53 = var42.isFull();
    var39.enqueue((java.lang.Object)var42);
    var32.enqueue((java.lang.Object)var39);
    var39.setCapacity(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.enqueue((java.lang.Object)1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[false]"+ "'", var24.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test305");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var17 = var0.toString();
    java.lang.Object var18 = var0.dequeue();
    boolean var19 = var0.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[[]]"+ "'", var17.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test306");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    var0.setCapacity(100);
    var0.setCapacity(0);
    var0.setCapacity(100);
    java.lang.Object var14 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test307");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isEmpty();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    java.lang.String var19 = var13.toString();
    boolean var20 = var13.isFull();
    var0.enqueue((java.lang.Object)var20);
    boolean var22 = var0.isEmpty();
    boolean var23 = var0.isFull();
    boolean var24 = var0.isEmpty();
    var0.setCapacity((-1));
    boolean var27 = var0.isEmpty();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    boolean var32 = var28.isFull();
    java.lang.String var33 = var28.toString();
    java.lang.Object var34 = var28.dequeue();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    java.lang.Object var39 = var35.dequeue();
    var35.setCapacity(10);
    boolean var42 = var35.isFull();
    var35.setCapacity(1);
    boolean var45 = var35.isEmpty();
    var35.setCapacity(10);
    var28.enqueue((java.lang.Object)var35);
    boolean var49 = var35.isEmpty();
    java.lang.String var50 = var35.toString();
    var35.setCapacity((-1));
    java.lang.String var53 = var35.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var35);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[false]"+ "'", var33.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[]"+ "'", var53.equals("[]"));

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test308");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    boolean var11 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var14 = new QueueFaulty();
    java.lang.String var15 = var14.toString();
    var14.setCapacity(1);
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isFull();
    boolean var22 = var18.isFull();
    java.lang.Object var23 = var18.dequeue();
    java.lang.String var24 = var18.toString();
    var14.enqueue((java.lang.Object)var18);
    boolean var26 = var14.isFull();
    boolean var27 = var14.isFull();
    java.lang.String var28 = var14.toString();
    java.lang.String var29 = var14.toString();
    var0.enqueue((java.lang.Object)var14);
    java.lang.Object var31 = var14.dequeue();
    boolean var32 = var14.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + false+ "'", var23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[[]]"+ "'", var28.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[[]]"+ "'", var29.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test309");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(1);
    var0.setCapacity(10);
    boolean var12 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test310");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    java.lang.String var7 = var0.toString();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    boolean var10 = var0.isFull();
    boolean var11 = var0.isEmpty();
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test311");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isEmpty();
    QueueFaulty var7 = new QueueFaulty();
    java.lang.String var8 = var7.toString();
    var7.setCapacity(1);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    java.lang.String var17 = var11.toString();
    var7.enqueue((java.lang.Object)var11);
    boolean var19 = var7.isEmpty();
    boolean var20 = var7.isEmpty();
    java.lang.String var21 = var7.toString();
    var7.setCapacity(1);
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    var0.setCapacity(1);
    var0.setCapacity(100);
    java.lang.Object var31 = var0.dequeue();
    var0.setCapacity(100);
    java.lang.Object var34 = var0.dequeue();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isEmpty();
    java.lang.String var39 = var35.toString();
    boolean var40 = var35.isFull();
    boolean var41 = var35.isEmpty();
    java.lang.Object var42 = var35.dequeue();
    java.lang.String var43 = var35.toString();
    boolean var44 = var35.isFull();
    java.lang.String var45 = var35.toString();
    boolean var46 = var35.isEmpty();
    var35.setCapacity(0);
    boolean var49 = var35.isEmpty();
    var35.setCapacity((-1));
    var35.setCapacity(0);
    QueueFaulty var54 = new QueueFaulty();
    QueueFaulty var55 = new QueueFaulty();
    var55.enqueue((java.lang.Object)false);
    boolean var58 = var55.isFull();
    boolean var59 = var55.isFull();
    java.lang.Object var60 = var55.dequeue();
    boolean var61 = var55.isFull();
    boolean var62 = var55.isFull();
    java.lang.String var63 = var55.toString();
    var55.setCapacity(0);
    var54.enqueue((java.lang.Object)var55);
    var55.setCapacity(10);
    QueueFaulty var69 = new QueueFaulty();
    boolean var70 = var69.isEmpty();
    boolean var71 = var69.isEmpty();
    boolean var72 = var69.isEmpty();
    QueueFaulty var73 = new QueueFaulty();
    var73.enqueue((java.lang.Object)false);
    boolean var76 = var73.isFull();
    boolean var77 = var73.isFull();
    java.lang.Object var78 = var73.dequeue();
    var73.enqueue((java.lang.Object)1.0f);
    var69.enqueue((java.lang.Object)var73);
    var55.enqueue((java.lang.Object)var73);
    boolean var83 = var55.isEmpty();
    java.lang.String var84 = var55.toString();
    var55.setCapacity(0);
    java.lang.String var87 = var55.toString();
    var55.setCapacity(0);
    var35.enqueue((java.lang.Object)var55);
    boolean var91 = var35.isFull();
    java.lang.Object var92 = var35.dequeue();
    var0.enqueue((java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[[]]"+ "'", var21.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[false]"+ "'", var39.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + false+ "'", var42.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + false+ "'", var60.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[]"+ "'", var63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + false+ "'", var78.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[[1.0]]"+ "'", var84.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "[[1.0]]"+ "'", var87.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test312");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    boolean var12 = var6.isFull();
    boolean var13 = var6.isFull();
    java.lang.String var14 = var6.toString();
    var6.enqueue((java.lang.Object)1.0d);
    var0.enqueue((java.lang.Object)1.0d);
    boolean var18 = var0.isFull();
    boolean var19 = var0.isFull();
    var0.setCapacity(0);
    boolean var22 = var0.isFull();
    boolean var23 = var0.isEmpty();
    java.lang.String var24 = var0.toString();
    java.lang.String var25 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[1.0]"+ "'", var24.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[1.0]"+ "'", var25.equals("[1.0]"));

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test313");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    boolean var9 = var0.isFull();
    boolean var10 = var0.isEmpty();
    var0.setCapacity(0);
    var0.setCapacity(100);
    java.lang.String var15 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var16 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test314");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test315");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    java.lang.String var24 = var0.toString();
    java.lang.String var25 = var0.toString();
    java.lang.String var26 = var0.toString();
    boolean var27 = var0.isFull();
    boolean var28 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[0]"+ "'", var24.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[0]"+ "'", var25.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[0]"+ "'", var26.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test316");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var3 = var0.dequeue();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    var0.setCapacity(1);
    boolean var9 = var0.isEmpty();
    var0.setCapacity(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var12 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (short)(-1)+ "'", var3.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test317");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.toString();
    var0.setCapacity(10);
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    java.lang.String var12 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test318");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isEmpty();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isFull();
    java.lang.String var13 = var0.toString();
    boolean var14 = var0.isEmpty();
    java.lang.String var15 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test319");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    var0.setCapacity(100);
    java.lang.Object var10 = var0.dequeue();
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isFull();
    java.lang.String var13 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test320");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    java.lang.String var10 = var3.toString();
    var3.setCapacity((-1));
    boolean var13 = var3.isFull();
    boolean var14 = var3.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    java.lang.String var16 = var15.toString();
    var15.setCapacity(1);
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    java.lang.String var25 = var19.toString();
    var15.enqueue((java.lang.Object)var19);
    boolean var27 = var15.isEmpty();
    boolean var28 = var15.isEmpty();
    java.lang.String var29 = var15.toString();
    boolean var30 = var15.isEmpty();
    QueueFaulty var31 = new QueueFaulty();
    boolean var32 = var31.isEmpty();
    boolean var33 = var31.isEmpty();
    boolean var34 = var31.isEmpty();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isFull();
    boolean var39 = var35.isFull();
    java.lang.Object var40 = var35.dequeue();
    var35.enqueue((java.lang.Object)1.0f);
    var31.enqueue((java.lang.Object)var35);
    boolean var44 = var35.isEmpty();
    QueueFaulty var45 = new QueueFaulty();
    var45.enqueue((java.lang.Object)false);
    boolean var48 = var45.isFull();
    boolean var49 = var45.isFull();
    java.lang.Object var50 = var45.dequeue();
    var45.enqueue((java.lang.Object)1.0f);
    java.lang.String var53 = var45.toString();
    java.lang.String var54 = var45.toString();
    var45.setCapacity(10);
    var35.enqueue((java.lang.Object)var45);
    var15.enqueue((java.lang.Object)var45);
    QueueFaulty var59 = new QueueFaulty();
    var59.enqueue((java.lang.Object)false);
    boolean var62 = var59.isFull();
    var59.enqueue((java.lang.Object)0.0f);
    java.lang.Object var65 = var59.dequeue();
    boolean var66 = var59.isEmpty();
    boolean var67 = var59.isFull();
    boolean var68 = var59.isFull();
    var45.enqueue((java.lang.Object)var68);
    java.lang.Object var70 = var45.dequeue();
    var3.enqueue(var70);
    var0.enqueue(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[[]]"+ "'", var29.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + false+ "'", var50.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[1.0]"+ "'", var53.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[1.0]"+ "'", var54.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + false+ "'", var65.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + false+ "'", var70.equals(false));

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test321");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    boolean var12 = var11.isEmpty();
    java.lang.String var13 = var11.toString();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    boolean var20 = var14.isFull();
    boolean var21 = var14.isFull();
    java.lang.String var22 = var14.toString();
    var14.enqueue((java.lang.Object)1.0d);
    boolean var25 = var14.isFull();
    var11.enqueue((java.lang.Object)var14);
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    boolean var33 = var27.isFull();
    boolean var34 = var27.isFull();
    java.lang.String var35 = var27.toString();
    var27.enqueue((java.lang.Object)1.0d);
    var27.setCapacity(0);
    boolean var40 = var27.isEmpty();
    var27.setCapacity(0);
    var14.enqueue((java.lang.Object)var27);
    var0.enqueue((java.lang.Object)var27);
    boolean var45 = var27.isFull();
    boolean var46 = var27.isEmpty();
    boolean var47 = var27.isFull();
    boolean var48 = var27.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test322");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(0);
    boolean var24 = var7.isEmpty();
    var7.setCapacity(100);
    boolean var27 = var7.isFull();
    boolean var28 = var7.isFull();
    boolean var29 = var7.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    boolean var36 = var30.isFull();
    boolean var37 = var30.isFull();
    java.lang.String var38 = var30.toString();
    var30.setCapacity(1);
    java.lang.String var41 = var30.toString();
    var30.setCapacity(1);
    java.lang.String var44 = var30.toString();
    var30.setCapacity(1);
    var30.setCapacity(0);
    var7.enqueue((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test323");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    boolean var13 = var1.isEmpty();
    boolean var14 = var1.isFull();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    boolean var19 = var15.isFull();
    var15.setCapacity(10);
    boolean var22 = var15.isEmpty();
    var15.setCapacity(100);
    var15.setCapacity(0);
    java.lang.Object var27 = var15.dequeue();
    var1.enqueue((java.lang.Object)var15);
    boolean var29 = var15.isFull();
    java.lang.String var30 = var15.toString();
    var15.setCapacity(10);
    boolean var33 = var15.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test324");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    QueueFaulty var12 = new QueueFaulty();
    java.lang.String var13 = var12.toString();
    var12.setCapacity(1);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    java.lang.String var22 = var16.toString();
    var12.enqueue((java.lang.Object)var16);
    boolean var24 = var12.isEmpty();
    boolean var25 = var12.isFull();
    var4.enqueue((java.lang.Object)var25);
    java.lang.Object var27 = var4.dequeue();
    var4.setCapacity(1);
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isEmpty();
    java.lang.Object var34 = var30.dequeue();
    java.lang.String var35 = var30.toString();
    boolean var36 = var30.isEmpty();
    boolean var37 = var30.isFull();
    var30.setCapacity(100);
    var30.setCapacity(10);
    var4.enqueue((java.lang.Object)10);
    var4.setCapacity(1);
    boolean var45 = var4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + true+ "'", var27.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test325");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isEmpty();
    var7.setCapacity(0);
    boolean var24 = var7.isFull();
    boolean var25 = var7.isEmpty();
    boolean var26 = var7.isFull();
    var7.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test326");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var14 = var0.isEmpty();
    boolean var15 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test327");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    boolean var10 = var0.isEmpty();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.setCapacity((-1));
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isEmpty();
    java.lang.Object var26 = var22.dequeue();
    var22.setCapacity(10);
    boolean var29 = var22.isFull();
    java.lang.String var30 = var22.toString();
    boolean var31 = var22.isEmpty();
    QueueFaulty var32 = new QueueFaulty();
    java.lang.String var33 = var32.toString();
    var32.setCapacity(1);
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    java.lang.String var42 = var36.toString();
    var32.enqueue((java.lang.Object)var36);
    var22.enqueue((java.lang.Object)var32);
    boolean var45 = var22.isEmpty();
    var11.enqueue((java.lang.Object)var22);
    java.lang.Object var47 = var22.dequeue();
    boolean var48 = var22.isFull();
    var0.enqueue((java.lang.Object)var48);
    QueueFaulty var50 = new QueueFaulty();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isFull();
    boolean var55 = var51.isFull();
    java.lang.Object var56 = var51.dequeue();
    boolean var57 = var51.isFull();
    boolean var58 = var51.isFull();
    java.lang.String var59 = var51.toString();
    var51.setCapacity(0);
    var50.enqueue((java.lang.Object)var51);
    var51.setCapacity(10);
    QueueFaulty var65 = new QueueFaulty();
    boolean var66 = var65.isEmpty();
    boolean var67 = var65.isEmpty();
    boolean var68 = var65.isEmpty();
    QueueFaulty var69 = new QueueFaulty();
    var69.enqueue((java.lang.Object)false);
    boolean var72 = var69.isFull();
    boolean var73 = var69.isFull();
    java.lang.Object var74 = var69.dequeue();
    var69.enqueue((java.lang.Object)1.0f);
    var65.enqueue((java.lang.Object)var69);
    var51.enqueue((java.lang.Object)var69);
    boolean var79 = var51.isEmpty();
    java.lang.String var80 = var51.toString();
    var51.setCapacity(0);
    var0.enqueue((java.lang.Object)var51);
    boolean var84 = var51.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + false+ "'", var56.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + false+ "'", var74.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[[1.0]]"+ "'", var80.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test328");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.String var11 = var7.toString();
    var7.setCapacity((-1));
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.Object var18 = var14.dequeue();
    var14.setCapacity(10);
    boolean var21 = var14.isFull();
    java.lang.String var22 = var14.toString();
    boolean var23 = var14.isEmpty();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.String var28 = var24.toString();
    boolean var29 = var24.isFull();
    boolean var30 = var24.isEmpty();
    java.lang.Object var31 = var24.dequeue();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isFull();
    var14.enqueue((java.lang.Object)var33);
    boolean var35 = var14.isEmpty();
    var7.enqueue((java.lang.Object)var35);
    java.lang.String var37 = var7.toString();
    boolean var38 = var7.isFull();
    boolean var39 = var7.isEmpty();
    var0.enqueue((java.lang.Object)var7);
    boolean var41 = var0.isEmpty();
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var45 = var42.dequeue();
    boolean var46 = var42.isEmpty();
    QueueFaulty var47 = new QueueFaulty();
    var47.enqueue((java.lang.Object)false);
    boolean var50 = var47.isEmpty();
    java.lang.Object var51 = var47.dequeue();
    var47.setCapacity(10);
    boolean var54 = var47.isFull();
    java.lang.String var55 = var47.toString();
    boolean var56 = var47.isEmpty();
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    boolean var60 = var57.isEmpty();
    java.lang.String var61 = var57.toString();
    boolean var62 = var57.isFull();
    boolean var63 = var57.isEmpty();
    java.lang.Object var64 = var57.dequeue();
    java.lang.String var65 = var57.toString();
    boolean var66 = var57.isFull();
    var47.enqueue((java.lang.Object)var66);
    boolean var68 = var47.isEmpty();
    boolean var69 = var47.isEmpty();
    var42.enqueue((java.lang.Object)var47);
    boolean var71 = var42.isFull();
    var0.enqueue((java.lang.Object)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[false]"+ "'", var11.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[false]"+ "'", var28.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[false, false]"+ "'", var37.equals("[false, false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + (short)(-1)+ "'", var45.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + false+ "'", var51.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[false]"+ "'", var61.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + false+ "'", var64.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[]"+ "'", var65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test329");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.setCapacity(0);
    var10.enqueue((java.lang.Object)var11);
    var11.setCapacity(10);
    QueueFaulty var25 = new QueueFaulty();
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isFull();
    boolean var33 = var29.isFull();
    java.lang.Object var34 = var29.dequeue();
    var29.enqueue((java.lang.Object)1.0f);
    var25.enqueue((java.lang.Object)var29);
    var11.enqueue((java.lang.Object)var29);
    boolean var39 = var11.isEmpty();
    boolean var40 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var40);
    var0.setCapacity(0);
    boolean var44 = var0.isFull();
    QueueFaulty var45 = new QueueFaulty();
    var45.enqueue((java.lang.Object)false);
    boolean var48 = var45.isFull();
    boolean var49 = var45.isFull();
    java.lang.Object var50 = var45.dequeue();
    boolean var51 = var45.isFull();
    boolean var52 = var45.isFull();
    java.lang.String var53 = var45.toString();
    var45.setCapacity((-1));
    var45.setCapacity(0);
    QueueFaulty var58 = new QueueFaulty();
    var58.enqueue((java.lang.Object)false);
    boolean var61 = var58.isFull();
    var58.enqueue((java.lang.Object)0.0f);
    java.lang.Object var64 = var58.dequeue();
    boolean var65 = var58.isEmpty();
    var45.enqueue((java.lang.Object)var65);
    java.lang.String var67 = var45.toString();
    var45.setCapacity(100);
    boolean var70 = var45.isEmpty();
    boolean var71 = var45.isEmpty();
    boolean var72 = var45.isEmpty();
    var0.enqueue((java.lang.Object)var45);
    var0.setCapacity(10);
    boolean var76 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + false+ "'", var50.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[]"+ "'", var53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + false+ "'", var64.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[false]"+ "'", var67.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test330");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    java.lang.String var18 = var12.toString();
    boolean var19 = var12.isFull();
    var4.enqueue((java.lang.Object)var19);
    var4.setCapacity(10);
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    java.lang.Object var27 = var23.dequeue();
    QueueFaulty var28 = new QueueFaulty();
    java.lang.String var29 = var28.toString();
    var23.enqueue((java.lang.Object)var29);
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    java.lang.String var34 = var31.toString();
    java.lang.Object var35 = var31.dequeue();
    var23.enqueue(var35);
    java.lang.String var37 = var23.toString();
    var23.setCapacity(1);
    java.lang.Object var40 = var23.dequeue();
    QueueFaulty var41 = new QueueFaulty();
    var41.enqueue((java.lang.Object)false);
    boolean var44 = var41.isEmpty();
    java.lang.Object var45 = var41.dequeue();
    var41.setCapacity(10);
    boolean var48 = var41.isFull();
    java.lang.String var49 = var41.toString();
    boolean var50 = var41.isEmpty();
    java.lang.String var51 = var41.toString();
    boolean var52 = var41.isEmpty();
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isEmpty();
    java.lang.Object var57 = var53.dequeue();
    var53.setCapacity(10);
    boolean var60 = var53.isFull();
    var53.setCapacity(1);
    var53.setCapacity(10);
    java.lang.String var65 = var53.toString();
    java.lang.String var66 = var53.toString();
    var41.enqueue((java.lang.Object)var53);
    var23.enqueue((java.lang.Object)var53);
    var4.enqueue((java.lang.Object)var23);
    java.lang.String var70 = var23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[false]"+ "'", var34.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[[], false]"+ "'", var37.equals("[[], false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[]"+ "'", var65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "[]"+ "'", var66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[false, []]"+ "'", var70.equals("[false, []]"));

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test331");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(1);
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isEmpty();
    QueueFaulty var13 = new QueueFaulty();
    java.lang.String var14 = var13.toString();
    var13.setCapacity(1);
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isFull();
    boolean var21 = var17.isFull();
    java.lang.Object var22 = var17.dequeue();
    java.lang.String var23 = var17.toString();
    var13.enqueue((java.lang.Object)var17);
    boolean var25 = var13.isFull();
    boolean var26 = var13.isFull();
    java.lang.Object var27 = var13.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var13);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test332");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    QueueFaulty var7 = new QueueFaulty();
    java.lang.String var8 = var7.toString();
    var7.setCapacity(1);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    java.lang.String var17 = var11.toString();
    var7.enqueue((java.lang.Object)var11);
    boolean var19 = var7.isEmpty();
    boolean var20 = var7.isFull();
    var0.enqueue((java.lang.Object)var20);
    boolean var22 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var25 = var0.isFull();
    java.lang.Object var26 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test333");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(1);
    var0.setCapacity(10);
    boolean var12 = var0.isFull();
    boolean var13 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var16 = var0.isFull();
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isEmpty();
    java.lang.Object var21 = var17.dequeue();
    java.lang.String var22 = var17.toString();
    java.lang.String var23 = var17.toString();
    var0.enqueue((java.lang.Object)var17);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var28 = var25.dequeue();
    java.lang.String var29 = var25.toString();
    java.lang.String var30 = var25.toString();
    java.lang.String var31 = var25.toString();
    QueueFaulty var32 = new QueueFaulty();
    var32.enqueue((java.lang.Object)false);
    java.lang.String var35 = var32.toString();
    boolean var36 = var32.isEmpty();
    java.lang.String var37 = var32.toString();
    boolean var38 = var32.isFull();
    boolean var39 = var32.isEmpty();
    java.lang.Object var40 = var32.dequeue();
    var32.setCapacity(0);
    var25.enqueue((java.lang.Object)var32);
    var0.enqueue((java.lang.Object)var32);
    boolean var45 = var0.isFull();
    java.lang.Object var46 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + (short)(-1)+ "'", var28.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[false]"+ "'", var35.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[false]"+ "'", var37.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test334");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    java.lang.String var7 = var0.toString();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    boolean var10 = var0.isFull();
    var0.setCapacity(100);
    java.lang.String var13 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test335");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    QueueFaulty var12 = new QueueFaulty();
    java.lang.String var13 = var12.toString();
    var12.setCapacity(1);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    java.lang.String var22 = var16.toString();
    var12.enqueue((java.lang.Object)var16);
    boolean var24 = var12.isEmpty();
    boolean var25 = var12.isFull();
    var4.enqueue((java.lang.Object)var25);
    java.lang.Object var27 = var4.dequeue();
    var4.setCapacity(1);
    var4.setCapacity(0);
    QueueFaulty var32 = new QueueFaulty();
    java.lang.String var33 = var32.toString();
    var32.setCapacity(1);
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    java.lang.String var42 = var36.toString();
    var32.enqueue((java.lang.Object)var36);
    boolean var44 = var32.isFull();
    boolean var45 = var32.isFull();
    java.lang.String var46 = var32.toString();
    java.lang.String var47 = var32.toString();
    var4.enqueue((java.lang.Object)var32);
    java.lang.String var49 = var4.toString();
    QueueFaulty var50 = new QueueFaulty();
    var50.enqueue((java.lang.Object)false);
    boolean var53 = var50.isEmpty();
    java.lang.Object var54 = var50.dequeue();
    var50.setCapacity(10);
    var50.setCapacity(100);
    boolean var59 = var50.isEmpty();
    QueueFaulty var60 = new QueueFaulty();
    var60.enqueue((java.lang.Object)false);
    boolean var63 = var60.isFull();
    boolean var64 = var60.isFull();
    java.lang.Object var65 = var60.dequeue();
    boolean var66 = var60.isFull();
    boolean var67 = var60.isFull();
    java.lang.String var68 = var60.toString();
    var60.setCapacity((-1));
    java.lang.String var71 = var60.toString();
    boolean var72 = var60.isEmpty();
    var60.setCapacity(1);
    var50.enqueue((java.lang.Object)1);
    boolean var76 = var50.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.enqueue((java.lang.Object)var50);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + true+ "'", var27.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[[]]"+ "'", var46.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[[]]"+ "'", var47.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[[[]]]"+ "'", var49.equals("[[[]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + false+ "'", var54.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + false+ "'", var65.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[]"+ "'", var71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test336");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    java.lang.String var30 = var1.toString();
    QueueFaulty var31 = new QueueFaulty();
    boolean var32 = var31.isEmpty();
    java.lang.String var33 = var31.toString();
    var31.setCapacity((-1));
    boolean var36 = var31.isEmpty();
    boolean var37 = var31.isFull();
    var1.enqueue((java.lang.Object)var31);
    QueueFaulty var39 = new QueueFaulty();
    java.lang.String var40 = var39.toString();
    var39.setCapacity(1);
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    java.lang.String var49 = var43.toString();
    var39.enqueue((java.lang.Object)var43);
    java.lang.Object var51 = var39.dequeue();
    var39.enqueue((java.lang.Object)100);
    java.lang.String var54 = var39.toString();
    var31.enqueue((java.lang.Object)var39);
    QueueFaulty var56 = new QueueFaulty();
    var56.enqueue((java.lang.Object)false);
    QueueFaulty var59 = new QueueFaulty();
    var59.enqueue((java.lang.Object)false);
    boolean var62 = var59.isEmpty();
    boolean var63 = var59.isFull();
    var59.setCapacity(10);
    boolean var66 = var59.isEmpty();
    var59.setCapacity(100);
    var59.setCapacity(0);
    var56.enqueue((java.lang.Object)0);
    var31.enqueue((java.lang.Object)var56);
    QueueFaulty var73 = new QueueFaulty();
    var73.enqueue((java.lang.Object)false);
    java.lang.String var76 = var73.toString();
    boolean var77 = var73.isEmpty();
    boolean var78 = var73.isEmpty();
    var31.enqueue((java.lang.Object)var73);
    java.lang.Object var80 = var73.dequeue();
    var73.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[1.0]]"+ "'", var30.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[100]"+ "'", var54.equals("[100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "[false]"+ "'", var76.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + false+ "'", var80.equals(false));

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test337");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.toString();
    var0.setCapacity(10);
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    boolean var14 = var10.isFull();
    java.lang.String var15 = var10.toString();
    java.lang.Object var16 = var10.dequeue();
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isEmpty();
    java.lang.Object var21 = var17.dequeue();
    var17.setCapacity(10);
    boolean var24 = var17.isFull();
    var17.setCapacity(1);
    boolean var27 = var17.isEmpty();
    var17.setCapacity(10);
    var10.enqueue((java.lang.Object)var17);
    boolean var31 = var17.isEmpty();
    var17.setCapacity(0);
    boolean var34 = var17.isEmpty();
    java.lang.String var35 = var17.toString();
    boolean var36 = var17.isFull();
    var0.enqueue((java.lang.Object)var36);
    boolean var38 = var0.isEmpty();
    QueueFaulty var39 = new QueueFaulty();
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isFull();
    boolean var44 = var40.isFull();
    java.lang.Object var45 = var40.dequeue();
    boolean var46 = var40.isFull();
    boolean var47 = var40.isFull();
    java.lang.String var48 = var40.toString();
    var40.setCapacity(0);
    var39.enqueue((java.lang.Object)var40);
    var40.setCapacity(10);
    java.lang.String var54 = var40.toString();
    QueueFaulty var55 = new QueueFaulty();
    var55.enqueue((java.lang.Object)false);
    boolean var58 = var55.isFull();
    boolean var59 = var55.isFull();
    java.lang.Object var60 = var55.dequeue();
    boolean var61 = var55.isFull();
    boolean var62 = var55.isFull();
    java.lang.String var63 = var55.toString();
    var55.enqueue((java.lang.Object)1.0d);
    var55.setCapacity(0);
    boolean var68 = var55.isEmpty();
    java.lang.String var69 = var55.toString();
    java.lang.Object var70 = var55.dequeue();
    java.lang.String var71 = var55.toString();
    var40.enqueue((java.lang.Object)var55);
    var55.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    boolean var76 = var0.isEmpty();
    var0.setCapacity(1);
    boolean var79 = var0.isEmpty();
    boolean var80 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + false+ "'", var60.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[]"+ "'", var63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "[1.0]"+ "'", var69.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + 1.0d+ "'", var70.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[]"+ "'", var71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test338");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    boolean var13 = var0.isFull();
    boolean var14 = var0.isFull();
    java.lang.String var15 = var0.toString();
    boolean var16 = var0.isFull();
    java.lang.String var17 = var0.toString();
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[1.0]"+ "'", var15.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[1.0]"+ "'", var17.equals("[1.0]"));

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test339");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isEmpty();
    java.lang.Object var8 = var0.dequeue();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test340");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    var0.setCapacity(10);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    var11.enqueue((java.lang.Object)"hi!");
    boolean var21 = var11.isFull();
    var0.enqueue((java.lang.Object)var11);
    java.lang.String var23 = var11.toString();
    java.lang.Object var24 = var11.dequeue();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    var25.enqueue((java.lang.Object)1.0f);
    java.lang.String var33 = var25.toString();
    java.lang.String var34 = var25.toString();
    boolean var35 = var25.isEmpty();
    java.lang.Object var36 = var25.dequeue();
    var25.setCapacity(100);
    boolean var39 = var25.isFull();
    var25.setCapacity(0);
    boolean var42 = var25.isEmpty();
    var11.enqueue((java.lang.Object)var42);
    QueueFaulty var44 = new QueueFaulty();
    boolean var45 = var44.isEmpty();
    boolean var46 = var44.isEmpty();
    boolean var47 = var44.isEmpty();
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isFull();
    boolean var52 = var48.isFull();
    java.lang.Object var53 = var48.dequeue();
    var48.enqueue((java.lang.Object)1.0f);
    var44.enqueue((java.lang.Object)var48);
    boolean var57 = var48.isFull();
    java.lang.Object var58 = var48.dequeue();
    var48.setCapacity((-1));
    var11.enqueue((java.lang.Object)var48);
    var11.setCapacity(100);
    boolean var64 = var11.isFull();
    java.lang.Object var65 = var11.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[hi!]"+ "'", var23.equals("[hi!]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[1.0]"+ "'", var33.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[1.0]"+ "'", var34.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 1.0f+ "'", var36.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + false+ "'", var53.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + 1.0f+ "'", var58.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test341");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    var7.enqueue((java.lang.Object)var24);
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    java.lang.String var38 = var35.toString();
    boolean var39 = var35.isEmpty();
    java.lang.String var40 = var35.toString();
    boolean var41 = var35.isFull();
    boolean var42 = var35.isEmpty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    boolean var51 = var43.isFull();
    boolean var52 = var43.isEmpty();
    var35.enqueue((java.lang.Object)var43);
    var35.setCapacity(0);
    var24.enqueue((java.lang.Object)0);
    java.lang.Object var57 = var24.dequeue();
    var24.setCapacity((-1));
    var24.setCapacity(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var62 = var24.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[false]"+ "'", var40.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 0+ "'", var57.equals(0));

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test342");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    var0.setCapacity(0);
    QueueFaulty var6 = new QueueFaulty();
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    boolean var9 = var6.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    var10.enqueue((java.lang.Object)1.0f);
    var6.enqueue((java.lang.Object)var10);
    boolean var19 = var10.isEmpty();
    var10.setCapacity(100);
    var0.enqueue((java.lang.Object)100);
    java.lang.String var23 = var0.toString();
    boolean var24 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[false, 100]"+ "'", var23.equals("[false, 100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test343");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    boolean var22 = var10.isEmpty();
    boolean var23 = var10.isEmpty();
    java.lang.String var24 = var10.toString();
    boolean var25 = var10.isEmpty();
    boolean var26 = var10.isEmpty();
    boolean var27 = var10.isEmpty();
    var0.enqueue((java.lang.Object)var10);
    boolean var29 = var0.isEmpty();
    boolean var30 = var0.isFull();
    boolean var31 = var0.isEmpty();
    boolean var32 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[]]"+ "'", var24.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test344");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    java.lang.Object var10 = var0.dequeue();
    var0.setCapacity(0);
    boolean var13 = var0.isEmpty();
    boolean var14 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test345");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    java.lang.String var11 = var8.toString();
    java.lang.Object var12 = var8.dequeue();
    var0.enqueue(var12);
    java.lang.String var14 = var0.toString();
    var0.setCapacity(1);
    java.lang.Object var17 = var0.dequeue();
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isFull();
    boolean var22 = var18.isFull();
    java.lang.Object var23 = var18.dequeue();
    boolean var24 = var18.isFull();
    boolean var25 = var18.isFull();
    java.lang.String var26 = var18.toString();
    var18.setCapacity(0);
    var18.setCapacity(0);
    QueueFaulty var31 = new QueueFaulty();
    var31.setCapacity(100);
    QueueFaulty var34 = new QueueFaulty();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isFull();
    boolean var39 = var35.isFull();
    java.lang.Object var40 = var35.dequeue();
    boolean var41 = var35.isFull();
    boolean var42 = var35.isFull();
    java.lang.String var43 = var35.toString();
    var35.setCapacity(0);
    var34.enqueue((java.lang.Object)var35);
    boolean var47 = var35.isEmpty();
    var31.enqueue((java.lang.Object)var47);
    var18.enqueue((java.lang.Object)var31);
    var0.enqueue((java.lang.Object)var31);
    java.lang.Object var51 = var31.dequeue();
    var31.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[false]"+ "'", var11.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[], false]"+ "'", var14.equals("[[], false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + false+ "'", var23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + true+ "'", var51.equals(true));

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test346");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    var0.enqueue((java.lang.Object)(short)10);
    var0.setCapacity(10);
    var0.setCapacity(100);
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    java.lang.Object var12 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test347");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    boolean var24 = var16.isFull();
    java.lang.String var25 = var16.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.Object var30 = var26.dequeue();
    QueueFaulty var31 = new QueueFaulty();
    java.lang.String var32 = var31.toString();
    var26.enqueue((java.lang.Object)var32);
    var26.setCapacity(10);
    var16.enqueue((java.lang.Object)10);
    var3.enqueue((java.lang.Object)var16);
    java.lang.String var38 = var16.toString();
    var16.setCapacity(100);
    boolean var41 = var16.isFull();
    boolean var42 = var16.isFull();
    var16.setCapacity((-1));
    boolean var45 = var16.isFull();
    var16.setCapacity((-1));
    java.lang.Object var48 = var16.dequeue();
    var16.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[10]"+ "'", var38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test348");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isFull();
    boolean var2 = var0.isFull();
    boolean var3 = var0.isFull();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test349");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    var0.setCapacity((-1));
    boolean var15 = var0.isFull();
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test350");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var10);
    boolean var23 = var0.isFull();
    var0.setCapacity(1);
    QueueFaulty var26 = new QueueFaulty();
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    boolean var33 = var27.isFull();
    boolean var34 = var27.isFull();
    java.lang.String var35 = var27.toString();
    var27.setCapacity(0);
    var26.enqueue((java.lang.Object)var27);
    boolean var39 = var27.isEmpty();
    boolean var40 = var27.isFull();
    QueueFaulty var41 = new QueueFaulty();
    var41.enqueue((java.lang.Object)false);
    boolean var44 = var41.isEmpty();
    boolean var45 = var41.isFull();
    var41.setCapacity(10);
    boolean var48 = var41.isEmpty();
    var41.setCapacity(100);
    var41.setCapacity(0);
    java.lang.Object var53 = var41.dequeue();
    var27.enqueue((java.lang.Object)var41);
    boolean var55 = var41.isEmpty();
    var41.setCapacity(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var41);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test351");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    var0.setCapacity((-1));
    boolean var17 = var0.isFull();
    java.lang.Object var18 = var0.dequeue();
    boolean var19 = var0.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isEmpty();
    boolean var24 = var20.isFull();
    var20.setCapacity(10);
    boolean var27 = var20.isEmpty();
    var20.setCapacity(100);
    java.lang.Object var30 = var20.dequeue();
    var20.setCapacity(0);
    java.lang.String var33 = var20.toString();
    java.lang.String var34 = var20.toString();
    var20.setCapacity(100);
    var0.enqueue((java.lang.Object)100);
    java.lang.String var38 = var0.toString();
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[]"+ "'", var34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[100]"+ "'", var38.equals("[100]"));

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test352");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isEmpty();
    java.lang.Object var8 = var4.dequeue();
    var4.setCapacity(10);
    boolean var11 = var4.isFull();
    var4.setCapacity(1);
    var4.setCapacity(10);
    java.lang.String var16 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var18 = var4.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test353");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    java.lang.Object var12 = var0.dequeue();
    var0.enqueue((java.lang.Object)100);
    boolean var15 = var0.isFull();
    java.lang.Object var16 = var0.dequeue();
    java.lang.String var17 = var0.toString();
    boolean var18 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var19 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + 100+ "'", var16.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test354");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.toString();
    boolean var8 = var0.isFull();
    var0.setCapacity((-1));
    boolean var11 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test355");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    java.lang.String var12 = var0.toString();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    java.lang.String var19 = var13.toString();
    boolean var20 = var13.isFull();
    boolean var21 = var13.isFull();
    var13.setCapacity((-1));
    var0.enqueue((java.lang.Object)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var25 = var13.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[false]"+ "'", var12.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test356");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    var0.setCapacity((-1));
    boolean var17 = var0.isFull();
    java.lang.Object var18 = var0.dequeue();
    boolean var19 = var0.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isEmpty();
    boolean var24 = var20.isFull();
    var20.setCapacity(10);
    boolean var27 = var20.isEmpty();
    var20.setCapacity(100);
    java.lang.Object var30 = var20.dequeue();
    var20.setCapacity(0);
    java.lang.String var33 = var20.toString();
    java.lang.String var34 = var20.toString();
    var20.setCapacity(100);
    var0.enqueue((java.lang.Object)100);
    java.lang.String var38 = var0.toString();
    boolean var39 = var0.isFull();
    boolean var40 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[]"+ "'", var34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[100]"+ "'", var38.equals("[100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test357");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    java.lang.String var12 = var0.toString();
    boolean var13 = var0.isEmpty();
    var0.setCapacity((-1));
    var0.setCapacity(1);
    java.lang.String var18 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test358");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isFull();
    boolean var13 = var0.isFull();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.String var18 = var14.toString();
    boolean var19 = var14.isFull();
    boolean var20 = var14.isEmpty();
    java.lang.Object var21 = var14.dequeue();
    java.lang.String var22 = var14.toString();
    boolean var23 = var14.isFull();
    java.lang.String var24 = var14.toString();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isEmpty();
    java.lang.String var29 = var25.toString();
    boolean var30 = var25.isFull();
    boolean var31 = var25.isEmpty();
    java.lang.Object var32 = var25.dequeue();
    var14.enqueue((java.lang.Object)var25);
    java.lang.Object var34 = var14.dequeue();
    java.lang.String var35 = var14.toString();
    var14.setCapacity((-1));
    boolean var38 = var14.isEmpty();
    var0.enqueue((java.lang.Object)var14);
    boolean var40 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var41 = var0.toString();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[false]"+ "'", var18.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[false]"+ "'", var29.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test359");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    java.lang.String var13 = var0.toString();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    boolean var20 = var14.isFull();
    boolean var21 = var14.isFull();
    java.lang.String var22 = var14.toString();
    var14.enqueue((java.lang.Object)1.0d);
    var14.setCapacity(0);
    java.lang.String var27 = var14.toString();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    java.lang.Object var32 = var28.dequeue();
    java.lang.String var33 = var28.toString();
    QueueFaulty var34 = new QueueFaulty();
    java.lang.String var35 = var34.toString();
    var34.setCapacity(1);
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isFull();
    boolean var42 = var38.isFull();
    java.lang.Object var43 = var38.dequeue();
    java.lang.String var44 = var38.toString();
    var34.enqueue((java.lang.Object)var38);
    var28.enqueue((java.lang.Object)var38);
    QueueFaulty var47 = new QueueFaulty();
    var47.enqueue((java.lang.Object)false);
    boolean var50 = var47.isFull();
    boolean var51 = var47.isFull();
    java.lang.Object var52 = var47.dequeue();
    var47.enqueue((java.lang.Object)1.0f);
    var47.setCapacity(10);
    var28.enqueue((java.lang.Object)10);
    boolean var58 = var28.isFull();
    var14.enqueue((java.lang.Object)var28);
    var0.enqueue((java.lang.Object)var28);
    boolean var61 = var28.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var62 = var28.toString();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[1.0]"+ "'", var27.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test360");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    var0.setCapacity(1);
    boolean var15 = var0.isEmpty();
    java.lang.String var16 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var17 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test361");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isEmpty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.String var16 = var12.toString();
    boolean var17 = var12.isEmpty();
    boolean var18 = var12.isFull();
    var0.enqueue((java.lang.Object)var12);
    java.lang.String var20 = var12.toString();
    boolean var21 = var12.isEmpty();
    var12.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[false]"+ "'", var16.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[false]"+ "'", var20.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test362");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var14 = var0.isEmpty();
    var0.setCapacity((-1));
    var0.setCapacity(0);
    QueueFaulty var19 = new QueueFaulty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    boolean var26 = var20.isFull();
    boolean var27 = var20.isFull();
    java.lang.String var28 = var20.toString();
    var20.setCapacity(0);
    var19.enqueue((java.lang.Object)var20);
    var20.setCapacity(10);
    QueueFaulty var34 = new QueueFaulty();
    boolean var35 = var34.isEmpty();
    boolean var36 = var34.isEmpty();
    boolean var37 = var34.isEmpty();
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isFull();
    boolean var42 = var38.isFull();
    java.lang.Object var43 = var38.dequeue();
    var38.enqueue((java.lang.Object)1.0f);
    var34.enqueue((java.lang.Object)var38);
    var20.enqueue((java.lang.Object)var38);
    boolean var48 = var20.isEmpty();
    java.lang.String var49 = var20.toString();
    var20.setCapacity(0);
    java.lang.String var52 = var20.toString();
    var20.setCapacity(0);
    var0.enqueue((java.lang.Object)var20);
    boolean var56 = var0.isFull();
    boolean var57 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[[1.0]]"+ "'", var49.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[[1.0]]"+ "'", var52.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test363");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    var10.enqueue((java.lang.Object)1.0f);
    java.lang.String var18 = var10.toString();
    java.lang.String var19 = var10.toString();
    boolean var20 = var10.isEmpty();
    java.lang.String var21 = var10.toString();
    boolean var22 = var10.isFull();
    boolean var23 = var10.isFull();
    var0.enqueue((java.lang.Object)var23);
    QueueFaulty var25 = new QueueFaulty();
    java.lang.String var26 = var25.toString();
    var25.setCapacity(1);
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isFull();
    boolean var33 = var29.isFull();
    java.lang.Object var34 = var29.dequeue();
    java.lang.String var35 = var29.toString();
    var25.enqueue((java.lang.Object)var29);
    boolean var37 = var25.isEmpty();
    boolean var38 = var25.isEmpty();
    java.lang.Object var39 = var25.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue(var39);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[1.0]"+ "'", var18.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[1.0]"+ "'", var19.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[1.0]"+ "'", var21.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test364");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    var0.setCapacity(10);
    boolean var11 = var0.isFull();
    boolean var12 = var0.isFull();
    boolean var13 = var0.isFull();
    QueueFaulty var14 = new QueueFaulty();
    java.lang.String var15 = var14.toString();
    var14.setCapacity(1);
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isFull();
    boolean var22 = var18.isFull();
    java.lang.Object var23 = var18.dequeue();
    java.lang.String var24 = var18.toString();
    var14.enqueue((java.lang.Object)var18);
    boolean var26 = var14.isEmpty();
    boolean var27 = var14.isEmpty();
    java.lang.String var28 = var14.toString();
    var14.setCapacity((-1));
    boolean var31 = var14.isFull();
    java.lang.Object var32 = var14.dequeue();
    boolean var33 = var14.isEmpty();
    boolean var34 = var14.isEmpty();
    var14.setCapacity(0);
    var0.enqueue((java.lang.Object)var14);
    boolean var38 = var14.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + false+ "'", var23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[[]]"+ "'", var28.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test365");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    var0.setCapacity(0);
    boolean var10 = var0.isEmpty();
    var0.setCapacity(1);
    boolean var13 = var0.isFull();
    java.lang.String var14 = var0.toString();
    java.lang.String var15 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var16 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test366");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(100);
    boolean var9 = var0.isEmpty();
    var0.setCapacity((-1));
    java.lang.String var12 = var0.toString();
    var0.setCapacity(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test367");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    var0.setCapacity(10);
    boolean var7 = var0.isEmpty();
    var0.setCapacity(100);
    var0.setCapacity(0);
    java.lang.Object var12 = var0.dequeue();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test368");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    java.lang.String var20 = var0.toString();
    java.lang.String var21 = var0.toString();
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isEmpty();
    java.lang.String var26 = var22.toString();
    boolean var27 = var22.isFull();
    boolean var28 = var22.isEmpty();
    java.lang.Object var29 = var22.dequeue();
    java.lang.String var30 = var22.toString();
    boolean var31 = var22.isFull();
    java.lang.String var32 = var22.toString();
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isEmpty();
    java.lang.String var37 = var33.toString();
    boolean var38 = var33.isFull();
    boolean var39 = var33.isEmpty();
    java.lang.Object var40 = var33.dequeue();
    var22.enqueue((java.lang.Object)var33);
    java.lang.Object var42 = var22.dequeue();
    var0.enqueue((java.lang.Object)var22);
    boolean var44 = var22.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[[]]"+ "'", var20.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[[]]"+ "'", var21.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[false]"+ "'", var26.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[false]"+ "'", var37.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test369");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isEmpty();
    var0.setCapacity((-1));
    java.lang.Object var14 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 1.0f+ "'", var14.equals(1.0f));

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test370");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    var0.setCapacity(10);
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    java.lang.Object var12 = var0.dequeue();
    boolean var13 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test371");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isEmpty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.String var16 = var12.toString();
    boolean var17 = var12.isEmpty();
    boolean var18 = var12.isFull();
    var0.enqueue((java.lang.Object)var12);
    java.lang.Object var20 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[false]"+ "'", var16.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test372");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isFull();
    java.lang.String var13 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[1.0]"+ "'", var11.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test373");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var10);
    boolean var23 = var0.isFull();
    var0.setCapacity(1);
    boolean var26 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var27 = var0.dequeue();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test374");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    QueueFaulty var5 = new QueueFaulty();
    var5.enqueue((java.lang.Object)false);
    boolean var8 = var5.isFull();
    boolean var9 = var5.isFull();
    java.lang.Object var10 = var5.dequeue();
    boolean var11 = var5.isFull();
    boolean var12 = var5.isFull();
    java.lang.String var13 = var5.toString();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    boolean var20 = var14.isFull();
    boolean var21 = var14.isFull();
    java.lang.String var22 = var14.toString();
    var14.enqueue((java.lang.Object)1.0d);
    var14.setCapacity(0);
    var5.enqueue((java.lang.Object)0);
    java.lang.String var28 = var5.toString();
    boolean var29 = var5.isFull();
    java.lang.Object var30 = var5.dequeue();
    boolean var31 = var5.isEmpty();
    var0.enqueue((java.lang.Object)var5);
    var0.setCapacity((-1));
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isFull();
    java.lang.String var39 = var35.toString();
    java.lang.String var40 = var35.toString();
    var35.setCapacity(1);
    boolean var43 = var35.isFull();
    var35.setCapacity(10);
    var0.enqueue((java.lang.Object)var35);
    boolean var47 = var35.isEmpty();
    java.lang.Object var48 = var35.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[0]"+ "'", var28.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + 0+ "'", var30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[false]"+ "'", var39.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[false]"+ "'", var40.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test375");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.Object var8 = var0.dequeue();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    java.lang.Object var13 = var9.dequeue();
    boolean var14 = var9.isFull();
    boolean var15 = var9.isEmpty();
    var0.enqueue((java.lang.Object)var9);
    java.lang.String var17 = var0.toString();
    java.lang.Object var18 = var0.dequeue();
    boolean var19 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 1.0f+ "'", var8.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[[]]"+ "'", var17.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test376");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(1);
    var0.setCapacity(10);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    var11.enqueue((java.lang.Object)"hi!");
    boolean var21 = var11.isFull();
    var0.enqueue((java.lang.Object)var11);
    java.lang.String var23 = var11.toString();
    java.lang.Object var24 = var11.dequeue();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    var25.enqueue((java.lang.Object)1.0f);
    java.lang.String var33 = var25.toString();
    java.lang.String var34 = var25.toString();
    boolean var35 = var25.isEmpty();
    java.lang.Object var36 = var25.dequeue();
    var25.setCapacity(100);
    boolean var39 = var25.isFull();
    var25.setCapacity(0);
    boolean var42 = var25.isEmpty();
    var11.enqueue((java.lang.Object)var42);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isFull();
    boolean var48 = var44.isFull();
    java.lang.Object var49 = var44.dequeue();
    boolean var50 = var44.isFull();
    boolean var51 = var44.isFull();
    java.lang.String var52 = var44.toString();
    var44.setCapacity(10);
    var11.enqueue((java.lang.Object)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[hi!]"+ "'", var23.equals("[hi!]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[1.0]"+ "'", var33.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[1.0]"+ "'", var34.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 1.0f+ "'", var36.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + false+ "'", var49.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test377");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    java.lang.Object var15 = var0.dequeue();
    boolean var16 = var0.isFull();
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isEmpty();
    java.lang.String var21 = var17.toString();
    boolean var22 = var17.isFull();
    boolean var23 = var17.isEmpty();
    java.lang.Object var24 = var17.dequeue();
    java.lang.String var25 = var17.toString();
    boolean var26 = var17.isFull();
    java.lang.String var27 = var17.toString();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    java.lang.String var32 = var28.toString();
    boolean var33 = var28.isFull();
    boolean var34 = var28.isEmpty();
    java.lang.Object var35 = var28.dequeue();
    var17.enqueue((java.lang.Object)var28);
    boolean var37 = var17.isFull();
    QueueFaulty var38 = new QueueFaulty();
    java.lang.String var39 = var38.toString();
    var38.setCapacity(1);
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    java.lang.String var48 = var42.toString();
    var38.enqueue((java.lang.Object)var42);
    boolean var50 = var38.isEmpty();
    boolean var51 = var38.isEmpty();
    java.lang.String var52 = var38.toString();
    var38.setCapacity(100);
    boolean var55 = var38.isFull();
    var38.setCapacity(10);
    boolean var58 = var38.isFull();
    var17.enqueue((java.lang.Object)var38);
    boolean var60 = var38.isFull();
    var0.enqueue((java.lang.Object)var38);
    var38.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[1.0]"+ "'", var14.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 1.0d+ "'", var15.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[false]"+ "'", var21.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[false]"+ "'", var32.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[]"+ "'", var39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[[]]"+ "'", var52.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test378");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isFull();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    boolean var11 = var7.isFull();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var0.enqueue((java.lang.Object)var7);
    java.lang.Object var16 = var7.dequeue();
    boolean var17 = var7.isFull();
    var7.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test379");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    java.lang.String var4 = var0.toString();
    QueueFaulty var5 = new QueueFaulty();
    var5.enqueue((java.lang.Object)false);
    boolean var8 = var5.isFull();
    boolean var9 = var5.isFull();
    java.lang.Object var10 = var5.dequeue();
    var5.enqueue((java.lang.Object)1.0f);
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isEmpty();
    java.lang.Object var17 = var13.dequeue();
    var13.setCapacity(10);
    boolean var20 = var13.isFull();
    var5.enqueue((java.lang.Object)var13);
    var5.setCapacity(0);
    java.lang.Object var24 = var5.dequeue();
    var0.enqueue(var24);
    java.lang.Object var26 = var0.dequeue();
    java.lang.String var27 = var0.toString();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    boolean var32 = var28.isFull();
    var28.setCapacity(10);
    boolean var35 = var28.isEmpty();
    java.lang.Object var36 = var28.dequeue();
    boolean var37 = var28.isFull();
    boolean var38 = var28.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var38);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test380");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.setCapacity(0);
    var10.enqueue((java.lang.Object)var11);
    var11.setCapacity(10);
    QueueFaulty var25 = new QueueFaulty();
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isFull();
    boolean var33 = var29.isFull();
    java.lang.Object var34 = var29.dequeue();
    var29.enqueue((java.lang.Object)1.0f);
    var25.enqueue((java.lang.Object)var29);
    var11.enqueue((java.lang.Object)var29);
    boolean var39 = var11.isEmpty();
    boolean var40 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var40);
    var0.setCapacity(0);
    boolean var44 = var0.isFull();
    java.lang.String var45 = var0.toString();
    boolean var46 = var0.isEmpty();
    var0.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + false+ "'", var34.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[false]"+ "'", var45.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test381");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    var7.setCapacity(0);
    var7.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test382");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    boolean var15 = var0.isEmpty();
    QueueFaulty var16 = new QueueFaulty();
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    boolean var19 = var16.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    var20.enqueue((java.lang.Object)1.0f);
    var16.enqueue((java.lang.Object)var20);
    boolean var29 = var20.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    java.lang.String var38 = var30.toString();
    java.lang.String var39 = var30.toString();
    var30.setCapacity(10);
    var20.enqueue((java.lang.Object)var30);
    var0.enqueue((java.lang.Object)var30);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isFull();
    var44.enqueue((java.lang.Object)0.0f);
    java.lang.Object var50 = var44.dequeue();
    boolean var51 = var44.isEmpty();
    boolean var52 = var44.isFull();
    boolean var53 = var44.isFull();
    var30.enqueue((java.lang.Object)var53);
    java.lang.Object var55 = var30.dequeue();
    boolean var56 = var30.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[1.0]"+ "'", var38.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[1.0]"+ "'", var39.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + false+ "'", var50.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + false+ "'", var55.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test383");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    boolean var16 = var12.isFull();
    boolean var17 = var12.isEmpty();
    java.lang.String var18 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    var12.setCapacity(100);
    boolean var22 = var12.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    boolean var29 = var23.isFull();
    boolean var30 = var23.isFull();
    java.lang.String var31 = var23.toString();
    var23.enqueue((java.lang.Object)1.0d);
    var23.setCapacity(0);
    java.lang.String var36 = var23.toString();
    var12.enqueue((java.lang.Object)var23);
    boolean var38 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[false]"+ "'", var18.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[1.0]"+ "'", var36.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test384");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    QueueFaulty var7 = new QueueFaulty();
    boolean var8 = var7.isEmpty();
    java.lang.String var9 = var7.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.enqueue((java.lang.Object)1.0d);
    boolean var21 = var10.isFull();
    var7.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var7);
    var0.setCapacity((-1));
    java.lang.Object var26 = var0.dequeue();
    var0.setCapacity((-1));
    java.lang.String var29 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var30 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test385");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    var0.setCapacity(100);
    boolean var17 = var0.isFull();
    var0.setCapacity(10);
    boolean var20 = var0.isFull();
    boolean var21 = var0.isEmpty();
    java.lang.Object var22 = var0.dequeue();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    boolean var29 = var23.isFull();
    boolean var30 = var23.isFull();
    java.lang.String var31 = var23.toString();
    var23.enqueue((java.lang.Object)1.0d);
    var23.setCapacity(0);
    boolean var36 = var23.isEmpty();
    var23.setCapacity(0);
    java.lang.String var39 = var23.toString();
    var0.enqueue((java.lang.Object)var39);
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[1.0]"+ "'", var39.equals("[1.0]"));

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test386");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    QueueFaulty var12 = new QueueFaulty();
    java.lang.String var13 = var12.toString();
    var12.setCapacity(1);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    java.lang.String var22 = var16.toString();
    var12.enqueue((java.lang.Object)var16);
    boolean var24 = var12.isEmpty();
    boolean var25 = var12.isFull();
    var4.enqueue((java.lang.Object)var25);
    var4.setCapacity((-1));
    java.lang.String var29 = var4.toString();
    QueueFaulty var30 = new QueueFaulty();
    boolean var31 = var30.isEmpty();
    java.lang.String var32 = var30.toString();
    var30.setCapacity((-1));
    var30.enqueue((java.lang.Object)(byte)0);
    var4.enqueue((java.lang.Object)var30);
    QueueFaulty var38 = new QueueFaulty();
    java.lang.String var39 = var38.toString();
    var38.setCapacity(1);
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    java.lang.String var48 = var42.toString();
    var38.enqueue((java.lang.Object)var42);
    boolean var50 = var38.isEmpty();
    java.lang.Object var51 = var38.dequeue();
    var38.enqueue((java.lang.Object)1.0d);
    boolean var54 = var38.isEmpty();
    boolean var55 = var38.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.enqueue((java.lang.Object)var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[true]"+ "'", var29.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[]"+ "'", var39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test387");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isEmpty();
    QueueFaulty var7 = new QueueFaulty();
    java.lang.String var8 = var7.toString();
    var7.setCapacity(1);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    java.lang.String var17 = var11.toString();
    var7.enqueue((java.lang.Object)var11);
    boolean var19 = var7.isEmpty();
    boolean var20 = var7.isEmpty();
    java.lang.String var21 = var7.toString();
    var7.setCapacity(1);
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    java.lang.Object var27 = var7.dequeue();
    boolean var28 = var7.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var29 = var7.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[[]]"+ "'", var21.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test388");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    var0.setCapacity(10);
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test389");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isEmpty();
    boolean var8 = var0.isFull();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    java.lang.String var13 = var10.toString();
    boolean var14 = var10.isEmpty();
    boolean var15 = var10.isEmpty();
    boolean var16 = var10.isEmpty();
    QueueFaulty var17 = new QueueFaulty();
    java.lang.String var18 = var17.toString();
    var17.setCapacity(1);
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isFull();
    boolean var25 = var21.isFull();
    java.lang.Object var26 = var21.dequeue();
    java.lang.String var27 = var21.toString();
    var17.enqueue((java.lang.Object)var21);
    boolean var29 = var17.isEmpty();
    boolean var30 = var17.isEmpty();
    java.lang.String var31 = var17.toString();
    var17.setCapacity(1);
    var17.setCapacity(10);
    var10.enqueue((java.lang.Object)var17);
    boolean var37 = var17.isFull();
    var0.enqueue((java.lang.Object)var17);
    java.lang.Object var39 = var17.dequeue();
    boolean var40 = var17.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[false]"+ "'", var13.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[[]]"+ "'", var31.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test390");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    var0.setCapacity(100);
    java.lang.Object var17 = var0.dequeue();
    var0.setCapacity(100);
    java.lang.String var20 = var0.toString();
    boolean var21 = var0.isFull();
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isEmpty();
    java.lang.String var26 = var22.toString();
    boolean var27 = var22.isFull();
    boolean var28 = var22.isEmpty();
    QueueFaulty var29 = new QueueFaulty();
    var29.enqueue((java.lang.Object)false);
    boolean var32 = var29.isEmpty();
    java.lang.Object var33 = var29.dequeue();
    var29.setCapacity(10);
    boolean var36 = var29.isFull();
    var29.enqueue((java.lang.Object)"hi!");
    var22.enqueue((java.lang.Object)var29);
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isFull();
    boolean var44 = var40.isFull();
    java.lang.Object var45 = var40.dequeue();
    boolean var46 = var40.isFull();
    boolean var47 = var40.isFull();
    java.lang.String var48 = var40.toString();
    var40.setCapacity((-1));
    java.lang.String var51 = var40.toString();
    java.lang.String var52 = var40.toString();
    QueueFaulty var53 = new QueueFaulty();
    var53.enqueue((java.lang.Object)false);
    boolean var56 = var53.isEmpty();
    java.lang.Object var57 = var53.dequeue();
    QueueFaulty var58 = new QueueFaulty();
    java.lang.String var59 = var58.toString();
    var53.enqueue((java.lang.Object)var59);
    var53.setCapacity(10);
    boolean var63 = var53.isFull();
    boolean var64 = var53.isEmpty();
    QueueFaulty var65 = new QueueFaulty();
    var65.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var68 = var65.dequeue();
    java.lang.String var69 = var65.toString();
    var53.enqueue((java.lang.Object)var69);
    boolean var71 = var53.isFull();
    var40.enqueue((java.lang.Object)var71);
    var29.enqueue((java.lang.Object)var40);
    var0.enqueue((java.lang.Object)var29);
    java.lang.Object var75 = var29.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[false]"+ "'", var26.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + (short)(-1)+ "'", var68.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "[]"+ "'", var69.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test391");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isEmpty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    var4.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var4);
    boolean var13 = var4.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    var14.enqueue((java.lang.Object)1.0f);
    java.lang.String var22 = var14.toString();
    java.lang.String var23 = var14.toString();
    var14.setCapacity(10);
    var4.enqueue((java.lang.Object)var14);
    java.lang.Object var27 = var14.dequeue();
    var14.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[1.0]"+ "'", var22.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[1.0]"+ "'", var23.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test392");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    var0.setCapacity(0);
    var0.setCapacity(100);
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    java.lang.String var13 = var9.toString();
    var9.setCapacity((-1));
    java.lang.String var16 = var9.toString();
    java.lang.Object var17 = var9.dequeue();
    boolean var18 = var9.isEmpty();
    boolean var19 = var9.isEmpty();
    var9.setCapacity(100);
    var0.enqueue((java.lang.Object)var9);
    var0.setCapacity(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[false]"+ "'", var13.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[false]"+ "'", var16.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test393");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    boolean var2 = var0.isEmpty();
    boolean var3 = var0.isEmpty();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    var4.enqueue((java.lang.Object)1.0f);
    var0.enqueue((java.lang.Object)var4);
    boolean var13 = var4.isFull();
    java.lang.Object var14 = var4.dequeue();
    boolean var15 = var4.isFull();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isEmpty();
    java.lang.Object var20 = var16.dequeue();
    java.lang.String var21 = var16.toString();
    QueueFaulty var22 = new QueueFaulty();
    java.lang.String var23 = var22.toString();
    var22.setCapacity(1);
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    java.lang.String var32 = var26.toString();
    var22.enqueue((java.lang.Object)var26);
    var16.enqueue((java.lang.Object)var26);
    boolean var35 = var26.isFull();
    var4.enqueue((java.lang.Object)var26);
    var26.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 1.0f+ "'", var14.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test394");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    QueueFaulty var7 = new QueueFaulty();
    boolean var8 = var7.isEmpty();
    java.lang.String var9 = var7.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.enqueue((java.lang.Object)1.0d);
    boolean var21 = var10.isFull();
    var7.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var7);
    boolean var24 = var0.isFull();
    boolean var25 = var0.isEmpty();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    var26.enqueue((java.lang.Object)1.0f);
    java.lang.String var34 = var26.toString();
    java.lang.String var35 = var26.toString();
    boolean var36 = var26.isFull();
    java.lang.Object var37 = var26.dequeue();
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isFull();
    boolean var42 = var38.isFull();
    java.lang.Object var43 = var38.dequeue();
    boolean var44 = var38.isFull();
    boolean var45 = var38.isFull();
    java.lang.String var46 = var38.toString();
    var38.setCapacity(0);
    boolean var49 = var38.isEmpty();
    QueueFaulty var50 = new QueueFaulty();
    var50.enqueue((java.lang.Object)false);
    boolean var53 = var50.isEmpty();
    java.lang.Object var54 = var50.dequeue();
    QueueFaulty var55 = new QueueFaulty();
    java.lang.String var56 = var55.toString();
    var50.enqueue((java.lang.Object)var56);
    var50.setCapacity(10);
    boolean var60 = var50.isFull();
    boolean var61 = var50.isEmpty();
    QueueFaulty var62 = new QueueFaulty();
    var62.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var65 = var62.dequeue();
    java.lang.String var66 = var62.toString();
    var50.enqueue((java.lang.Object)var66);
    boolean var68 = var50.isFull();
    boolean var69 = var50.isFull();
    var38.enqueue((java.lang.Object)var50);
    var26.enqueue((java.lang.Object)var50);
    var26.setCapacity((-1));
    var0.enqueue((java.lang.Object)(-1));
    boolean var75 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[1.0]"+ "'", var34.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[1.0]"+ "'", var35.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 1.0f+ "'", var37.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + false+ "'", var54.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + (short)(-1)+ "'", var65.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "[]"+ "'", var66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test395");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    boolean var9 = var0.isFull();
    boolean var10 = var0.isFull();
    java.lang.String var11 = var0.toString();
    java.lang.String var12 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test396");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    QueueFaulty var7 = new QueueFaulty();
    boolean var8 = var7.isEmpty();
    java.lang.String var9 = var7.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.enqueue((java.lang.Object)1.0d);
    boolean var21 = var10.isFull();
    var7.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var7);
    java.lang.Object var24 = var0.dequeue();
    boolean var25 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    java.lang.Object var32 = var28.dequeue();
    java.lang.String var33 = var28.toString();
    boolean var34 = var28.isEmpty();
    boolean var35 = var28.isEmpty();
    java.lang.String var36 = var28.toString();
    java.lang.String var37 = var28.toString();
    java.lang.String var38 = var28.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var28);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test397");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    boolean var8 = var0.isFull();
    boolean var9 = var0.isFull();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.Object var14 = var10.dequeue();
    java.lang.String var15 = var10.toString();
    boolean var16 = var10.isEmpty();
    boolean var17 = var10.isEmpty();
    boolean var18 = var10.isFull();
    java.lang.String var19 = var10.toString();
    var10.setCapacity(10);
    boolean var22 = var10.isFull();
    var0.enqueue((java.lang.Object)var22);
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    boolean var29 = var24.isFull();
    java.lang.String var30 = var24.toString();
    boolean var31 = var24.isEmpty();
    var24.setCapacity(10);
    boolean var34 = var24.isFull();
    java.lang.String var35 = var24.toString();
    var24.setCapacity((-1));
    var24.setCapacity(1);
    var0.enqueue((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test398");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isEmpty();
    QueueFaulty var7 = new QueueFaulty();
    java.lang.String var8 = var7.toString();
    var7.setCapacity(1);
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    java.lang.String var17 = var11.toString();
    var7.enqueue((java.lang.Object)var11);
    boolean var19 = var7.isEmpty();
    boolean var20 = var7.isEmpty();
    java.lang.String var21 = var7.toString();
    var7.setCapacity(1);
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    var0.setCapacity(1);
    java.lang.Object var29 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[[]]"+ "'", var21.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test399");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    java.lang.Object var12 = var0.dequeue();
    boolean var13 = var0.isFull();
    boolean var14 = var0.isEmpty();
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test400");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    boolean var14 = var0.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    java.lang.String var19 = var15.toString();
    boolean var20 = var15.isFull();
    boolean var21 = var15.isEmpty();
    java.lang.Object var22 = var15.dequeue();
    java.lang.String var23 = var15.toString();
    boolean var24 = var15.isFull();
    java.lang.String var25 = var15.toString();
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isEmpty();
    java.lang.String var30 = var26.toString();
    boolean var31 = var26.isFull();
    boolean var32 = var26.isEmpty();
    java.lang.Object var33 = var26.dequeue();
    var15.enqueue((java.lang.Object)var26);
    java.lang.Object var35 = var15.dequeue();
    java.lang.String var36 = var15.toString();
    var15.setCapacity((-1));
    var0.enqueue((java.lang.Object)(-1));
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isEmpty();
    boolean var44 = var40.isFull();
    var40.setCapacity(100);
    boolean var47 = var40.isEmpty();
    java.lang.Object var48 = var40.dequeue();
    boolean var49 = var40.isFull();
    boolean var50 = var40.isEmpty();
    boolean var51 = var40.isFull();
    var0.enqueue((java.lang.Object)var40);
    boolean var53 = var0.isFull();
    java.lang.Object var54 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[false]"+ "'", var30.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + (-1)+ "'", var54.equals((-1)));

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test401");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    var0.setCapacity(10);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    java.lang.String var19 = var16.toString();
    boolean var20 = var16.isEmpty();
    java.lang.String var21 = var16.toString();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isEmpty();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    boolean var30 = var24.isFull();
    boolean var31 = var24.isFull();
    boolean var32 = var24.isFull();
    boolean var33 = var24.isEmpty();
    var16.enqueue((java.lang.Object)var24);
    QueueFaulty var35 = new QueueFaulty();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isFull();
    boolean var40 = var36.isFull();
    java.lang.Object var41 = var36.dequeue();
    boolean var42 = var36.isFull();
    boolean var43 = var36.isFull();
    java.lang.String var44 = var36.toString();
    var36.setCapacity(0);
    var35.enqueue((java.lang.Object)var36);
    var36.setCapacity(10);
    QueueFaulty var50 = new QueueFaulty();
    boolean var51 = var50.isEmpty();
    boolean var52 = var50.isEmpty();
    boolean var53 = var50.isEmpty();
    QueueFaulty var54 = new QueueFaulty();
    var54.enqueue((java.lang.Object)false);
    boolean var57 = var54.isFull();
    boolean var58 = var54.isFull();
    java.lang.Object var59 = var54.dequeue();
    var54.enqueue((java.lang.Object)1.0f);
    var50.enqueue((java.lang.Object)var54);
    var36.enqueue((java.lang.Object)var54);
    var16.enqueue((java.lang.Object)var54);
    java.lang.String var65 = var54.toString();
    boolean var66 = var54.isEmpty();
    var0.enqueue((java.lang.Object)var54);
    boolean var68 = var0.isFull();
    boolean var69 = var0.isEmpty();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[false]"+ "'", var21.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + false+ "'", var41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + false+ "'", var59.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[1.0]"+ "'", var65.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test402");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    var11.enqueue((java.lang.Object)1.0f);
    java.lang.String var19 = var11.toString();
    java.lang.String var20 = var11.toString();
    boolean var21 = var11.isEmpty();
    java.lang.Object var22 = var11.dequeue();
    var0.enqueue(var22);
    var0.setCapacity(10);
    boolean var26 = var0.isEmpty();
    boolean var27 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[1.0]"+ "'", var19.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[1.0]"+ "'", var20.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 1.0f+ "'", var22.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test403");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isFull();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isEmpty();
    java.lang.Object var17 = var13.dequeue();
    var13.setCapacity(10);
    boolean var20 = var13.isFull();
    var0.enqueue((java.lang.Object)var13);
    var13.setCapacity((-1));
    boolean var24 = var13.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test404");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(0);
    var0.setCapacity(0);
    QueueFaulty var13 = new QueueFaulty();
    var13.setCapacity(100);
    QueueFaulty var16 = new QueueFaulty();
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isFull();
    boolean var21 = var17.isFull();
    java.lang.Object var22 = var17.dequeue();
    boolean var23 = var17.isFull();
    boolean var24 = var17.isFull();
    java.lang.String var25 = var17.toString();
    var17.setCapacity(0);
    var16.enqueue((java.lang.Object)var17);
    boolean var29 = var17.isEmpty();
    var13.enqueue((java.lang.Object)var29);
    var0.enqueue((java.lang.Object)var13);
    java.lang.String var32 = var13.toString();
    java.lang.Object var33 = var13.dequeue();
    QueueFaulty var34 = new QueueFaulty();
    boolean var35 = var34.isEmpty();
    java.lang.String var36 = var34.toString();
    var34.setCapacity((-1));
    boolean var39 = var34.isEmpty();
    QueueFaulty var40 = new QueueFaulty();
    boolean var41 = var40.isEmpty();
    java.lang.String var42 = var40.toString();
    var40.setCapacity(0);
    var34.enqueue((java.lang.Object)var40);
    QueueFaulty var46 = new QueueFaulty();
    var46.enqueue((java.lang.Object)false);
    boolean var49 = var46.isEmpty();
    java.lang.Object var50 = var46.dequeue();
    var46.setCapacity(10);
    QueueFaulty var53 = new QueueFaulty();
    boolean var54 = var53.isEmpty();
    java.lang.String var55 = var53.toString();
    QueueFaulty var56 = new QueueFaulty();
    var56.enqueue((java.lang.Object)false);
    boolean var59 = var56.isFull();
    boolean var60 = var56.isFull();
    java.lang.Object var61 = var56.dequeue();
    boolean var62 = var56.isFull();
    boolean var63 = var56.isFull();
    java.lang.String var64 = var56.toString();
    var56.enqueue((java.lang.Object)1.0d);
    boolean var67 = var56.isFull();
    var53.enqueue((java.lang.Object)var56);
    var46.enqueue((java.lang.Object)var53);
    boolean var70 = var46.isFull();
    boolean var71 = var46.isEmpty();
    var40.enqueue((java.lang.Object)var46);
    java.lang.Object var73 = var40.dequeue();
    var13.enqueue((java.lang.Object)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + false+ "'", var22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[true]"+ "'", var32.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + true+ "'", var33.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + false+ "'", var50.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + false+ "'", var61.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test405");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    boolean var15 = var0.isEmpty();
    QueueFaulty var16 = new QueueFaulty();
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    boolean var19 = var16.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    var20.enqueue((java.lang.Object)1.0f);
    var16.enqueue((java.lang.Object)var20);
    boolean var29 = var20.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    java.lang.String var38 = var30.toString();
    java.lang.String var39 = var30.toString();
    var30.setCapacity(10);
    var20.enqueue((java.lang.Object)var30);
    var0.enqueue((java.lang.Object)var30);
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isFull();
    var44.enqueue((java.lang.Object)0.0f);
    java.lang.Object var50 = var44.dequeue();
    boolean var51 = var44.isEmpty();
    boolean var52 = var44.isFull();
    boolean var53 = var44.isFull();
    var30.enqueue((java.lang.Object)var53);
    boolean var55 = var30.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[1.0]"+ "'", var38.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[1.0]"+ "'", var39.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + false+ "'", var50.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test406");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    java.lang.String var7 = var6.toString();
    var6.setCapacity(1);
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    java.lang.String var16 = var10.toString();
    var6.enqueue((java.lang.Object)var10);
    var0.enqueue((java.lang.Object)var10);
    boolean var19 = var10.isFull();
    java.lang.String var20 = var10.toString();
    QueueFaulty var21 = new QueueFaulty();
    var21.enqueue((java.lang.Object)false);
    boolean var24 = var21.isFull();
    boolean var25 = var21.isFull();
    java.lang.Object var26 = var21.dequeue();
    java.lang.String var27 = var21.toString();
    boolean var28 = var21.isFull();
    boolean var29 = var21.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isEmpty();
    java.lang.String var34 = var30.toString();
    boolean var35 = var30.isFull();
    boolean var36 = var30.isEmpty();
    java.lang.Object var37 = var30.dequeue();
    java.lang.String var38 = var30.toString();
    boolean var39 = var30.isFull();
    java.lang.String var40 = var30.toString();
    var21.enqueue((java.lang.Object)var30);
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    boolean var48 = var42.isFull();
    boolean var49 = var42.isFull();
    java.lang.String var50 = var42.toString();
    QueueFaulty var51 = new QueueFaulty();
    var51.enqueue((java.lang.Object)false);
    boolean var54 = var51.isFull();
    boolean var55 = var51.isFull();
    java.lang.Object var56 = var51.dequeue();
    boolean var57 = var51.isFull();
    boolean var58 = var51.isFull();
    java.lang.String var59 = var51.toString();
    var51.enqueue((java.lang.Object)1.0d);
    var51.setCapacity(0);
    var42.enqueue((java.lang.Object)0);
    java.lang.String var65 = var42.toString();
    var42.setCapacity(10);
    boolean var68 = var42.isFull();
    var30.enqueue((java.lang.Object)var42);
    java.lang.Object var70 = var30.dequeue();
    var10.enqueue((java.lang.Object)var30);
    QueueFaulty var72 = new QueueFaulty();
    var72.enqueue((java.lang.Object)false);
    boolean var75 = var72.isFull();
    boolean var76 = var72.isFull();
    java.lang.Object var77 = var72.dequeue();
    boolean var78 = var72.isFull();
    boolean var79 = var72.isFull();
    java.lang.String var80 = var72.toString();
    var72.setCapacity(1);
    boolean var83 = var72.isEmpty();
    boolean var84 = var72.isFull();
    boolean var85 = var72.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.enqueue((java.lang.Object)var72);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + false+ "'", var26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[false]"+ "'", var34.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + false+ "'", var56.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[0]"+ "'", var65.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + false+ "'", var77.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[]"+ "'", var80.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test407");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    var0.setCapacity(100);
    java.lang.Object var17 = var0.dequeue();
    var0.setCapacity(100);
    java.lang.String var20 = var0.toString();
    java.lang.String var21 = var0.toString();
    java.lang.String var22 = var0.toString();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test408");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    var0.setCapacity((-1));
    QueueFaulty var13 = new QueueFaulty();
    java.lang.String var14 = var13.toString();
    var13.setCapacity(1);
    var13.setCapacity((-1));
    boolean var19 = var13.isEmpty();
    var13.setCapacity(0);
    var0.enqueue((java.lang.Object)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var23 = var13.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test409");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var3 = var0.dequeue();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    java.lang.String var8 = var4.toString();
    java.lang.String var9 = var4.toString();
    var4.setCapacity(1);
    java.lang.Object var12 = var4.dequeue();
    java.lang.String var13 = var4.toString();
    boolean var14 = var4.isEmpty();
    var4.setCapacity((-1));
    var0.enqueue((java.lang.Object)(-1));
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isEmpty();
    java.lang.String var22 = var18.toString();
    boolean var23 = var18.isFull();
    boolean var24 = var18.isEmpty();
    java.lang.Object var25 = var18.dequeue();
    java.lang.String var26 = var18.toString();
    boolean var27 = var18.isFull();
    boolean var28 = var18.isEmpty();
    boolean var29 = var18.isEmpty();
    var0.enqueue((java.lang.Object)var18);
    boolean var31 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (short)(-1)+ "'", var3.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[false]"+ "'", var22.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test410");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    java.lang.String var24 = var0.toString();
    java.lang.String var25 = var0.toString();
    java.lang.String var26 = var0.toString();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[0]"+ "'", var24.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[0]"+ "'", var25.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[0]"+ "'", var26.equals("[0]"));

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test411");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    QueueFaulty var3 = new QueueFaulty();
    var3.enqueue((java.lang.Object)false);
    boolean var6 = var3.isFull();
    boolean var7 = var3.isFull();
    java.lang.Object var8 = var3.dequeue();
    boolean var9 = var3.isFull();
    boolean var10 = var3.isFull();
    java.lang.String var11 = var3.toString();
    var3.enqueue((java.lang.Object)1.0d);
    boolean var14 = var3.isFull();
    var0.enqueue((java.lang.Object)var3);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isEmpty();
    java.lang.Object var20 = var16.dequeue();
    boolean var21 = var16.isFull();
    java.lang.String var22 = var16.toString();
    boolean var23 = var16.isEmpty();
    var16.setCapacity(10);
    var0.enqueue((java.lang.Object)var16);
    boolean var27 = var16.isFull();
    java.lang.String var28 = var16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test412");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    var7.setCapacity(0);
    boolean var26 = var7.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var27 = var7.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test413");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    boolean var8 = var0.isFull();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isEmpty();
    boolean var13 = var9.isFull();
    var9.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    boolean var17 = var0.isEmpty();
    boolean var18 = var0.isFull();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isEmpty();
    boolean var23 = var19.isFull();
    var19.setCapacity(10);
    boolean var26 = var19.isEmpty();
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    java.lang.String var33 = var27.toString();
    var19.enqueue((java.lang.Object)var33);
    java.lang.Object var35 = var19.dequeue();
    boolean var36 = var19.isFull();
    var19.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    var0.setCapacity(0);
    boolean var42 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test414");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    java.lang.String var4 = var0.toString();
    var0.setCapacity(0);
    var0.setCapacity(100);
    var0.setCapacity(100);
    java.lang.Object var11 = var0.dequeue();
    boolean var12 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var15 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test415");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    java.lang.String var30 = var1.toString();
    QueueFaulty var31 = new QueueFaulty();
    boolean var32 = var31.isEmpty();
    java.lang.String var33 = var31.toString();
    var31.setCapacity((-1));
    boolean var36 = var31.isEmpty();
    boolean var37 = var31.isFull();
    var1.enqueue((java.lang.Object)var31);
    java.lang.String var39 = var31.toString();
    java.lang.String var40 = var31.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[1.0]]"+ "'", var30.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[]"+ "'", var39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[]"+ "'", var40.equals("[]"));

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test416");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    var0.setCapacity(0);
    boolean var11 = var0.isFull();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isFull();
    boolean var16 = var12.isFull();
    java.lang.Object var17 = var12.dequeue();
    boolean var18 = var12.isFull();
    QueueFaulty var19 = new QueueFaulty();
    java.lang.String var20 = var19.toString();
    var19.setCapacity(1);
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    java.lang.String var29 = var23.toString();
    var19.enqueue((java.lang.Object)var23);
    boolean var31 = var19.isEmpty();
    boolean var32 = var19.isFull();
    var12.enqueue((java.lang.Object)var32);
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    var34.setCapacity(100);
    boolean var41 = var34.isFull();
    var12.enqueue((java.lang.Object)var34);
    java.lang.Object var43 = var34.dequeue();
    var0.enqueue((java.lang.Object)var34);
    boolean var45 = var34.isEmpty();
    java.lang.String var46 = var34.toString();
    boolean var47 = var34.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test417");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.setCapacity((-1));
    java.lang.String var27 = var16.toString();
    boolean var28 = var16.isEmpty();
    boolean var29 = var16.isEmpty();
    java.lang.String var30 = var16.toString();
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isFull();
    boolean var35 = var31.isFull();
    java.lang.Object var36 = var31.dequeue();
    boolean var37 = var31.isFull();
    var16.enqueue((java.lang.Object)var37);
    var0.enqueue((java.lang.Object)var37);
    boolean var40 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test418");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    var0.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test419");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    java.lang.Object var11 = var0.dequeue();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.Object var16 = var12.dequeue();
    var12.setCapacity(10);
    boolean var19 = var12.isFull();
    var12.setCapacity(1);
    java.lang.String var22 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    boolean var24 = var12.isEmpty();
    boolean var25 = var12.isFull();
    boolean var26 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1.0f+ "'", var11.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test420");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(1);
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    boolean var14 = var0.isFull();
    java.lang.String var15 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var16 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test421");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    var7.enqueue((java.lang.Object)var24);
    java.lang.String var35 = var24.toString();
    var24.setCapacity(1);
    boolean var38 = var24.isEmpty();
    java.lang.String var39 = var24.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var40 = var24.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[]"+ "'", var39.equals("[]"));

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test422");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    var0.setCapacity(10);
    boolean var26 = var0.isEmpty();
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    java.lang.String var33 = var27.toString();
    boolean var34 = var27.isFull();
    boolean var35 = var27.isEmpty();
    boolean var36 = var27.isFull();
    boolean var37 = var27.isEmpty();
    var0.enqueue((java.lang.Object)var37);
    QueueFaulty var39 = new QueueFaulty();
    var39.enqueue((java.lang.Object)false);
    boolean var42 = var39.isEmpty();
    boolean var43 = var39.isFull();
    java.lang.String var44 = var39.toString();
    QueueFaulty var45 = new QueueFaulty();
    var45.enqueue((java.lang.Object)false);
    boolean var48 = var45.isFull();
    boolean var49 = var45.isFull();
    java.lang.Object var50 = var45.dequeue();
    var45.enqueue((java.lang.Object)1.0f);
    var45.setCapacity(10);
    var39.enqueue((java.lang.Object)var45);
    boolean var56 = var39.isEmpty();
    var0.enqueue((java.lang.Object)var56);
    QueueFaulty var58 = new QueueFaulty();
    var58.enqueue((java.lang.Object)false);
    boolean var61 = var58.isFull();
    boolean var62 = var58.isFull();
    java.lang.Object var63 = var58.dequeue();
    boolean var64 = var58.isFull();
    boolean var65 = var58.isFull();
    java.lang.String var66 = var58.toString();
    var58.enqueue((java.lang.Object)1.0d);
    boolean var69 = var58.isEmpty();
    java.lang.Object var70 = var58.dequeue();
    var0.enqueue((java.lang.Object)var58);
    boolean var72 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[false]"+ "'", var44.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + false+ "'", var50.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + false+ "'", var63.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "[]"+ "'", var66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + 1.0d+ "'", var70.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test423");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    QueueFaulty var5 = new QueueFaulty();
    java.lang.String var6 = var5.toString();
    var0.enqueue((java.lang.Object)var6);
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.Object var10 = var0.dequeue();
    QueueFaulty var11 = new QueueFaulty();
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    boolean var21 = var14.isFull();
    boolean var22 = var14.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    java.lang.String var27 = var23.toString();
    boolean var28 = var23.isFull();
    boolean var29 = var23.isEmpty();
    java.lang.Object var30 = var23.dequeue();
    java.lang.String var31 = var23.toString();
    boolean var32 = var23.isFull();
    java.lang.String var33 = var23.toString();
    var14.enqueue((java.lang.Object)var23);
    var11.enqueue((java.lang.Object)var14);
    var0.enqueue((java.lang.Object)var11);
    var0.setCapacity(10);
    boolean var39 = var0.isEmpty();
    java.lang.Object var40 = var0.dequeue();
    java.lang.String var41 = var0.toString();
    QueueFaulty var42 = new QueueFaulty();
    var42.enqueue((java.lang.Object)false);
    boolean var45 = var42.isFull();
    boolean var46 = var42.isFull();
    java.lang.Object var47 = var42.dequeue();
    var42.enqueue((java.lang.Object)1.0f);
    java.lang.String var50 = var42.toString();
    java.lang.String var51 = var42.toString();
    var42.setCapacity(10);
    boolean var54 = var42.isEmpty();
    boolean var55 = var42.isEmpty();
    java.lang.Object var56 = var42.dequeue();
    QueueFaulty var57 = new QueueFaulty();
    var57.enqueue((java.lang.Object)false);
    boolean var60 = var57.isFull();
    boolean var61 = var57.isFull();
    java.lang.Object var62 = var57.dequeue();
    var57.enqueue((java.lang.Object)1.0f);
    java.lang.String var65 = var57.toString();
    java.lang.String var66 = var57.toString();
    boolean var67 = var57.isEmpty();
    java.lang.Object var68 = var57.dequeue();
    var57.setCapacity(100);
    boolean var71 = var57.isEmpty();
    java.lang.String var72 = var57.toString();
    boolean var73 = var57.isFull();
    var42.enqueue((java.lang.Object)var73);
    var0.enqueue((java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[]]"+ "'", var8.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[false]"+ "'", var27.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + false+ "'", var47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[1.0]"+ "'", var50.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[1.0]"+ "'", var51.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + false+ "'", var62.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[1.0]"+ "'", var65.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "[1.0]"+ "'", var66.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + 1.0f+ "'", var68.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "[]"+ "'", var72.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test424");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    boolean var24 = var0.isFull();
    java.lang.Object var25 = var0.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var26 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 0+ "'", var25.equals(0));

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test425");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    boolean var13 = var0.isFull();
    java.lang.Object var14 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test426");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    var6.enqueue((java.lang.Object)1.0f);
    var6.setCapacity(10);
    var0.enqueue((java.lang.Object)var6);
    boolean var17 = var0.isEmpty();
    boolean var18 = var0.isFull();
    boolean var19 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test427");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    boolean var20 = var11.isFull();
    var11.setCapacity(1);
    var11.setCapacity(0);
    java.lang.String var25 = var11.toString();
    QueueFaulty var26 = new QueueFaulty();
    java.lang.String var27 = var26.toString();
    java.lang.String var28 = var26.toString();
    var26.setCapacity(100);
    QueueFaulty var31 = new QueueFaulty();
    boolean var32 = var31.isEmpty();
    java.lang.String var33 = var31.toString();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    java.lang.Object var39 = var34.dequeue();
    boolean var40 = var34.isFull();
    boolean var41 = var34.isFull();
    java.lang.String var42 = var34.toString();
    var34.enqueue((java.lang.Object)1.0d);
    boolean var45 = var34.isFull();
    var31.enqueue((java.lang.Object)var34);
    QueueFaulty var47 = new QueueFaulty();
    var47.enqueue((java.lang.Object)false);
    boolean var50 = var47.isFull();
    boolean var51 = var47.isFull();
    java.lang.Object var52 = var47.dequeue();
    boolean var53 = var47.isFull();
    boolean var54 = var47.isFull();
    java.lang.String var55 = var47.toString();
    var47.enqueue((java.lang.Object)1.0d);
    var47.setCapacity(0);
    boolean var60 = var47.isEmpty();
    var47.setCapacity(0);
    var34.enqueue((java.lang.Object)var47);
    var34.setCapacity((-1));
    var26.enqueue((java.lang.Object)var34);
    boolean var67 = var26.isEmpty();
    var11.enqueue((java.lang.Object)var26);
    QueueFaulty var69 = new QueueFaulty();
    boolean var70 = var69.isEmpty();
    boolean var71 = var69.isEmpty();
    var69.setCapacity(100);
    boolean var74 = var69.isFull();
    var69.setCapacity((-1));
    java.lang.String var77 = var69.toString();
    var26.enqueue((java.lang.Object)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "[]"+ "'", var77.equals("[]"));

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test428");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    var0.setCapacity(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test429");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    boolean var14 = var0.isFull();
    boolean var15 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test430");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    var0.setCapacity((-1));
    java.lang.Object var7 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test431");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(100);
    boolean var9 = var0.isEmpty();
    var0.setCapacity((-1));
    java.lang.String var12 = var0.toString();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    QueueFaulty var17 = new QueueFaulty();
    var17.enqueue((java.lang.Object)false);
    boolean var20 = var17.isEmpty();
    java.lang.String var21 = var17.toString();
    var17.setCapacity((-1));
    java.lang.String var24 = var17.toString();
    java.lang.Object var25 = var17.dequeue();
    boolean var26 = var17.isEmpty();
    var0.enqueue((java.lang.Object)var26);
    java.lang.String var28 = var0.toString();
    boolean var29 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[false]"+ "'", var21.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[false]"+ "'", var24.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[true]"+ "'", var28.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test432");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    java.lang.String var14 = var0.toString();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var18 = var15.dequeue();
    boolean var19 = var15.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isEmpty();
    java.lang.Object var24 = var20.dequeue();
    var20.setCapacity(10);
    boolean var27 = var20.isFull();
    java.lang.String var28 = var20.toString();
    boolean var29 = var20.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isEmpty();
    java.lang.String var34 = var30.toString();
    boolean var35 = var30.isFull();
    boolean var36 = var30.isEmpty();
    java.lang.Object var37 = var30.dequeue();
    java.lang.String var38 = var30.toString();
    boolean var39 = var30.isFull();
    var20.enqueue((java.lang.Object)var39);
    boolean var41 = var20.isEmpty();
    boolean var42 = var20.isEmpty();
    var15.enqueue((java.lang.Object)var20);
    java.lang.Object var44 = var15.dequeue();
    var0.enqueue((java.lang.Object)var15);
    QueueFaulty var46 = new QueueFaulty();
    QueueFaulty var47 = new QueueFaulty();
    var47.enqueue((java.lang.Object)false);
    boolean var50 = var47.isFull();
    boolean var51 = var47.isFull();
    java.lang.Object var52 = var47.dequeue();
    boolean var53 = var47.isFull();
    boolean var54 = var47.isFull();
    java.lang.String var55 = var47.toString();
    var47.setCapacity(0);
    var46.enqueue((java.lang.Object)var47);
    var47.setCapacity(10);
    QueueFaulty var61 = new QueueFaulty();
    boolean var62 = var61.isEmpty();
    boolean var63 = var61.isEmpty();
    boolean var64 = var61.isEmpty();
    QueueFaulty var65 = new QueueFaulty();
    var65.enqueue((java.lang.Object)false);
    boolean var68 = var65.isFull();
    boolean var69 = var65.isFull();
    java.lang.Object var70 = var65.dequeue();
    var65.enqueue((java.lang.Object)1.0f);
    var61.enqueue((java.lang.Object)var65);
    var47.enqueue((java.lang.Object)var65);
    boolean var75 = var47.isEmpty();
    java.lang.String var76 = var47.toString();
    var47.setCapacity(0);
    java.lang.String var79 = var47.toString();
    var47.setCapacity(0);
    QueueFaulty var82 = new QueueFaulty();
    boolean var83 = var82.isEmpty();
    java.lang.String var84 = var82.toString();
    var82.setCapacity((-1));
    boolean var87 = var82.isEmpty();
    QueueFaulty var88 = new QueueFaulty();
    boolean var89 = var88.isEmpty();
    java.lang.String var90 = var88.toString();
    var88.setCapacity(0);
    var82.enqueue((java.lang.Object)var88);
    var47.enqueue((java.lang.Object)var82);
    var47.setCapacity((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.enqueue((java.lang.Object)(-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + (short)(-1)+ "'", var18.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[false]"+ "'", var34.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + false+ "'", var70.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "[[1.0]]"+ "'", var76.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "[[1.0]]"+ "'", var79.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]"+ "'", var84.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "[]"+ "'", var90.equals("[]"));

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test433");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    boolean var24 = var0.isEmpty();
    java.lang.Object var25 = var0.dequeue();
    boolean var26 = var0.isFull();
    boolean var27 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 0+ "'", var25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test434");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isEmpty();
    java.lang.String var8 = var4.toString();
    var4.setCapacity((-1));
    var0.enqueue((java.lang.Object)(-1));
    var0.setCapacity(100);
    var0.setCapacity((-1));
    boolean var16 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test435");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isEmpty();
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isEmpty();
    java.lang.Object var12 = var8.dequeue();
    var8.setCapacity(10);
    var8.setCapacity(100);
    var0.enqueue((java.lang.Object)var8);
    java.lang.String var18 = var8.toString();
    java.lang.String var19 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test436");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var19.isFull();
    boolean var30 = var19.isFull();
    boolean var31 = var19.isFull();
    java.lang.Object var32 = var19.dequeue();
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isEmpty();
    java.lang.String var37 = var33.toString();
    var33.setCapacity((-1));
    QueueFaulty var40 = new QueueFaulty();
    var40.enqueue((java.lang.Object)false);
    boolean var43 = var40.isEmpty();
    java.lang.Object var44 = var40.dequeue();
    var40.setCapacity(10);
    boolean var47 = var40.isFull();
    java.lang.String var48 = var40.toString();
    boolean var49 = var40.isEmpty();
    QueueFaulty var50 = new QueueFaulty();
    var50.enqueue((java.lang.Object)false);
    boolean var53 = var50.isEmpty();
    java.lang.String var54 = var50.toString();
    boolean var55 = var50.isFull();
    boolean var56 = var50.isEmpty();
    java.lang.Object var57 = var50.dequeue();
    java.lang.String var58 = var50.toString();
    boolean var59 = var50.isFull();
    var40.enqueue((java.lang.Object)var59);
    boolean var61 = var40.isEmpty();
    var33.enqueue((java.lang.Object)var61);
    QueueFaulty var63 = new QueueFaulty();
    java.lang.String var64 = var63.toString();
    var63.setCapacity(1);
    QueueFaulty var67 = new QueueFaulty();
    var67.enqueue((java.lang.Object)false);
    boolean var70 = var67.isFull();
    boolean var71 = var67.isFull();
    java.lang.Object var72 = var67.dequeue();
    java.lang.String var73 = var67.toString();
    var63.enqueue((java.lang.Object)var67);
    var33.enqueue((java.lang.Object)var67);
    var67.setCapacity(10);
    java.lang.String var78 = var67.toString();
    var19.enqueue((java.lang.Object)var67);
    boolean var80 = var67.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var81 = var67.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 1.0f+ "'", var32.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[false]"+ "'", var37.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + false+ "'", var44.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[false]"+ "'", var54.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + false+ "'", var57.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "[]"+ "'", var58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + false+ "'", var72.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "[]"+ "'", var73.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "[]"+ "'", var78.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test437");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    java.lang.String var11 = var10.toString();
    var10.setCapacity(1);
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    java.lang.String var20 = var14.toString();
    var10.enqueue((java.lang.Object)var14);
    boolean var22 = var10.isEmpty();
    boolean var23 = var10.isEmpty();
    java.lang.String var24 = var10.toString();
    boolean var25 = var10.isEmpty();
    boolean var26 = var10.isEmpty();
    boolean var27 = var10.isEmpty();
    var0.enqueue((java.lang.Object)var10);
    boolean var29 = var10.isEmpty();
    boolean var30 = var10.isFull();
    java.lang.String var31 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[]]"+ "'", var24.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[[]]"+ "'", var31.equals("[[]]"));

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test438");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isEmpty();
    java.lang.String var8 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test439");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.String var14 = var10.toString();
    boolean var15 = var10.isFull();
    boolean var16 = var10.isEmpty();
    java.lang.Object var17 = var10.dequeue();
    java.lang.String var18 = var10.toString();
    boolean var19 = var10.isFull();
    var0.enqueue((java.lang.Object)var19);
    boolean var21 = var0.isEmpty();
    boolean var22 = var0.isEmpty();
    boolean var23 = var0.isEmpty();
    java.lang.String var24 = var0.toString();
    boolean var25 = var0.isEmpty();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[false]"+ "'", var14.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + false+ "'", var17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[false]"+ "'", var24.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test440");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.Object var15 = var11.dequeue();
    var11.setCapacity(10);
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    boolean var20 = var11.isEmpty();
    QueueFaulty var21 = new QueueFaulty();
    java.lang.String var22 = var21.toString();
    var21.setCapacity(1);
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isFull();
    boolean var29 = var25.isFull();
    java.lang.Object var30 = var25.dequeue();
    java.lang.String var31 = var25.toString();
    var21.enqueue((java.lang.Object)var25);
    var11.enqueue((java.lang.Object)var21);
    boolean var34 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var11);
    java.lang.Object var36 = var11.dequeue();
    boolean var37 = var11.isFull();
    boolean var38 = var11.isFull();
    boolean var39 = var11.isFull();
    QueueFaulty var40 = new QueueFaulty();
    boolean var41 = var40.isEmpty();
    boolean var42 = var40.isEmpty();
    boolean var43 = var40.isEmpty();
    QueueFaulty var44 = new QueueFaulty();
    var44.enqueue((java.lang.Object)false);
    boolean var47 = var44.isFull();
    boolean var48 = var44.isFull();
    java.lang.Object var49 = var44.dequeue();
    var44.enqueue((java.lang.Object)1.0f);
    var40.enqueue((java.lang.Object)var44);
    boolean var53 = var40.isEmpty();
    boolean var54 = var40.isEmpty();
    boolean var55 = var40.isEmpty();
    var40.setCapacity(100);
    boolean var58 = var40.isEmpty();
    var11.enqueue((java.lang.Object)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + false+ "'", var30.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + false+ "'", var49.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test441");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isEmpty();
    java.lang.Object var8 = var0.dequeue();
    var0.setCapacity(0);
    boolean var11 = var0.isEmpty();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.Object var16 = var12.dequeue();
    boolean var17 = var12.isFull();
    java.lang.String var18 = var12.toString();
    boolean var19 = var12.isEmpty();
    var12.setCapacity(10);
    boolean var22 = var12.isFull();
    java.lang.String var23 = var12.toString();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    var24.enqueue((java.lang.Object)1.0f);
    var24.setCapacity(10);
    boolean var34 = var24.isEmpty();
    boolean var35 = var24.isEmpty();
    var12.enqueue((java.lang.Object)var35);
    var12.setCapacity((-1));
    boolean var39 = var12.isEmpty();
    var12.setCapacity((-1));
    var12.setCapacity(0);
    var0.enqueue((java.lang.Object)var12);
    java.lang.String var45 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[false]"+ "'", var45.equals("[false]"));

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test442");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    boolean var15 = var0.isEmpty();
    QueueFaulty var16 = new QueueFaulty();
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    boolean var19 = var16.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    var20.enqueue((java.lang.Object)1.0f);
    var16.enqueue((java.lang.Object)var20);
    boolean var29 = var20.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    var30.enqueue((java.lang.Object)1.0f);
    java.lang.String var38 = var30.toString();
    java.lang.String var39 = var30.toString();
    var30.setCapacity(10);
    var20.enqueue((java.lang.Object)var30);
    var0.enqueue((java.lang.Object)var30);
    java.lang.Object var44 = var0.dequeue();
    boolean var45 = var0.isFull();
    boolean var46 = var0.isEmpty();
    boolean var47 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[[]]"+ "'", var14.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[1.0]"+ "'", var38.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[1.0]"+ "'", var39.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test443");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    QueueFaulty var7 = new QueueFaulty();
    var7.enqueue((java.lang.Object)false);
    boolean var10 = var7.isEmpty();
    java.lang.Object var11 = var7.dequeue();
    var7.setCapacity(10);
    boolean var14 = var7.isFull();
    var7.setCapacity(1);
    boolean var17 = var7.isEmpty();
    var7.setCapacity(10);
    var0.enqueue((java.lang.Object)var7);
    boolean var21 = var7.isFull();
    boolean var22 = var7.isEmpty();
    boolean var23 = var7.isFull();
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isEmpty();
    java.lang.Object var28 = var24.dequeue();
    var24.setCapacity(10);
    boolean var31 = var24.isFull();
    java.lang.String var32 = var24.toString();
    boolean var33 = var24.isEmpty();
    var7.enqueue((java.lang.Object)var24);
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    java.lang.String var38 = var35.toString();
    boolean var39 = var35.isEmpty();
    java.lang.String var40 = var35.toString();
    boolean var41 = var35.isFull();
    boolean var42 = var35.isEmpty();
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)false);
    boolean var46 = var43.isFull();
    boolean var47 = var43.isFull();
    java.lang.Object var48 = var43.dequeue();
    boolean var49 = var43.isFull();
    boolean var50 = var43.isFull();
    boolean var51 = var43.isFull();
    boolean var52 = var43.isEmpty();
    var35.enqueue((java.lang.Object)var43);
    var35.setCapacity(0);
    var24.enqueue((java.lang.Object)0);
    java.lang.Object var57 = var24.dequeue();
    var24.setCapacity((-1));
    boolean var60 = var24.isFull();
    boolean var61 = var24.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var62 = var24.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[false]"+ "'", var38.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[false]"+ "'", var40.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + false+ "'", var48.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 0+ "'", var57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test444");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.setCapacity(1);
    java.lang.String var10 = var0.toString();
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isFull();
    var0.setCapacity(1);
    boolean var15 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test445");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    boolean var14 = var10.isFull();
    var10.setCapacity(10);
    boolean var17 = var10.isEmpty();
    QueueFaulty var18 = new QueueFaulty();
    var18.enqueue((java.lang.Object)false);
    boolean var21 = var18.isFull();
    boolean var22 = var18.isFull();
    java.lang.Object var23 = var18.dequeue();
    java.lang.String var24 = var18.toString();
    var10.enqueue((java.lang.Object)var24);
    var10.setCapacity((-1));
    var10.setCapacity(100);
    boolean var30 = var10.isEmpty();
    boolean var31 = var10.isEmpty();
    boolean var32 = var10.isEmpty();
    var10.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + false+ "'", var23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test446");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isEmpty();
    var0.setCapacity((-1));
    boolean var14 = var0.isFull();
    QueueFaulty var15 = new QueueFaulty();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.setCapacity(0);
    var15.enqueue((java.lang.Object)var16);
    var16.setCapacity(10);
    QueueFaulty var30 = new QueueFaulty();
    boolean var31 = var30.isEmpty();
    boolean var32 = var30.isEmpty();
    boolean var33 = var30.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    java.lang.Object var39 = var34.dequeue();
    var34.enqueue((java.lang.Object)1.0f);
    var30.enqueue((java.lang.Object)var34);
    var16.enqueue((java.lang.Object)var34);
    boolean var44 = var16.isEmpty();
    java.lang.String var45 = var16.toString();
    QueueFaulty var46 = new QueueFaulty();
    boolean var47 = var46.isEmpty();
    java.lang.String var48 = var46.toString();
    var46.setCapacity((-1));
    boolean var51 = var46.isEmpty();
    boolean var52 = var46.isFull();
    var16.enqueue((java.lang.Object)var46);
    QueueFaulty var54 = new QueueFaulty();
    java.lang.String var55 = var54.toString();
    var54.setCapacity(1);
    QueueFaulty var58 = new QueueFaulty();
    var58.enqueue((java.lang.Object)false);
    boolean var61 = var58.isFull();
    boolean var62 = var58.isFull();
    java.lang.Object var63 = var58.dequeue();
    java.lang.String var64 = var58.toString();
    var54.enqueue((java.lang.Object)var58);
    java.lang.Object var66 = var54.dequeue();
    var54.enqueue((java.lang.Object)100);
    java.lang.String var69 = var54.toString();
    var46.enqueue((java.lang.Object)var54);
    var46.setCapacity((-1));
    boolean var73 = var46.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var46);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[[1.0]]"+ "'", var45.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + false+ "'", var63.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "[100]"+ "'", var69.equals("[100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test447");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isFull();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    java.lang.String var13 = var0.toString();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isFull();
    boolean var18 = var14.isFull();
    java.lang.Object var19 = var14.dequeue();
    boolean var20 = var14.isFull();
    boolean var21 = var14.isFull();
    java.lang.String var22 = var14.toString();
    var14.enqueue((java.lang.Object)1.0d);
    var14.setCapacity(0);
    java.lang.String var27 = var14.toString();
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    java.lang.Object var32 = var28.dequeue();
    java.lang.String var33 = var28.toString();
    QueueFaulty var34 = new QueueFaulty();
    java.lang.String var35 = var34.toString();
    var34.setCapacity(1);
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isFull();
    boolean var42 = var38.isFull();
    java.lang.Object var43 = var38.dequeue();
    java.lang.String var44 = var38.toString();
    var34.enqueue((java.lang.Object)var38);
    var28.enqueue((java.lang.Object)var38);
    QueueFaulty var47 = new QueueFaulty();
    var47.enqueue((java.lang.Object)false);
    boolean var50 = var47.isFull();
    boolean var51 = var47.isFull();
    java.lang.Object var52 = var47.dequeue();
    var47.enqueue((java.lang.Object)1.0f);
    var47.setCapacity(10);
    var28.enqueue((java.lang.Object)10);
    boolean var58 = var28.isFull();
    var14.enqueue((java.lang.Object)var28);
    var0.enqueue((java.lang.Object)var28);
    boolean var61 = var28.isFull();
    var28.setCapacity((-1));
    boolean var64 = var28.isEmpty();
    var28.setCapacity(10);
    java.lang.Object var67 = var28.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + false+ "'", var19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[1.0]"+ "'", var27.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + false+ "'", var43.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + false+ "'", var52.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test448");


    QueueFaulty var0 = new QueueFaulty();
    var0.setCapacity(100);
    var0.setCapacity(100);
    var0.setCapacity((-1));
    var0.setCapacity(1);
    var0.setCapacity(1);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test449");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.Object var14 = var10.dequeue();
    QueueFaulty var15 = new QueueFaulty();
    java.lang.String var16 = var15.toString();
    var10.enqueue((java.lang.Object)var16);
    var10.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    boolean var21 = var0.isFull();
    java.lang.Object var22 = var0.dequeue();
    boolean var23 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 10+ "'", var22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test450");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.enqueue((java.lang.Object)(byte)10);
    boolean var10 = var0.isFull();
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.String var14 = var0.toString();
    java.lang.String var15 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[10]"+ "'", var11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[10]"+ "'", var14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[10]"+ "'", var15.equals("[10]"));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test451");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    QueueFaulty var8 = new QueueFaulty();
    var8.enqueue((java.lang.Object)false);
    boolean var11 = var8.isEmpty();
    java.lang.Object var12 = var8.dequeue();
    var8.setCapacity(10);
    boolean var15 = var8.isFull();
    var0.enqueue((java.lang.Object)var8);
    var0.setCapacity(1);
    boolean var19 = var0.isFull();
    java.lang.Object var20 = var0.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var0.toString();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + false+ "'", var12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test452");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    var0.setCapacity(100);
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test453");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.enqueue((java.lang.Object)(byte)10);
    boolean var10 = var0.isFull();
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    java.lang.String var14 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[10]"+ "'", var13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[10]"+ "'", var14.equals("[10]"));

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test454");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity(0);
    boolean var11 = var0.isEmpty();
    var0.setCapacity(1);
    boolean var14 = var0.isEmpty();
    java.lang.String var15 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var18 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test455");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.isFull();
    boolean var6 = var0.isEmpty();
    java.lang.Object var7 = var0.dequeue();
    java.lang.String var8 = var0.toString();
    boolean var9 = var0.isFull();
    java.lang.String var10 = var0.toString();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isEmpty();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.isFull();
    boolean var17 = var11.isEmpty();
    java.lang.Object var18 = var11.dequeue();
    var0.enqueue((java.lang.Object)var11);
    var11.setCapacity((-1));
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isEmpty();
    boolean var26 = var22.isFull();
    var22.setCapacity(10);
    boolean var29 = var22.isEmpty();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isFull();
    boolean var34 = var30.isFull();
    java.lang.Object var35 = var30.dequeue();
    java.lang.String var36 = var30.toString();
    var22.enqueue((java.lang.Object)var36);
    var22.setCapacity((-1));
    boolean var40 = var22.isFull();
    boolean var41 = var22.isEmpty();
    boolean var42 = var22.isEmpty();
    var22.setCapacity(1);
    var11.enqueue((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[false]"+ "'", var4.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + false+ "'", var7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[false]"+ "'", var15.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test456");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    boolean var5 = var0.isEmpty();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    java.lang.Object var8 = var0.dequeue();
    boolean var9 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[false]"+ "'", var6.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + false+ "'", var8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test457");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    boolean var7 = var0.isEmpty();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isFull();
    boolean var13 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test458");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    java.lang.Object var10 = var0.dequeue();
    var0.setCapacity(100);
    boolean var13 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test459");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    var0.setCapacity((-1));
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    QueueFaulty var10 = new QueueFaulty();
    boolean var11 = var10.isEmpty();
    java.lang.String var12 = var10.toString();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    boolean var19 = var13.isFull();
    boolean var20 = var13.isFull();
    java.lang.String var21 = var13.toString();
    var13.enqueue((java.lang.Object)1.0d);
    boolean var24 = var13.isFull();
    var10.enqueue((java.lang.Object)var13);
    QueueFaulty var26 = new QueueFaulty();
    var26.enqueue((java.lang.Object)false);
    boolean var29 = var26.isFull();
    boolean var30 = var26.isFull();
    java.lang.Object var31 = var26.dequeue();
    boolean var32 = var26.isFull();
    boolean var33 = var26.isFull();
    boolean var34 = var26.isFull();
    java.lang.String var35 = var26.toString();
    QueueFaulty var36 = new QueueFaulty();
    var36.enqueue((java.lang.Object)false);
    boolean var39 = var36.isEmpty();
    java.lang.Object var40 = var36.dequeue();
    QueueFaulty var41 = new QueueFaulty();
    java.lang.String var42 = var41.toString();
    var36.enqueue((java.lang.Object)var42);
    var36.setCapacity(10);
    var26.enqueue((java.lang.Object)10);
    var13.enqueue((java.lang.Object)var26);
    var0.enqueue((java.lang.Object)var26);
    boolean var49 = var0.isFull();
    boolean var50 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var53 = var0.isEmpty();
    QueueFaulty var54 = new QueueFaulty();
    java.lang.String var55 = var54.toString();
    var54.setCapacity(1);
    var54.setCapacity(0);
    QueueFaulty var60 = new QueueFaulty();
    var60.enqueue((java.lang.Object)false);
    boolean var63 = var60.isEmpty();
    java.lang.Object var64 = var60.dequeue();
    java.lang.String var65 = var60.toString();
    boolean var66 = var60.isEmpty();
    var60.setCapacity(0);
    boolean var69 = var60.isEmpty();
    boolean var70 = var60.isFull();
    var54.enqueue((java.lang.Object)var60);
    boolean var72 = var54.isFull();
    var54.setCapacity(1);
    boolean var75 = var54.isEmpty();
    var54.setCapacity(10);
    boolean var78 = var54.isFull();
    var54.setCapacity(100);
    var0.enqueue((java.lang.Object)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[false]"+ "'", var8.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[false]"+ "'", var9.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + false+ "'", var64.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[]"+ "'", var65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test460");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.enqueue((java.lang.Object)(byte)10);
    boolean var10 = var0.isFull();
    java.lang.String var11 = var0.toString();
    boolean var12 = var0.isEmpty();
    var0.setCapacity((-1));
    java.lang.String var15 = var0.toString();
    boolean var16 = var0.isEmpty();
    java.lang.String var17 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[10]"+ "'", var11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[10]"+ "'", var15.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[10]"+ "'", var17.equals("[10]"));

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test461");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isFull();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.String var16 = var12.toString();
    var12.setCapacity((-1));
    java.lang.String var19 = var12.toString();
    java.lang.Object var20 = var12.dequeue();
    boolean var21 = var12.isEmpty();
    var0.enqueue((java.lang.Object)var21);
    java.lang.String var23 = var0.toString();
    java.lang.String var24 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[false]"+ "'", var16.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[true]"+ "'", var23.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[true]"+ "'", var24.equals("[true]"));

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test462");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isEmpty();
    var0.setCapacity(0);
    boolean var9 = var0.isEmpty();
    boolean var10 = var0.isFull();
    var0.setCapacity(10);
    java.lang.String var13 = var0.toString();
    java.lang.String var14 = var0.toString();
    var0.setCapacity(0);
    java.lang.String var17 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test463");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    QueueFaulty var9 = new QueueFaulty();
    var9.enqueue((java.lang.Object)false);
    boolean var12 = var9.isFull();
    boolean var13 = var9.isFull();
    java.lang.Object var14 = var9.dequeue();
    boolean var15 = var9.isFull();
    boolean var16 = var9.isFull();
    java.lang.String var17 = var9.toString();
    var9.enqueue((java.lang.Object)1.0d);
    var9.setCapacity(0);
    var0.enqueue((java.lang.Object)0);
    java.lang.String var23 = var0.toString();
    var0.setCapacity(10);
    boolean var26 = var0.isEmpty();
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isEmpty();
    java.lang.Object var31 = var27.dequeue();
    boolean var32 = var27.isFull();
    boolean var33 = var27.isEmpty();
    var27.setCapacity(10);
    var0.enqueue((java.lang.Object)var27);
    boolean var37 = var0.isFull();
    boolean var38 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[0]"+ "'", var23.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + false+ "'", var31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test464");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isFull();
    boolean var13 = var0.isFull();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.String var18 = var14.toString();
    boolean var19 = var14.isFull();
    boolean var20 = var14.isEmpty();
    java.lang.Object var21 = var14.dequeue();
    java.lang.String var22 = var14.toString();
    boolean var23 = var14.isFull();
    java.lang.String var24 = var14.toString();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isEmpty();
    java.lang.String var29 = var25.toString();
    boolean var30 = var25.isFull();
    boolean var31 = var25.isEmpty();
    java.lang.Object var32 = var25.dequeue();
    var14.enqueue((java.lang.Object)var25);
    java.lang.Object var34 = var14.dequeue();
    java.lang.String var35 = var14.toString();
    var14.setCapacity((-1));
    boolean var38 = var14.isEmpty();
    var0.enqueue((java.lang.Object)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var40 = var0.toString();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[false]"+ "'", var18.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[false]"+ "'", var29.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test465");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.enqueue((java.lang.Object)(byte)10);
    boolean var10 = var0.isFull();
    java.lang.String var11 = var0.toString();
    var0.setCapacity(0);
    boolean var14 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[10]"+ "'", var11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test466");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    var6.enqueue((java.lang.Object)1.0f);
    var6.setCapacity(10);
    var0.enqueue((java.lang.Object)var6);
    var0.setCapacity(10);
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    java.lang.String var23 = var19.toString();
    var19.setCapacity(1);
    var19.setCapacity(0);
    var19.setCapacity((-1));
    java.lang.Object var30 = var19.dequeue();
    var0.enqueue((java.lang.Object)var19);
    java.lang.String var32 = var19.toString();
    var19.setCapacity(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[false]"+ "'", var23.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test467");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    var4.setCapacity((-1));
    var4.setCapacity(10);
    boolean var16 = var4.isFull();
    boolean var17 = var4.isFull();
    boolean var18 = var4.isEmpty();
    java.lang.String var19 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test468");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    boolean var11 = var0.isEmpty();
    java.lang.Object var12 = var0.dequeue();
    boolean var13 = var0.isFull();
    java.lang.String var14 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 1.0d+ "'", var12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test469");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    var0.setCapacity(100);
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isFull();
    boolean var14 = var10.isFull();
    java.lang.Object var15 = var10.dequeue();
    boolean var16 = var10.isFull();
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    var10.setCapacity((-1));
    java.lang.String var21 = var10.toString();
    boolean var22 = var10.isEmpty();
    var10.setCapacity(1);
    var0.enqueue((java.lang.Object)1);
    boolean var26 = var0.isEmpty();
    var0.setCapacity(100);
    var0.setCapacity(0);
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + false+ "'", var15.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test470");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    var0.setCapacity(10);
    boolean var7 = var0.isFull();
    var0.enqueue((java.lang.Object)"[1.0]");
    java.lang.Object var10 = var0.dequeue();
    boolean var11 = var0.isEmpty();
    java.lang.String var12 = var0.toString();
    var0.setCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[1.0]"+ "'", var10.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test471");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    java.lang.Object var12 = var0.dequeue();
    java.lang.String var13 = var0.toString();
    boolean var14 = var0.isEmpty();
    QueueFaulty var15 = new QueueFaulty();
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    boolean var22 = var16.isFull();
    boolean var23 = var16.isFull();
    java.lang.String var24 = var16.toString();
    var16.setCapacity(0);
    var15.enqueue((java.lang.Object)var16);
    var16.setCapacity(10);
    QueueFaulty var30 = new QueueFaulty();
    boolean var31 = var30.isEmpty();
    boolean var32 = var30.isEmpty();
    boolean var33 = var30.isEmpty();
    QueueFaulty var34 = new QueueFaulty();
    var34.enqueue((java.lang.Object)false);
    boolean var37 = var34.isFull();
    boolean var38 = var34.isFull();
    java.lang.Object var39 = var34.dequeue();
    var34.enqueue((java.lang.Object)1.0f);
    var30.enqueue((java.lang.Object)var34);
    var16.enqueue((java.lang.Object)var34);
    boolean var44 = var16.isEmpty();
    java.lang.String var45 = var16.toString();
    boolean var46 = var16.isEmpty();
    var0.enqueue((java.lang.Object)var16);
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[[1.0]]"+ "'", var45.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test472");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    var0.setCapacity((-1));
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    boolean var16 = var12.isFull();
    boolean var17 = var12.isEmpty();
    java.lang.String var18 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    var12.setCapacity(100);
    boolean var22 = var12.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    boolean var29 = var23.isFull();
    boolean var30 = var23.isFull();
    java.lang.String var31 = var23.toString();
    var23.enqueue((java.lang.Object)1.0d);
    var23.setCapacity(0);
    java.lang.String var36 = var23.toString();
    var12.enqueue((java.lang.Object)var23);
    var12.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[false]"+ "'", var18.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[1.0]"+ "'", var36.equals("[1.0]"));

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test473");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var10 = var0.isFull();
    java.lang.String var11 = var0.toString();
    var0.setCapacity((-1));
    var0.setCapacity(1);
    var0.setCapacity(1);
    java.lang.String var18 = var0.toString();
    boolean var19 = var0.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test474");


    QueueFaulty var0 = new QueueFaulty();
    var0.setCapacity(100);
    boolean var3 = var0.isEmpty();
    var0.setCapacity(1);
    var0.setCapacity(1);
    var0.setCapacity(10);
    java.lang.String var10 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test475");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.Object var18 = var14.dequeue();
    java.lang.String var19 = var14.toString();
    QueueFaulty var20 = new QueueFaulty();
    java.lang.String var21 = var20.toString();
    var20.setCapacity(1);
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    java.lang.String var30 = var24.toString();
    var20.enqueue((java.lang.Object)var24);
    var14.enqueue((java.lang.Object)var24);
    QueueFaulty var33 = new QueueFaulty();
    var33.enqueue((java.lang.Object)false);
    boolean var36 = var33.isFull();
    boolean var37 = var33.isFull();
    java.lang.Object var38 = var33.dequeue();
    var33.enqueue((java.lang.Object)1.0f);
    var33.setCapacity(10);
    var14.enqueue((java.lang.Object)10);
    boolean var44 = var14.isFull();
    var0.enqueue((java.lang.Object)var14);
    boolean var46 = var0.isEmpty();
    java.lang.Object var47 = var0.dequeue();
    boolean var48 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[1.0]"+ "'", var13.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + false+ "'", var38.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 1.0d+ "'", var47.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test476");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    boolean var10 = var0.isEmpty();
    java.lang.Object var11 = var0.dequeue();
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    java.lang.Object var16 = var12.dequeue();
    var12.setCapacity(10);
    boolean var19 = var12.isFull();
    var12.setCapacity(1);
    java.lang.String var22 = var12.toString();
    var0.enqueue((java.lang.Object)var12);
    java.lang.String var24 = var12.toString();
    QueueFaulty var25 = new QueueFaulty();
    var25.enqueue((java.lang.Object)false);
    boolean var28 = var25.isEmpty();
    java.lang.Object var29 = var25.dequeue();
    java.lang.String var30 = var25.toString();
    boolean var31 = var25.isEmpty();
    boolean var32 = var25.isEmpty();
    var25.setCapacity(1);
    boolean var35 = var25.isEmpty();
    boolean var36 = var25.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.enqueue((java.lang.Object)var25);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1.0f+ "'", var11.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test477");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isEmpty();
    java.lang.String var13 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test478");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    QueueFaulty var5 = new QueueFaulty();
    var5.enqueue((java.lang.Object)false);
    boolean var8 = var5.isEmpty();
    java.lang.Object var9 = var5.dequeue();
    var5.setCapacity(10);
    boolean var12 = var5.isFull();
    java.lang.String var13 = var5.toString();
    boolean var14 = var5.isEmpty();
    var0.enqueue((java.lang.Object)var14);
    boolean var16 = var0.isEmpty();
    var0.setCapacity((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test479");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isEmpty();
    QueueFaulty var13 = new QueueFaulty();
    var13.enqueue((java.lang.Object)false);
    boolean var16 = var13.isFull();
    boolean var17 = var13.isFull();
    java.lang.Object var18 = var13.dequeue();
    java.lang.String var19 = var13.toString();
    boolean var20 = var13.isFull();
    var0.enqueue((java.lang.Object)var20);
    boolean var22 = var0.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isFull();
    boolean var27 = var23.isFull();
    java.lang.Object var28 = var23.dequeue();
    var23.enqueue((java.lang.Object)1.0f);
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isEmpty();
    java.lang.Object var35 = var31.dequeue();
    var31.setCapacity(10);
    boolean var38 = var31.isFull();
    var23.enqueue((java.lang.Object)var31);
    boolean var40 = var31.isFull();
    var0.enqueue((java.lang.Object)var31);
    java.lang.String var42 = var31.toString();
    boolean var43 = var31.isFull();
    boolean var44 = var31.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + false+ "'", var28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test480");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    java.lang.Object var14 = var0.dequeue();
    java.lang.String var15 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test481");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    boolean var15 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test482");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity(10);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    var16.enqueue((java.lang.Object)0.0f);
    var0.enqueue((java.lang.Object)var16);
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    boolean var27 = var23.isFull();
    var23.setCapacity(10);
    boolean var30 = var23.isEmpty();
    QueueFaulty var31 = new QueueFaulty();
    var31.enqueue((java.lang.Object)false);
    boolean var34 = var31.isFull();
    boolean var35 = var31.isFull();
    java.lang.Object var36 = var31.dequeue();
    java.lang.String var37 = var31.toString();
    var23.enqueue((java.lang.Object)var37);
    var23.setCapacity((-1));
    QueueFaulty var41 = new QueueFaulty();
    var41.enqueue((java.lang.Object)false);
    boolean var44 = var41.isEmpty();
    java.lang.Object var45 = var41.dequeue();
    var41.setCapacity(10);
    boolean var48 = var41.isFull();
    var41.enqueue((java.lang.Object)"hi!");
    var23.enqueue((java.lang.Object)var41);
    java.lang.Object var52 = var23.dequeue();
    java.lang.Object var53 = var23.dequeue();
    var0.enqueue((java.lang.Object)var23);
    boolean var55 = var0.isFull();
    boolean var56 = var0.isEmpty();
    boolean var57 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + false+ "'", var36.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + false+ "'", var45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[]"+ "'", var53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test483");


    QueueFaulty var0 = new QueueFaulty();
    boolean var1 = var0.isEmpty();
    java.lang.String var2 = var0.toString();
    var0.setCapacity((-1));
    boolean var5 = var0.isEmpty();
    QueueFaulty var6 = new QueueFaulty();
    boolean var7 = var6.isEmpty();
    java.lang.String var8 = var6.toString();
    var6.setCapacity(0);
    var0.enqueue((java.lang.Object)var6);
    QueueFaulty var12 = new QueueFaulty();
    var12.enqueue((java.lang.Object)false);
    boolean var15 = var12.isEmpty();
    boolean var16 = var12.isFull();
    var12.setCapacity(10);
    boolean var19 = var12.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    var20.enqueue((java.lang.Object)false);
    boolean var23 = var20.isFull();
    boolean var24 = var20.isFull();
    java.lang.Object var25 = var20.dequeue();
    java.lang.String var26 = var20.toString();
    var12.enqueue((java.lang.Object)var26);
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isEmpty();
    java.lang.Object var32 = var28.dequeue();
    boolean var33 = var28.isFull();
    java.lang.String var34 = var28.toString();
    boolean var35 = var28.isEmpty();
    var12.enqueue((java.lang.Object)var35);
    var12.setCapacity(10);
    var0.enqueue((java.lang.Object)var12);
    QueueFaulty var40 = new QueueFaulty();
    java.lang.String var41 = var40.toString();
    var40.setCapacity(1);
    java.lang.String var44 = var40.toString();
    var40.setCapacity(0);
    QueueFaulty var47 = new QueueFaulty();
    QueueFaulty var48 = new QueueFaulty();
    var48.enqueue((java.lang.Object)false);
    boolean var51 = var48.isFull();
    boolean var52 = var48.isFull();
    java.lang.Object var53 = var48.dequeue();
    boolean var54 = var48.isFull();
    boolean var55 = var48.isFull();
    java.lang.String var56 = var48.toString();
    var48.setCapacity(0);
    var47.enqueue((java.lang.Object)var48);
    boolean var60 = var48.isEmpty();
    java.lang.String var61 = var48.toString();
    var40.enqueue((java.lang.Object)var48);
    java.lang.String var63 = var48.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var48);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + false+ "'", var25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[]"+ "'", var34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + false+ "'", var53.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[]"+ "'", var63.equals("[]"));

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test484");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.enqueue((java.lang.Object)1.0d);
    var0.setCapacity(0);
    boolean var13 = var0.isEmpty();
    boolean var14 = var0.isFull();
    boolean var15 = var0.isFull();
    QueueFaulty var16 = new QueueFaulty();
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    var0.enqueue((java.lang.Object)var16);
    java.lang.Object var20 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + 1.0d+ "'", var20.equals(1.0d));

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test485");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    var1.setCapacity(10);
    QueueFaulty var15 = new QueueFaulty();
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    boolean var18 = var15.isEmpty();
    QueueFaulty var19 = new QueueFaulty();
    var19.enqueue((java.lang.Object)false);
    boolean var22 = var19.isFull();
    boolean var23 = var19.isFull();
    java.lang.Object var24 = var19.dequeue();
    var19.enqueue((java.lang.Object)1.0f);
    var15.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    boolean var29 = var1.isEmpty();
    boolean var30 = var1.isEmpty();
    boolean var31 = var1.isFull();
    boolean var32 = var1.isEmpty();
    boolean var33 = var1.isFull();
    boolean var34 = var1.isFull();
    java.lang.Object var35 = var1.dequeue();
    var1.setCapacity(1);
    boolean var38 = var1.isEmpty();
    var1.setCapacity(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + false+ "'", var24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test486");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var4.isEmpty();
    boolean var13 = var4.isEmpty();
    java.lang.String var14 = var4.toString();
    java.lang.String var15 = var4.toString();
    boolean var16 = var4.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var17 = var4.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test487");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    java.lang.String var14 = var0.toString();
    boolean var15 = var0.isEmpty();
    boolean var16 = var0.isFull();
    var0.setCapacity(10);
    boolean var19 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test488");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isFull();
    boolean var10 = var6.isFull();
    java.lang.Object var11 = var6.dequeue();
    var6.enqueue((java.lang.Object)1.0f);
    var6.setCapacity(10);
    var0.enqueue((java.lang.Object)var6);
    var0.setCapacity(10);
    boolean var19 = var0.isFull();
    var0.setCapacity((-1));
    QueueFaulty var22 = new QueueFaulty();
    var22.enqueue((java.lang.Object)false);
    boolean var25 = var22.isFull();
    boolean var26 = var22.isFull();
    java.lang.Object var27 = var22.dequeue();
    var22.enqueue((java.lang.Object)1.0f);
    java.lang.String var30 = var22.toString();
    java.lang.String var31 = var22.toString();
    var22.setCapacity(10);
    boolean var34 = var22.isEmpty();
    QueueFaulty var35 = new QueueFaulty();
    var35.enqueue((java.lang.Object)false);
    boolean var38 = var35.isFull();
    boolean var39 = var35.isFull();
    java.lang.Object var40 = var35.dequeue();
    java.lang.String var41 = var35.toString();
    boolean var42 = var35.isFull();
    var22.enqueue((java.lang.Object)var42);
    boolean var44 = var22.isEmpty();
    boolean var45 = var22.isFull();
    var0.enqueue((java.lang.Object)var22);
    var22.setCapacity(100);
    boolean var49 = var22.isFull();
    java.lang.Object var50 = var22.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + false+ "'", var11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[1.0]"+ "'", var30.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[1.0]"+ "'", var31.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test489");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    java.lang.Object var4 = var0.dequeue();
    boolean var5 = var0.isFull();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isEmpty();
    boolean var8 = var0.isFull();
    boolean var9 = var0.isEmpty();
    QueueFaulty var10 = new QueueFaulty();
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    boolean var17 = var11.isFull();
    boolean var18 = var11.isFull();
    java.lang.String var19 = var11.toString();
    var11.setCapacity(0);
    var10.enqueue((java.lang.Object)var11);
    boolean var23 = var11.isEmpty();
    var0.enqueue((java.lang.Object)var11);
    boolean var25 = var11.isEmpty();
    java.lang.String var26 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + false+ "'", var4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test490");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isEmpty();
    boolean var4 = var0.isFull();
    java.lang.String var5 = var0.toString();
    java.lang.Object var6 = var0.dequeue();
    var0.setCapacity(0);
    boolean var9 = var0.isEmpty();
    java.lang.String var10 = var0.toString();
    boolean var11 = var0.isFull();
    QueueFaulty var12 = new QueueFaulty();
    boolean var13 = var12.isEmpty();
    java.lang.String var14 = var12.toString();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isFull();
    boolean var19 = var15.isFull();
    java.lang.Object var20 = var15.dequeue();
    boolean var21 = var15.isFull();
    boolean var22 = var15.isFull();
    java.lang.String var23 = var15.toString();
    var15.enqueue((java.lang.Object)1.0d);
    boolean var26 = var15.isFull();
    var12.enqueue((java.lang.Object)var15);
    QueueFaulty var28 = new QueueFaulty();
    var28.enqueue((java.lang.Object)false);
    boolean var31 = var28.isFull();
    boolean var32 = var28.isFull();
    java.lang.Object var33 = var28.dequeue();
    boolean var34 = var28.isFull();
    boolean var35 = var28.isFull();
    boolean var36 = var28.isFull();
    java.lang.String var37 = var28.toString();
    QueueFaulty var38 = new QueueFaulty();
    var38.enqueue((java.lang.Object)false);
    boolean var41 = var38.isEmpty();
    java.lang.Object var42 = var38.dequeue();
    QueueFaulty var43 = new QueueFaulty();
    java.lang.String var44 = var43.toString();
    var38.enqueue((java.lang.Object)var44);
    var38.setCapacity(10);
    var28.enqueue((java.lang.Object)10);
    var15.enqueue((java.lang.Object)var28);
    var28.setCapacity(10);
    var0.enqueue((java.lang.Object)10);
    java.lang.Object var53 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[false]"+ "'", var5.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + false+ "'", var33.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + false+ "'", var42.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + 10+ "'", var53.equals(10));

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test491");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    java.lang.String var7 = var0.toString();
    var0.setCapacity((-1));
    boolean var10 = var0.isFull();
    boolean var11 = var0.isEmpty();
    boolean var12 = var0.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test492");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    var0.setCapacity(0);
    java.lang.String var13 = var0.toString();
    boolean var14 = var0.isFull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var0.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test493");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    var0.setCapacity(0);
    QueueFaulty var6 = new QueueFaulty();
    var6.enqueue((java.lang.Object)false);
    boolean var9 = var6.isEmpty();
    java.lang.Object var10 = var6.dequeue();
    java.lang.String var11 = var6.toString();
    boolean var12 = var6.isEmpty();
    var6.setCapacity(0);
    boolean var15 = var6.isEmpty();
    boolean var16 = var6.isFull();
    var0.enqueue((java.lang.Object)var6);
    var6.setCapacity((-1));
    boolean var20 = var6.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + false+ "'", var10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test494");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isFull();
    var0.setCapacity((-1));
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    java.lang.String var19 = var16.toString();
    boolean var20 = var16.isEmpty();
    boolean var21 = var16.isEmpty();
    boolean var22 = var16.isEmpty();
    QueueFaulty var23 = new QueueFaulty();
    java.lang.String var24 = var23.toString();
    var23.setCapacity(1);
    QueueFaulty var27 = new QueueFaulty();
    var27.enqueue((java.lang.Object)false);
    boolean var30 = var27.isFull();
    boolean var31 = var27.isFull();
    java.lang.Object var32 = var27.dequeue();
    java.lang.String var33 = var27.toString();
    var23.enqueue((java.lang.Object)var27);
    boolean var35 = var23.isEmpty();
    boolean var36 = var23.isEmpty();
    java.lang.String var37 = var23.toString();
    var23.setCapacity(1);
    var23.setCapacity(10);
    var16.enqueue((java.lang.Object)var23);
    var0.enqueue((java.lang.Object)var23);
    var23.setCapacity(1);
    boolean var46 = var23.isEmpty();
    boolean var47 = var23.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[false]"+ "'", var19.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + false+ "'", var32.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[[]]"+ "'", var37.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test495");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    java.lang.String var6 = var0.toString();
    boolean var7 = var0.isFull();
    boolean var8 = var0.isFull();
    boolean var9 = var0.isFull();
    QueueFaulty var10 = new QueueFaulty();
    var10.enqueue((java.lang.Object)false);
    boolean var13 = var10.isEmpty();
    java.lang.Object var14 = var10.dequeue();
    var10.setCapacity(10);
    boolean var17 = var10.isFull();
    java.lang.String var18 = var10.toString();
    boolean var19 = var10.isEmpty();
    QueueFaulty var20 = new QueueFaulty();
    java.lang.String var21 = var20.toString();
    var20.setCapacity(1);
    QueueFaulty var24 = new QueueFaulty();
    var24.enqueue((java.lang.Object)false);
    boolean var27 = var24.isFull();
    boolean var28 = var24.isFull();
    java.lang.Object var29 = var24.dequeue();
    java.lang.String var30 = var24.toString();
    var20.enqueue((java.lang.Object)var24);
    var10.enqueue((java.lang.Object)var20);
    var20.setCapacity(100);
    var0.enqueue((java.lang.Object)100);
    java.lang.String var36 = var0.toString();
    java.lang.String var37 = var0.toString();
    var0.setCapacity(1);
    boolean var40 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + false+ "'", var14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + false+ "'", var29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[100]"+ "'", var36.equals("[100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[100]"+ "'", var37.equals("[100]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test496");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var5 = var0.isEmpty();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    var0.setCapacity((-1));
    boolean var10 = var0.isEmpty();
    boolean var11 = var0.isFull();
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    var0.setCapacity(10);
    boolean var16 = var0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[false]"+ "'", var3.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test497");


    QueueFaulty var0 = new QueueFaulty();
    java.lang.String var1 = var0.toString();
    var0.setCapacity(1);
    QueueFaulty var4 = new QueueFaulty();
    var4.enqueue((java.lang.Object)false);
    boolean var7 = var4.isFull();
    boolean var8 = var4.isFull();
    java.lang.Object var9 = var4.dequeue();
    java.lang.String var10 = var4.toString();
    var0.enqueue((java.lang.Object)var4);
    QueueFaulty var12 = new QueueFaulty();
    java.lang.String var13 = var12.toString();
    var12.setCapacity(1);
    QueueFaulty var16 = new QueueFaulty();
    var16.enqueue((java.lang.Object)false);
    boolean var19 = var16.isFull();
    boolean var20 = var16.isFull();
    java.lang.Object var21 = var16.dequeue();
    java.lang.String var22 = var16.toString();
    var12.enqueue((java.lang.Object)var16);
    boolean var24 = var12.isEmpty();
    boolean var25 = var12.isFull();
    var4.enqueue((java.lang.Object)var25);
    java.lang.Object var27 = var4.dequeue();
    boolean var28 = var4.isFull();
    java.lang.String var29 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + false+ "'", var9.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + false+ "'", var21.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + true+ "'", var27.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test498");


    QueueFaulty var0 = new QueueFaulty();
    QueueFaulty var1 = new QueueFaulty();
    var1.enqueue((java.lang.Object)false);
    boolean var4 = var1.isFull();
    boolean var5 = var1.isFull();
    java.lang.Object var6 = var1.dequeue();
    boolean var7 = var1.isFull();
    boolean var8 = var1.isFull();
    java.lang.String var9 = var1.toString();
    var1.setCapacity(0);
    var0.enqueue((java.lang.Object)var1);
    boolean var13 = var1.isEmpty();
    boolean var14 = var1.isFull();
    QueueFaulty var15 = new QueueFaulty();
    var15.enqueue((java.lang.Object)false);
    boolean var18 = var15.isEmpty();
    boolean var19 = var15.isFull();
    var15.setCapacity(10);
    boolean var22 = var15.isEmpty();
    var15.setCapacity(100);
    var15.setCapacity(0);
    java.lang.Object var27 = var15.dequeue();
    var1.enqueue((java.lang.Object)var15);
    boolean var29 = var15.isFull();
    boolean var30 = var15.isEmpty();
    boolean var31 = var15.isEmpty();
    java.lang.String var32 = var15.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var33 = var15.dequeue();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + false+ "'", var6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test499");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    boolean var6 = var0.isFull();
    boolean var7 = var0.isFull();
    java.lang.String var8 = var0.toString();
    var0.setCapacity((-1));
    QueueFaulty var11 = new QueueFaulty();
    var11.enqueue((java.lang.Object)false);
    boolean var14 = var11.isFull();
    boolean var15 = var11.isFull();
    java.lang.Object var16 = var11.dequeue();
    var11.enqueue((java.lang.Object)1.0f);
    java.lang.String var19 = var11.toString();
    java.lang.String var20 = var11.toString();
    boolean var21 = var11.isEmpty();
    java.lang.Object var22 = var11.dequeue();
    var0.enqueue(var22);
    boolean var24 = var0.isFull();
    boolean var25 = var0.isFull();
    boolean var26 = var0.isEmpty();
    boolean var27 = var0.isEmpty();
    boolean var28 = var0.isFull();
    java.lang.Object var29 = var0.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[1.0]"+ "'", var19.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[1.0]"+ "'", var20.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 1.0f+ "'", var22.equals(1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 1.0f+ "'", var29.equals(1.0f));

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test500");


    QueueFaulty var0 = new QueueFaulty();
    var0.enqueue((java.lang.Object)false);
    boolean var3 = var0.isFull();
    boolean var4 = var0.isFull();
    java.lang.Object var5 = var0.dequeue();
    var0.enqueue((java.lang.Object)1.0f);
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    var0.setCapacity(10);
    boolean var12 = var0.isEmpty();
    boolean var13 = var0.isEmpty();
    QueueFaulty var14 = new QueueFaulty();
    var14.enqueue((java.lang.Object)false);
    boolean var17 = var14.isEmpty();
    java.lang.Object var18 = var14.dequeue();
    java.lang.String var19 = var14.toString();
    boolean var20 = var14.isEmpty();
    boolean var21 = var14.isFull();
    java.lang.String var22 = var14.toString();
    QueueFaulty var23 = new QueueFaulty();
    var23.enqueue((java.lang.Object)false);
    boolean var26 = var23.isEmpty();
    java.lang.Object var27 = var23.dequeue();
    java.lang.String var28 = var23.toString();
    boolean var29 = var23.isFull();
    QueueFaulty var30 = new QueueFaulty();
    var30.enqueue((java.lang.Object)false);
    boolean var33 = var30.isEmpty();
    boolean var34 = var30.isFull();
    var30.setCapacity(10);
    boolean var37 = var30.isFull();
    var23.enqueue((java.lang.Object)var30);
    boolean var39 = var23.isFull();
    var14.enqueue((java.lang.Object)var39);
    java.lang.String var41 = var14.toString();
    var0.enqueue((java.lang.Object)var14);
    QueueFaulty var43 = new QueueFaulty();
    var43.enqueue((java.lang.Object)(short)(-1));
    java.lang.Object var46 = var43.dequeue();
    java.lang.String var47 = var43.toString();
    java.lang.String var48 = var43.toString();
    java.lang.String var49 = var43.toString();
    QueueFaulty var50 = new QueueFaulty();
    var50.enqueue((java.lang.Object)false);
    java.lang.String var53 = var50.toString();
    boolean var54 = var50.isEmpty();
    java.lang.String var55 = var50.toString();
    boolean var56 = var50.isFull();
    boolean var57 = var50.isEmpty();
    java.lang.Object var58 = var50.dequeue();
    var50.setCapacity(0);
    var43.enqueue((java.lang.Object)var50);
    java.lang.Object var62 = var43.dequeue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.enqueue((java.lang.Object)var43);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + false+ "'", var5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1.0]"+ "'", var8.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1.0]"+ "'", var9.equals("[1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + false+ "'", var18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[]"+ "'", var22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[false]"+ "'", var41.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + (short)(-1)+ "'", var46.equals((short)(-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[]"+ "'", var49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[false]"+ "'", var53.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[false]"+ "'", var55.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + false+ "'", var58.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

}
