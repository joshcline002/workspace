import java.util.ArrayList;
import java.util.Stack;


public class QuickSort<E extends Comparable<? super E>> implements SortAnalysis<E> {

	@Override
	public long analyzeSort(ArrayList<E> list) {
		long endTime;
		long startTime = System.currentTimeMillis();
		
		Stack<Integer> stack = new Stack<Integer>();
		stack.push(0);
		stack.push(list.size());
		
		while(!stack.isEmpty()){
			int end = stack.pop();
			int start = stack.pop();
			if ((end - start)<2){
				continue;
			}
			int p = start + ((end-start)/2);
			p = partition(list, p, start, end);
			
			stack.push(p+1);
			stack.push(end);
			
			stack.push(start);
			stack.push(p);
		}
		
		endTime = System.currentTimeMillis();
		return endTime - startTime;
	}
	
	private int partition(ArrayList<E> list, int left, int right ){
		int l = left;
		int r = right-1;
		E pivot = list.get((l+r)/2);
		E tmp;
		
		while(r >= l){
			while (list.get(l).compareTo(pivot)<0){
				l++;
			}
			
			while(list.get(r).compareTo(pivot)>0){
				r--;
			}
			
			if(l <= r){
				tmp = list.get(l);
				list.set(l, list.get(r));
				list.set(r, tmp);
				l++;
				r--;
			}
			
		}
		return left;
	}

}
