import java.util.Enumeration;
import java.util.Vector;

public class Customer {
    public Customer (String name) {
        data.set_name(name);
    }
    
    private RentalList data = new RentalList(new Vector<Rental>());

	public void addRental(Rental arg) {
        data.get_rentals().addElement(arg);
    }
    
    public String getName() {
        return data.get_name();
    }
    
    public String statement() {
    
        double      totalAmount          = 0;
        int         frequentRenterPoints = 0;
        Enumeration<Rental> rentals              = data.get_rentals().elements();
        String      result               = "Rental Record for " + getName() + "\n";
        
        while (rentals.hasMoreElements()) {
            
            double thisAmount = 0;
            Rental each       = (Rental) rentals.nextElement();
            
            // determine amounts for each line
            thisAmount = rentalPrice(thisAmount, each);
            
            frequentRenterPoints = frequentRenterPoints(frequentRenterPoints, each);
            
            // show figures for this rental
            result = movieResult(result, thisAmount, each);
            totalAmount += thisAmount;
        }
        
        // add footer lines
        result += "Amount owed is " + String.valueOf(totalAmount) + "\n";
        result += "You earned " + String.valueOf(frequentRenterPoints) +
                " frequent renter points";
        return result;
    }

	private double rentalPrice(double thisAmount, Rental each) {
		switch (each.getMovie().getPriceCode()) {
		    case Movie.REGULAR:
		        thisAmount += 2;
		        if (each.getDaysRented() > 2) {
		            thisAmount += (each.getDaysRented() - 2) * 1.5;
		        }
		        break;
		    case Movie.NEW_RELEASE:
		        thisAmount += each.getDaysRented() * 3;
		        break;
		    case Movie.CHILDRENS:
		        thisAmount += 1.5;
		        if (each.getDaysRented() > 3) {
		            thisAmount += (each.getDaysRented() - 3) * 1.5;
		        }
		        break;
		}
		return thisAmount;
	}

	private int frequentRenterPoints(int frequentRenterPoints, Rental each) {
		// add frequent renter points
		frequentRenterPoints++;
		
		// add bonus for a two day new release rental
		if ((each.getMovie().getPriceCode() == Movie.NEW_RELEASE) &&
		    (each.getDaysRented() > 1)) {
		        frequentRenterPoints++;
		}
		return frequentRenterPoints;
	}

	
	private String movieResult(String result, double thisAmount, Rental each) {
		result += "\t" + each.getMovie().getTitle() +
		          "\t" + String.valueOf(thisAmount) + "\n";
		return result;
	}
}