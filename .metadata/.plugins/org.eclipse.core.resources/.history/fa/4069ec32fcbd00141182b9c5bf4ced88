import java.io.BufferedWriter;
import java.util.ArrayList;
import java.util.Random;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Part2a {

	public static void main(String[] args) throws IOException {
		boolean found = true;
		ArrayList<Integer> list = new ArrayList<Integer>();
		int size = 0;
		long time = 0;
		int j = 0;
		int numTimes=0;
		int avgSize = 0;
		File f = new File("InsertionSortWorstTimes.txt");
		File g = new File("InsertionSortRandomTimes.txt");
		BufferedWriter bw = new BufferedWriter(new FileWriter(f));
		BufferedWriter bw2 = new BufferedWriter(new FileWriter(g)); 
		InsertionSort sort = new InsertionSort();
		Random ranNum = new Random();
		while(numTimes<3){
		int i = 2;
		found = true;
		while(found){
			while(j<i){
				try{
				list.add(ranNum.nextInt());
				j++;
				}catch (OutOfMemoryError e){
					System.out.println("Out of Memory Error Setting arrayList size to largest before error.");
					i = j;
				}
			}
			time = sort.analyzeSort(list);
			System.out.println("size =" + i + "Time =" + time);
			if(time > 990 && time < 1010){
				found = false;
				size = i;
			} else if( time > 1050){
				i--;
			}else if(time > 950){
				i++;
			}else if(500 > time && time > 350 ){
				i = i * 2;
			}else if(time > 500){
				i = (int)(i*1.125);
			} else {
				i = i*5;
			}
			list.clear();
			j=0;
		}
		list.clear();
		j = 0;
		System.out.println("Found size =" + size + "Time =" + time);
		avgSize += size;
		numTimes++;
	}
		int timing;
		size = avgSize/numTimes;
		System.out.println("Found Average Size =" + size);
		int i = 1;
		for(int k =  0; k<100; k++){
			while(j<i){
				list.add(i-j);
				j++;
			}
			time = sort.analyzeSort(list); 
			timing = (int)time;
			System.out.println("time" + timing + "size" + i);
			bw.write(timing);
			bw.newLine();
			i = i+size/100;
			list.clear();
			j = 0;
				
		}
		bw.close();
		i = 1;
		j = 0;
		for(int k =  0; k<100; k++){
			while(j<i){
				list.add(ranNum.nextInt());
				j++;
			}
			time = sort.analyzeSort(list); 
			timing = (int)time;
			System.out.println("time" + timing + "size" + i);
			bw2.write(timing);
			bw2.newLine();
			i = i+size/100;
			list.clear();
			j = 0;
		}
		bw2.close();
	}
}


